(function() {var type_impls = {
"bevy_ecs":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query%3C'w,+'s,+D,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#354-1577\">source</a><a href=\"#impl-Query%3C'w,+'s,+D,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'w, 's, D: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryData.html\" title=\"trait bevy_ecs::query::QueryData\">QueryData</a>, F: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\">QueryFilter</a>&gt; <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'w, 's, D, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_readonly\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#389-403\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.to_readonly\" class=\"fn\">to_readonly</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'_, 's, D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.QueryData.html#associatedtype.ReadOnly\" title=\"type bevy_ecs::query::QueryData::ReadOnly\">ReadOnly</a>, F&gt;</h4></section></summary><div class=\"docblock\"><p>Returns another <code>Query</code> from this that fetches the read-only version of the query items.</p>\n<p>For example, <code>Query&lt;(&amp;mut D1, &amp;D2, &amp;mut D3), With&lt;F&gt;&gt;</code> will become <code>Query&lt;(&amp;D1, &amp;D2, &amp;D3), With&lt;F&gt;&gt;</code>.\nThis can be useful when working around the borrow checker,\nor reusing functionality between systems via functions that accept query types.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#430-439\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryIter.html\" title=\"struct bevy_ecs::query::QueryIter\">QueryIter</a>&lt;'_, 's, D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.QueryData.html#associatedtype.ReadOnly\" title=\"type bevy_ecs::query::QueryData::ReadOnly\">ReadOnly</a>, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryIter&lt;&#39;_, &#39;s, D::ReadOnly, F&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over the read-only query items.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<p>Here, the <code>report_names_system</code> iterates over the <code>Player</code> component of every entity that contains it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>report_names_system(query: Query&lt;<span class=\"kw-2\">&amp;</span>Player&gt;) {\n    <span class=\"kw\">for </span>player <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>query {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Say hello to {}!\"</span>, player.name);\n    }\n}</code></pre></div>\n<h5 id=\"see-also\"><a href=\"#see-also\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter_mut\" title=\"method bevy_ecs::system::Query::iter_mut\"><code>iter_mut</code></a> for mutable query items.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.for_each\" title=\"method bevy_ecs::system::Query::for_each\"><code>for_each</code></a> for the closure based alternative.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#466-472\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryIter.html\" title=\"struct bevy_ecs::query::QueryIter\">QueryIter</a>&lt;'_, 's, D, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryIter&lt;&#39;_, &#39;s, D, F&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over the query items.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<p>Here, the <code>gravity_system</code> updates the <code>Velocity</code> component of every entity that contains it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>gravity_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Velocity&gt;) {\n    <span class=\"kw\">const </span>DELTA: f32 = <span class=\"number\">1.0 </span>/ <span class=\"number\">60.0</span>;\n    <span class=\"kw\">for </span><span class=\"kw-2\">mut </span>velocity <span class=\"kw\">in </span><span class=\"kw-2\">&amp;mut </span>query {\n        velocity.y -= <span class=\"number\">9.8 </span>* DELTA;\n    }\n}</code></pre></div>\n<h5 id=\"see-also-1\"><a href=\"#see-also-1\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter\" title=\"method bevy_ecs::system::Query::iter\"><code>iter</code></a> for read-only query items.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.for_each_mut\" title=\"method bevy_ecs::system::Query::for_each_mut\"><code>for_each_mut</code></a> for the closure based alternative.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_combinations\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#494-507\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_combinations\" class=\"fn\">iter_combinations</a>&lt;const K: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;self\n) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryCombinationIter.html\" title=\"struct bevy_ecs::query::QueryCombinationIter\">QueryCombinationIter</a>&lt;'_, 's, D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.QueryData.html#associatedtype.ReadOnly\" title=\"type bevy_ecs::query::QueryData::ReadOnly\">ReadOnly</a>, F, K&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryCombinationIter&lt;&#39;_, &#39;s, D::ReadOnly, F, K&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"bevy_ecs/query/struct.QueryCombinationIter.html\" title=\"struct bevy_ecs::query::QueryCombinationIter\"><code>QueryCombinationIter</code></a> over all combinations of <code>K</code> read-only query items without repetition.</p>\n<h5 id=\"example-2\"><a href=\"#example-2\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>some_system(query: Query&lt;<span class=\"kw-2\">&amp;</span>ComponentA&gt;) {\n    <span class=\"kw\">for </span>[a1, a2] <span class=\"kw\">in </span>query.iter_combinations() {\n        <span class=\"comment\">// ...\n    </span>}\n}</code></pre></div>\n<h5 id=\"see-also-2\"><a href=\"#see-also-2\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter_combinations_mut\" title=\"method bevy_ecs::system::Query::iter_combinations_mut\"><code>iter_combinations_mut</code></a> for mutable query item combinations.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_combinations_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#529-537\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_combinations_mut\" class=\"fn\">iter_combinations_mut</a>&lt;const K: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self\n) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryCombinationIter.html\" title=\"struct bevy_ecs::query::QueryCombinationIter\">QueryCombinationIter</a>&lt;'_, 's, D, F, K&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryCombinationIter&lt;&#39;_, &#39;s, D, F, K&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"bevy_ecs/query/struct.QueryCombinationIter.html\" title=\"struct bevy_ecs::query::QueryCombinationIter\"><code>QueryCombinationIter</code></a> over all combinations of <code>K</code> query items without repetition.</p>\n<h5 id=\"example-3\"><a href=\"#example-3\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>some_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>ComponentA&gt;) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>combinations = query.iter_combinations_mut();\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>([<span class=\"kw-2\">mut </span>a1, <span class=\"kw-2\">mut </span>a2]) = combinations.fetch_next() {\n        <span class=\"comment\">// mutably access components data\n    </span>}\n}</code></pre></div>\n<h5 id=\"see-also-3\"><a href=\"#see-also-3\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter_combinations\" title=\"method bevy_ecs::system::Query::iter_combinations\"><code>iter_combinations</code></a> for read-only query item combinations.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_many\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#576-594\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_many\" class=\"fn\">iter_many</a>&lt;EntityList: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;(\n    &amp;self,\n    entities: EntityList\n) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryManyIter.html\" title=\"struct bevy_ecs::query::QueryManyIter\">QueryManyIter</a>&lt;'_, 's, D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.QueryData.html#associatedtype.ReadOnly\" title=\"type bevy_ecs::query::QueryData::ReadOnly\">ReadOnly</a>, F, EntityList::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryManyIter&lt;&#39;_, &#39;s, D::ReadOnly, F, EntityList::IntoIter&gt;\">ⓘ</a><div class=\"where\">where\n    EntityList::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over the read-only query items generated from an <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a> list.</p>\n<p>Items are returned in the order of the list of entities.\nEntities that don’t match the query are skipped.</p>\n<h5 id=\"example-4\"><a href=\"#example-4\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// A component containing an entity list.\n</span><span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Friends {\n    list: Vec&lt;Entity&gt;,\n}\n\n<span class=\"kw\">fn </span>system(\n    friends_query: Query&lt;<span class=\"kw-2\">&amp;</span>Friends&gt;,\n    counter_query: Query&lt;<span class=\"kw-2\">&amp;</span>Counter&gt;,\n) {\n    <span class=\"kw\">for </span>friends <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>friends_query {\n        <span class=\"kw\">for </span>counter <span class=\"kw\">in </span>counter_query.iter_many(<span class=\"kw-2\">&amp;</span>friends.list) {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Friend's counter: {:?}\"</span>, counter.value);\n        }\n    }\n}</code></pre></div>\n<h5 id=\"see-also-4\"><a href=\"#see-also-4\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter_many_mut\" title=\"method bevy_ecs::system::Query::iter_many_mut\"><code>iter_many_mut</code></a> to get mutable query items.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_many_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#630-646\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_many_mut\" class=\"fn\">iter_many_mut</a>&lt;EntityList: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;(\n    &amp;mut self,\n    entities: EntityList\n) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryManyIter.html\" title=\"struct bevy_ecs::query::QueryManyIter\">QueryManyIter</a>&lt;'_, 's, D, F, EntityList::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryManyIter&lt;&#39;_, &#39;s, D, F, EntityList::IntoIter&gt;\">ⓘ</a><div class=\"where\">where\n    EntityList::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the query items generated from an <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a> list.</p>\n<p>Items are returned in the order of the list of entities.\nEntities that don’t match the query are skipped.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Counter {\n    value: i32\n}\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Friends {\n    list: Vec&lt;Entity&gt;,\n}\n\n<span class=\"kw\">fn </span>system(\n    friends_query: Query&lt;<span class=\"kw-2\">&amp;</span>Friends&gt;,\n    <span class=\"kw-2\">mut </span>counter_query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Counter&gt;,\n) {\n    <span class=\"kw\">for </span>friends <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>friends_query {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = counter_query.iter_many_mut(<span class=\"kw-2\">&amp;</span>friends.list);\n        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>counter) = iter.fetch_next() {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Friend's counter: {:?}\"</span>, counter.value);\n            counter.value += <span class=\"number\">1</span>;\n        }\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_unsafe\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#659-665\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_unsafe\" class=\"fn\">iter_unsafe</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryIter.html\" title=\"struct bevy_ecs::query::QueryIter\">QueryIter</a>&lt;'_, 's, D, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryIter&lt;&#39;_, &#39;s, D, F&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over the query items.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>This function makes it possible to violate Rust’s aliasing guarantees.\nYou must make sure this call does not result in multiple mutable references to the same component.</p>\n<h5 id=\"see-also-5\"><a href=\"#see-also-5\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter\" title=\"method bevy_ecs::system::Query::iter\"><code>iter</code></a> and <a href=\"bevy_ecs/system/struct.Query.html#method.iter_mut\" title=\"method bevy_ecs::system::Query::iter_mut\"><code>iter_mut</code></a> for the safe versions.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_combinations_unsafe\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#678-686\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_combinations_unsafe\" class=\"fn\">iter_combinations_unsafe</a>&lt;const K: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;self\n) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryCombinationIter.html\" title=\"struct bevy_ecs::query::QueryCombinationIter\">QueryCombinationIter</a>&lt;'_, 's, D, F, K&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryCombinationIter&lt;&#39;_, &#39;s, D, F, K&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterates over all possible combinations of <code>K</code> query items without repetition.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>This allows aliased mutability.\nYou must make sure this call does not result in multiple mutable references to the same component.</p>\n<h5 id=\"see-also-6\"><a href=\"#see-also-6\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter_combinations\" title=\"method bevy_ecs::system::Query::iter_combinations\"><code>iter_combinations</code></a> and <a href=\"bevy_ecs/system/struct.Query.html#method.iter_combinations_mut\" title=\"method bevy_ecs::system::Query::iter_combinations_mut\"><code>iter_combinations_mut</code></a> for the safe versions.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_many_unsafe\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#699-711\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_many_unsafe\" class=\"fn\">iter_many_unsafe</a>&lt;EntityList: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;(\n    &amp;self,\n    entities: EntityList\n) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryManyIter.html\" title=\"struct bevy_ecs::query::QueryManyIter\">QueryManyIter</a>&lt;'_, 's, D, F, EntityList::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryManyIter&lt;&#39;_, &#39;s, D, F, EntityList::IntoIter&gt;\">ⓘ</a><div class=\"where\">where\n    EntityList::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over the query items generated from an <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a> list.</p>\n<h5 id=\"safety-2\"><a href=\"#safety-2\">Safety</a></h5>\n<p>This allows aliased mutability and does not check for entity uniqueness.\nYou must make sure this call does not result in multiple mutable references to the same component.\nParticular care must be taken when collecting the data (rather than iterating over it one item at a time) such as via <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>Iterator::collect</code></a>.</p>\n<h5 id=\"see-also-7\"><a href=\"#see-also-7\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter_many_mut\" title=\"method bevy_ecs::system::Query::iter_many_mut\"><code>iter_many_mut</code></a> to safely access the query items.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#744-754\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.for_each\" class=\"fn\">for_each</a>&lt;'this&gt;(&amp;'this self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"type\" href=\"bevy_ecs/query/type.ROQueryItem.html\" title=\"type bevy_ecs::query::ROQueryItem\">ROQueryItem</a>&lt;'this, D&gt;))</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.13.0: Query::for_each was not idiomatic Rust and has been moved to query.iter().for_each()</span></div></span></summary><div class=\"docblock\"><p>Runs <code>f</code> on each read-only query item.</p>\n<p>Shorthand for <code>query.iter().for_each(..)</code>.</p>\n<h5 id=\"example-5\"><a href=\"#example-5\">Example</a></h5>\n<p>Here, the <code>report_names_system</code> iterates over the <code>Player</code> component of every entity that contains it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>report_names_system(query: Query&lt;<span class=\"kw-2\">&amp;</span>Player&gt;) {\n    query.for_each(|player| {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Say hello to {}!\"</span>, player.name);\n    });\n}</code></pre></div>\n<h5 id=\"see-also-8\"><a href=\"#see-also-8\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.for_each_mut\" title=\"method bevy_ecs::system::Query::for_each_mut\"><code>for_each_mut</code></a> to operate on mutable query items.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter\" title=\"method bevy_ecs::system::Query::iter\"><code>iter</code></a> for the iterator based alternative.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#787-794\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.for_each_mut\" class=\"fn\">for_each_mut</a>&lt;'a&gt;(&amp;'a mut self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.WorldQuery.html#associatedtype.Item\" title=\"type bevy_ecs::query::WorldQuery::Item\">Item</a>&lt;'a&gt;))</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.13.0: Query::for_each_mut was not idiomatic Rust and has been moved to query.iter_mut().for_each()</span></div></span></summary><div class=\"docblock\"><p>Runs <code>f</code> on each query item.</p>\n<p>Shorthand for <code>query.iter_mut().for_each(..)</code>.</p>\n<h5 id=\"example-6\"><a href=\"#example-6\">Example</a></h5>\n<p>Here, the <code>gravity_system</code> updates the <code>Velocity</code> component of every entity that contains it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>gravity_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Velocity&gt;) {\n    <span class=\"kw\">const </span>DELTA: f32 = <span class=\"number\">1.0 </span>/ <span class=\"number\">60.0</span>;\n    query.for_each_mut(|<span class=\"kw-2\">mut </span>velocity| {\n        velocity.y -= <span class=\"number\">9.8 </span>* DELTA;\n    });\n}</code></pre></div>\n<h5 id=\"see-also-9\"><a href=\"#see-also-9\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.for_each\" title=\"method bevy_ecs::system::Query::for_each\"><code>for_each</code></a> to operate on read-only query items.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.iter_mut\" title=\"method bevy_ecs::system::Query::iter_mut\"><code>iter_mut</code></a> for the iterator based alternative.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#806-814\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.par_iter\" class=\"fn\">par_iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryParIter.html\" title=\"struct bevy_ecs::query::QueryParIter\">QueryParIter</a>&lt;'_, '_, D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.QueryData.html#associatedtype.ReadOnly\" title=\"type bevy_ecs::query::QueryData::ReadOnly\">ReadOnly</a>, F&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a parallel iterator over the query results for the given <a href=\"bevy_ecs/world/struct.World.html\" title=\"struct bevy_ecs::world::World\"><code>World</code></a>.</p>\n<p>This can only be called for read-only queries, see <a href=\"bevy_ecs/system/struct.Query.html#method.par_iter_mut\" title=\"method bevy_ecs::system::Query::par_iter_mut\"><code>par_iter_mut</code></a> for write-queries.</p>\n<p>Note that you must use the <code>for_each</code> method to iterate over the\nresults, see <a href=\"bevy_ecs/system/struct.Query.html#method.par_iter_mut\" title=\"method bevy_ecs::system::Query::par_iter_mut\"><code>par_iter_mut</code></a> for an example.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#841-849\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.par_iter_mut\" class=\"fn\">par_iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryParIter.html\" title=\"struct bevy_ecs::query::QueryParIter\">QueryParIter</a>&lt;'_, '_, D, F&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a parallel iterator over the query results for the given <a href=\"bevy_ecs/world/struct.World.html\" title=\"struct bevy_ecs::world::World\"><code>World</code></a>.</p>\n<p>This can only be called for mutable queries, see <a href=\"bevy_ecs/system/struct.Query.html#method.par_iter\" title=\"method bevy_ecs::system::Query::par_iter\"><code>par_iter</code></a> for read-only-queries.</p>\n<h5 id=\"example-7\"><a href=\"#example-7\">Example</a></h5>\n<p>Here, the <code>gravity_system</code> updates the <code>Velocity</code> component of every entity that contains it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>gravity_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Velocity&gt;) {\n    <span class=\"kw\">const </span>DELTA: f32 = <span class=\"number\">1.0 </span>/ <span class=\"number\">60.0</span>;\n    query.par_iter_mut().for_each(|<span class=\"kw-2\">mut </span>velocity| {\n        velocity.y -= <span class=\"number\">9.8 </span>* DELTA;\n    });\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#883-894\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get\" class=\"fn\">get</a>(\n    &amp;self,\n    entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"type\" href=\"bevy_ecs/query/type.ROQueryItem.html\" title=\"type bevy_ecs::query::ROQueryItem\">ROQueryItem</a>&lt;'_, D&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\">QueryEntityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the read-only query item for the given <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<p>In case of a nonexisting entity or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\"><code>QueryEntityError</code></a> is returned instead.</p>\n<h5 id=\"example-8\"><a href=\"#example-8\">Example</a></h5>\n<p>Here, <code>get</code> is used to retrieve the exact query item of the entity specified by the <code>SelectedCharacter</code> resource.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>print_selected_character_name_system(\n       query: Query&lt;<span class=\"kw-2\">&amp;</span>Character&gt;,\n       selection: Res&lt;SelectedCharacter&gt;\n)\n{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(selected_character) = query.get(selection.entity) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, selected_character.name);\n    }\n}</code></pre></div>\n<h5 id=\"see-also-10\"><a href=\"#see-also-10\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_mut\" title=\"method bevy_ecs::system::Query::get_mut\"><code>get_mut</code></a> to get a mutable query item.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_many\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#907-918\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_many\" class=\"fn\">get_many</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;self,\n    entities: [<a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;[<a class=\"type\" href=\"bevy_ecs/query/type.ROQueryItem.html\" title=\"type bevy_ecs::query::ROQueryItem\">ROQueryItem</a>&lt;'_, D&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>], <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\">QueryEntityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the read-only query items for the given array of <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<p>The returned query items are in the same order as the input.\nIn case of a nonexisting entity or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\"><code>QueryEntityError</code></a> is returned instead.\nThe elements of the array do not need to be unique, unlike <code>get_many_mut</code>.</p>\n<h5 id=\"see-also-11\"><a href=\"#see-also-11\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_many_mut\" title=\"method bevy_ecs::system::Query::get_many_mut\"><code>get_many_mut</code></a> to get mutable query items.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.many\" title=\"method bevy_ecs::system::Query::many\"><code>many</code></a> for the panicking version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.many\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#962-967\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.many\" class=\"fn\">many</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;self,\n    entities: [<a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>]\n) -&gt; [<a class=\"type\" href=\"bevy_ecs/query/type.ROQueryItem.html\" title=\"type bevy_ecs::query::ROQueryItem\">ROQueryItem</a>&lt;'_, D&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the read-only query items for the given array of <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This method panics if there is a query mismatch or a non-existing entity.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bevy_ecs::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Targets([Entity; <span class=\"number\">3</span>]);\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Position{\n    x: i8,\n    y: i8\n};\n\n<span class=\"kw\">impl </span>Position {\n    <span class=\"kw\">fn </span>distance(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>Position) -&gt; i8 {\n        <span class=\"comment\">// Manhattan distance is way easier to compute!\n        </span>(<span class=\"self\">self</span>.x - other.x).abs() + (<span class=\"self\">self</span>.y - other.y).abs()\n    }\n}\n\n<span class=\"kw\">fn </span>check_all_targets_in_range(targeting_query: Query&lt;(Entity, <span class=\"kw-2\">&amp;</span>Targets, <span class=\"kw-2\">&amp;</span>Position)&gt;, targets_query: Query&lt;<span class=\"kw-2\">&amp;</span>Position&gt;){\n    <span class=\"kw\">for </span>(targeting_entity, targets, origin) <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>targeting_query {\n        <span class=\"comment\">// We can use \"destructuring\" to unpack the results nicely\n        </span><span class=\"kw\">let </span>[target_1, target_2, target_3] = targets_query.many(targets.<span class=\"number\">0</span>);\n\n        <span class=\"macro\">assert!</span>(target_1.distance(origin) &lt;= <span class=\"number\">5</span>);\n        <span class=\"macro\">assert!</span>(target_2.distance(origin) &lt;= <span class=\"number\">5</span>);\n        <span class=\"macro\">assert!</span>(target_3.distance(origin) &lt;= <span class=\"number\">5</span>);\n    }\n}</code></pre></div>\n<h5 id=\"see-also-12\"><a href=\"#see-also-12\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_many\" title=\"method bevy_ecs::system::Query::get_many\"><code>get_many</code></a> for the non-panicking version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#997-1004\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    &amp;mut self,\n    entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.WorldQuery.html#associatedtype.Item\" title=\"type bevy_ecs::query::WorldQuery::Item\">Item</a>&lt;'_&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\">QueryEntityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the query item for the given <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<p>In case of a nonexisting entity or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\"><code>QueryEntityError</code></a> is returned instead.</p>\n<h5 id=\"example-9\"><a href=\"#example-9\">Example</a></h5>\n<p>Here, <code>get_mut</code> is used to retrieve the exact query item of the entity specified by the <code>PoisonedCharacter</code> resource.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>poison_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Health&gt;, poisoned: Res&lt;PoisonedCharacter&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">mut </span>health) = query.get_mut(poisoned.character_id) {\n        health.<span class=\"number\">0 </span>-= <span class=\"number\">1</span>;\n    }\n}</code></pre></div>\n<h5 id=\"see-also-13\"><a href=\"#see-also-13\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get\" title=\"method bevy_ecs::system::Query::get\"><code>get</code></a> to get a read-only query item.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_many_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1016-1025\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_many_mut\" class=\"fn\">get_many_mut</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    entities: [<a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;[D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.WorldQuery.html#associatedtype.Item\" title=\"type bevy_ecs::query::WorldQuery::Item\">Item</a>&lt;'_&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>], <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\">QueryEntityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the query items for the given array of <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<p>The returned query items are in the same order as the input.\nIn case of a nonexisting entity, duplicate entities or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\"><code>QueryEntityError</code></a> is returned instead.</p>\n<h5 id=\"see-also-14\"><a href=\"#see-also-14\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_many\" title=\"method bevy_ecs::system::Query::get_many\"><code>get_many</code></a> to get read-only query items.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.many_mut\" title=\"method bevy_ecs::system::Query::many_mut\"><code>many_mut</code></a> for the panicking version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.many_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1076-1081\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.many_mut\" class=\"fn\">many_mut</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    entities: [<a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>]\n) -&gt; [D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.WorldQuery.html#associatedtype.Item\" title=\"type bevy_ecs::query::WorldQuery::Item\">Item</a>&lt;'_&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the query items for the given array of <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>This method panics if there is a query mismatch, a non-existing entity, or the same <code>Entity</code> is included more than once in the array.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bevy_ecs::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Spring{\n    connected_entities: [Entity; <span class=\"number\">2</span>],\n    strength: f32,\n}\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Position {\n    x: f32,\n    y: f32,\n}\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Force {\n    x: f32,\n    y: f32,\n}\n\n<span class=\"kw\">fn </span>spring_forces(spring_query: Query&lt;<span class=\"kw-2\">&amp;</span>Spring&gt;, <span class=\"kw-2\">mut </span>mass_query: Query&lt;(<span class=\"kw-2\">&amp;</span>Position, <span class=\"kw-2\">&amp;mut </span>Force)&gt;){\n    <span class=\"kw\">for </span>spring <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>spring_query {\n         <span class=\"comment\">// We can use \"destructuring\" to unpack our query items nicely\n         </span><span class=\"kw\">let </span>[(position_1, <span class=\"kw-2\">mut </span>force_1), (position_2, <span class=\"kw-2\">mut </span>force_2)] = mass_query.many_mut(spring.connected_entities);\n\n         force_1.x += spring.strength * (position_1.x - position_2.x);\n         force_1.y += spring.strength * (position_1.y - position_2.y);\n\n         <span class=\"comment\">// Silence borrow-checker: I have split your mutable borrow!\n         </span>force_2.x += spring.strength * (position_2.x - position_1.x);\n         force_2.y += spring.strength * (position_2.y - position_1.y);\n    }\n}</code></pre></div>\n<h5 id=\"see-also-15\"><a href=\"#see-also-15\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_many_mut\" title=\"method bevy_ecs::system::Query::get_many_mut\"><code>get_many_mut</code></a> for the non panicking version.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.many\" title=\"method bevy_ecs::system::Query::many\"><code>many</code></a> to get read-only query items.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1096-1101\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    &amp;self,\n    entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.WorldQuery.html#associatedtype.Item\" title=\"type bevy_ecs::query::WorldQuery::Item\">Item</a>&lt;'_&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\">QueryEntityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the query item for the given <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<p>In case of a nonexisting entity or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\"><code>QueryEntityError</code></a> is returned instead.</p>\n<h5 id=\"safety-3\"><a href=\"#safety-3\">Safety</a></h5>\n<p>This function makes it possible to violate Rust’s aliasing guarantees.\nYou must make sure this call does not result in multiple mutable references to the same component.</p>\n<h5 id=\"see-also-16\"><a href=\"#see-also-16\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_mut\" title=\"method bevy_ecs::system::Query::get_mut\"><code>get_mut</code></a> for the safe version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_component\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1141-1146\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_component\" class=\"fn\">get_component</a>&lt;T: <a class=\"trait\" href=\"bevy_ecs/component/trait.Component.html\" title=\"trait bevy_ecs::component::Component\">Component</a>&gt;(\n    &amp;self,\n    entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>, <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryComponentError.html\" title=\"enum bevy_ecs::query::QueryComponentError\">QueryComponentError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.13.0: Please use <code>get</code> and select for the exact component based on the structure of the exact query as required.</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the component <code>T</code> of the given <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<p>In case of a nonexisting entity or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\"><code>QueryEntityError</code></a> is returned instead.</p>\n<h5 id=\"example-10\"><a href=\"#example-10\">Example</a></h5>\n<p>Here, <code>get_component</code> is used to retrieve the <code>Character</code> component of the entity specified by the <code>SelectedCharacter</code> resource.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>print_selected_character_name_system(\n       query: Query&lt;<span class=\"kw-2\">&amp;</span>Character&gt;,\n       selection: Res&lt;SelectedCharacter&gt;\n)\n{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(selected_character) = query.get_component::&lt;Character&gt;(selection.entity) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, selected_character.name);\n    }\n}</code></pre></div>\n<h5 id=\"see-also-17\"><a href=\"#see-also-17\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.component\" title=\"method bevy_ecs::system::Query::component\"><code>component</code></a> a panicking version of this function.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_component_mut\" title=\"method bevy_ecs::system::Query::get_component_mut\"><code>get_component_mut</code></a> to get a mutable reference of a component.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_component_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1184-1190\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_component_mut\" class=\"fn\">get_component_mut</a>&lt;T: <a class=\"trait\" href=\"bevy_ecs/component/trait.Component.html\" title=\"trait bevy_ecs::component::Component\">Component</a>&gt;(\n    &amp;mut self,\n    entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bevy_ecs/change_detection/struct.Mut.html\" title=\"struct bevy_ecs::change_detection::Mut\">Mut</a>&lt;'_, T&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryComponentError.html\" title=\"enum bevy_ecs::query::QueryComponentError\">QueryComponentError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.13.0: Please use <code>get_mut</code> and select for the exact component based on the structure of the exact query as required.</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the component <code>T</code> of the given entity.</p>\n<p>In case of a nonexisting entity, mismatched component or missing write access, a <a href=\"bevy_ecs/query/enum.QueryComponentError.html\" title=\"enum bevy_ecs::query::QueryComponentError\"><code>QueryComponentError</code></a> is returned instead.</p>\n<h5 id=\"example-11\"><a href=\"#example-11\">Example</a></h5>\n<p>Here, <code>get_component_mut</code> is used to retrieve the <code>Health</code> component of the entity specified by the <code>PoisonedCharacter</code> resource.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>poison_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Health&gt;, poisoned: Res&lt;PoisonedCharacter&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">mut </span>health) = query.get_component_mut::&lt;Health&gt;(poisoned.character_id) {\n        health.<span class=\"number\">0 </span>-= <span class=\"number\">1</span>;\n    }\n}</code></pre></div>\n<h5 id=\"see-also-18\"><a href=\"#see-also-18\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.component_mut\" title=\"method bevy_ecs::system::Query::component_mut\"><code>component_mut</code></a> a panicking version of this function.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_component\" title=\"method bevy_ecs::system::Query::get_component\"><code>get_component</code></a> to get a shared reference of a component.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.component\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1209-1211\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.component\" class=\"fn\">component</a>&lt;T: <a class=\"trait\" href=\"bevy_ecs/component/trait.Component.html\" title=\"trait bevy_ecs::component::Component\">Component</a>&gt;(&amp;self, entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.13.0: Please use <code>get</code> and select for the exact component based on the structure of the exact query as required.</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the component <code>T</code> of the given <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>.</p>\n<h5 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h5>\n<p>Panics in case of a nonexisting entity or mismatched component.</p>\n<h5 id=\"see-also-19\"><a href=\"#see-also-19\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_component\" title=\"method bevy_ecs::system::Query::get_component\"><code>get_component</code></a> a non-panicking version of this function.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.component_mut\" title=\"method bevy_ecs::system::Query::component_mut\"><code>component_mut</code></a> to get a mutable reference of a component.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.component_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1230-1240\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.component_mut\" class=\"fn\">component_mut</a>&lt;T: <a class=\"trait\" href=\"bevy_ecs/component/trait.Component.html\" title=\"trait bevy_ecs::component::Component\">Component</a>&gt;(&amp;mut self, entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>) -&gt; <a class=\"struct\" href=\"bevy_ecs/change_detection/struct.Mut.html\" title=\"struct bevy_ecs::change_detection::Mut\">Mut</a>&lt;'_, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.13.0: Please use <code>get_mut</code> and select for the exact component based on the structure of the exact query as required.</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the component <code>T</code> of the given entity.</p>\n<h5 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h5>\n<p>Panics in case of a nonexisting entity, mismatched component or missing write access.</p>\n<h5 id=\"see-also-20\"><a href=\"#see-also-20\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_component_mut\" title=\"method bevy_ecs::system::Query::get_component_mut\"><code>get_component_mut</code></a> a non-panicking version of this function.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.component\" title=\"method bevy_ecs::system::Query::component\"><code>component</code></a> to get a shared reference of a component.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_component_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1262-1278\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_component_unchecked_mut\" class=\"fn\">get_component_unchecked_mut</a>&lt;T: <a class=\"trait\" href=\"bevy_ecs/component/trait.Component.html\" title=\"trait bevy_ecs::component::Component\">Component</a>&gt;(\n    &amp;self,\n    entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bevy_ecs/change_detection/struct.Mut.html\" title=\"struct bevy_ecs::change_detection::Mut\">Mut</a>&lt;'_, T&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryComponentError.html\" title=\"enum bevy_ecs::query::QueryComponentError\">QueryComponentError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.13.0: Please use <code>get_unchecked</code> and select for the exact component based on the structure of the exact query as required.</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the component <code>T</code> of the given entity.</p>\n<p>In case of a nonexisting entity or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryComponentError.html\" title=\"enum bevy_ecs::query::QueryComponentError\"><code>QueryComponentError</code></a> is returned instead.</p>\n<h5 id=\"safety-4\"><a href=\"#safety-4\">Safety</a></h5>\n<p>This function makes it possible to violate Rust’s aliasing guarantees.\nYou must make sure this call does not result in multiple mutable references to the same component.</p>\n<h5 id=\"see-also-21\"><a href=\"#see-also-21\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_component_mut\" title=\"method bevy_ecs::system::Query::get_component_mut\"><code>get_component_mut</code></a> for the safe version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.single\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1306-1308\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.single\" class=\"fn\">single</a>(&amp;self) -&gt; <a class=\"type\" href=\"bevy_ecs/query/type.ROQueryItem.html\" title=\"type bevy_ecs::query::ROQueryItem\">ROQueryItem</a>&lt;'_, D&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a single read-only query item when there is exactly one entity matching the query.</p>\n<h5 id=\"panics-4\"><a href=\"#panics-4\">Panics</a></h5>\n<p>This method panics if the number of query items is <strong>not</strong> exactly one.</p>\n<h5 id=\"example-12\"><a href=\"#example-12\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>player_system(query: Query&lt;<span class=\"kw-2\">&amp;</span>Position, With&lt;Player&gt;&gt;) {\n    <span class=\"kw\">let </span>player_position = query.single();\n    <span class=\"comment\">// do something with player_position\n</span>}</code></pre></div>\n<h5 id=\"see-also-22\"><a href=\"#see-also-22\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_single\" title=\"method bevy_ecs::system::Query::get_single\"><code>get_single</code></a> for the non-panicking version.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.single_mut\" title=\"method bevy_ecs::system::Query::single_mut\"><code>single_mut</code></a> to get the mutable query item.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_single\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1342-1353\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_single\" class=\"fn\">get_single</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"type\" href=\"bevy_ecs/query/type.ROQueryItem.html\" title=\"type bevy_ecs::query::ROQueryItem\">ROQueryItem</a>&lt;'_, D&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QuerySingleError.html\" title=\"enum bevy_ecs::query::QuerySingleError\">QuerySingleError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a single read-only query item when there is exactly one entity matching the query.</p>\n<p>If the number of query items is not exactly one, a <a href=\"bevy_ecs/query/enum.QuerySingleError.html\" title=\"enum bevy_ecs::query::QuerySingleError\"><code>QuerySingleError</code></a> is returned instead.</p>\n<h5 id=\"example-13\"><a href=\"#example-13\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>player_scoring_system(query: Query&lt;<span class=\"kw-2\">&amp;</span>PlayerScore&gt;) {\n    <span class=\"kw\">match </span>query.get_single() {\n        <span class=\"prelude-val\">Ok</span>(PlayerScore(score)) =&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Score: {}\"</span>, score);\n        }\n        <span class=\"prelude-val\">Err</span>(QuerySingleError::NoEntities(<span class=\"kw\">_</span>)) =&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Error: There is no player!\"</span>);\n        }\n        <span class=\"prelude-val\">Err</span>(QuerySingleError::MultipleEntities(<span class=\"kw\">_</span>)) =&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Error: There is more than one player!\"</span>);\n        }\n    }\n}</code></pre></div>\n<h5 id=\"see-also-23\"><a href=\"#see-also-23\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_single_mut\" title=\"method bevy_ecs::system::Query::get_single_mut\"><code>get_single_mut</code></a> to get the mutable query item.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.single\" title=\"method bevy_ecs::system::Query::single\"><code>single</code></a> for the panicking version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.single_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1383-1385\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.single_mut\" class=\"fn\">single_mut</a>(&amp;mut self) -&gt; D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.WorldQuery.html#associatedtype.Item\" title=\"type bevy_ecs::query::WorldQuery::Item\">Item</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a single query item when there is exactly one entity matching the query.</p>\n<h5 id=\"panics-5\"><a href=\"#panics-5\">Panics</a></h5>\n<p>This method panics if the number of query item is <strong>not</strong> exactly one.</p>\n<h5 id=\"example-14\"><a href=\"#example-14\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>regenerate_player_health_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Health, With&lt;Player&gt;&gt;) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>health = query.single_mut();\n    health.<span class=\"number\">0 </span>+= <span class=\"number\">1</span>;\n}</code></pre></div>\n<h5 id=\"see-also-24\"><a href=\"#see-also-24\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_single_mut\" title=\"method bevy_ecs::system::Query::get_single_mut\"><code>get_single_mut</code></a> for the non-panicking version.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.single\" title=\"method bevy_ecs::system::Query::single\"><code>single</code></a> to get the read-only query item.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_single_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1413-1421\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_single_mut\" class=\"fn\">get_single_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.WorldQuery.html#associatedtype.Item\" title=\"type bevy_ecs::query::WorldQuery::Item\">Item</a>&lt;'_&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QuerySingleError.html\" title=\"enum bevy_ecs::query::QuerySingleError\">QuerySingleError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a single query item when there is exactly one entity matching the query.</p>\n<p>If the number of query items is not exactly one, a <a href=\"bevy_ecs/query/enum.QuerySingleError.html\" title=\"enum bevy_ecs::query::QuerySingleError\"><code>QuerySingleError</code></a> is returned instead.</p>\n<h5 id=\"example-15\"><a href=\"#example-15\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>regenerate_player_health_system(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;mut </span>Health, With&lt;Player&gt;&gt;) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>health = query.get_single_mut().expect(<span class=\"string\">\"Error: Could not find a single player.\"</span>);\n    health.<span class=\"number\">0 </span>+= <span class=\"number\">1</span>;\n}</code></pre></div>\n<h5 id=\"see-also-25\"><a href=\"#see-also-25\">See also</a></h5>\n<ul>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.get_single\" title=\"method bevy_ecs::system::Query::get_single\"><code>get_single</code></a> to get the read-only query item.</li>\n<li><a href=\"bevy_ecs/system/struct.Query.html#method.single_mut\" title=\"method bevy_ecs::system::Query::single_mut\"><code>single_mut</code></a> for the panicking version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1444-1453\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if there are no query items.</p>\n<h5 id=\"example-16\"><a href=\"#example-16\">Example</a></h5>\n<p>Here, the score is increased only if an entity with a <code>Player</code> component is present in the world:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>update_score_system(query: Query&lt;(), With&lt;Player&gt;&gt;, <span class=\"kw-2\">mut </span>score: ResMut&lt;Score&gt;) {\n    <span class=\"kw\">if </span>!query.is_empty() {\n        score.<span class=\"number\">0 </span>+= <span class=\"number\">1</span>;\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1478-1486\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the given <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a> matches the query.</p>\n<h5 id=\"example-17\"><a href=\"#example-17\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>targeting_system(in_range_query: Query&lt;<span class=\"kw-2\">&amp;</span>InRange&gt;, target: Res&lt;Target&gt;) {\n    <span class=\"kw\">if </span>in_range_query.contains(target.entity) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Bam!\"</span>)\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transmute_lens\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1548-1550\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.transmute_lens\" class=\"fn\">transmute_lens</a>&lt;NewD: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryData.html\" title=\"trait bevy_ecs::query::QueryData\">QueryData</a>&gt;(&amp;mut self) -&gt; <a class=\"struct\" href=\"bevy_ecs/system/struct.QueryLens.html\" title=\"struct bevy_ecs::system::QueryLens\">QueryLens</a>&lt;'_, NewD&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"bevy_ecs/system/struct.QueryLens.html\" title=\"struct bevy_ecs::system::QueryLens\"><code>QueryLens</code></a> that can be used to get a query with a more general fetch.</p>\n<p>For example, this can transform a <code>Query&lt;(&amp;A, &amp;mut B)&gt;</code> to a <code>Query&lt;&amp;B&gt;</code>.\nThis can be useful for passing the query to another function. Note that since\nfilter terms are dropped, non-archetypal filters like <a href=\"bevy_ecs/query/struct.Added.html\" title=\"struct bevy_ecs::query::Added\"><code>Added</code></a> and\n<a href=\"bevy_ecs/query/struct.Changed.html\" title=\"struct bevy_ecs::query::Changed\"><code>Changed</code></a> will not be respected. To maintain or change filter\nterms see <a href=\"bevy_ecs/system/struct.Query.html#method.transmute_lens_filtered\" title=\"method bevy_ecs::system::Query::transmute_lens_filtered\"><code>Self::transmute_lens_filtered</code></a></p>\n<h6 id=\"panics-6\"><a href=\"#panics-6\">Panics</a></h6>\n<p>This will panic if <code>NewD</code> is not a subset of the original fetch <code>Q</code></p>\n<h6 id=\"example-18\"><a href=\"#example-18\">Example</a></h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>reusable_function(lens: <span class=\"kw-2\">&amp;mut </span>QueryLens&lt;<span class=\"kw-2\">&amp;</span>A&gt;) {\n    <span class=\"macro\">assert_eq!</span>(lens.query().single().<span class=\"number\">0</span>, <span class=\"number\">10</span>);\n}\n\n<span class=\"comment\">// We can use the function in a system that takes the exact query.\n</span><span class=\"kw\">fn </span>system_1(<span class=\"kw-2\">mut </span>query: Query&lt;<span class=\"kw-2\">&amp;</span>A&gt;) {\n    reusable_function(<span class=\"kw-2\">&amp;mut </span>query.as_query_lens());\n}\n\n<span class=\"comment\">// We can also use it with a query that does not match exactly\n// by transmuting it.\n</span><span class=\"kw\">fn </span>system_2(<span class=\"kw-2\">mut </span>query: Query&lt;(<span class=\"kw-2\">&amp;mut </span>A, <span class=\"kw-2\">&amp;</span>B)&gt;) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lens = query.transmute_lens::&lt;<span class=\"kw-2\">&amp;</span>A&gt;();\n    reusable_function(<span class=\"kw-2\">&amp;mut </span>lens);\n}\n</code></pre></div>\n<h6 id=\"allowed-transmutes\"><a href=\"#allowed-transmutes\">Allowed Transmutes</a></h6>\n<p>Besides removing parameters from the query, you can also\nmake limited changes to the types of paramters.</p>\n<ul>\n<li>Can always add/remove <code>Entity</code></li>\n<li><code>Ref&lt;T&gt;</code> &lt;-&gt; <code>&amp;T</code></li>\n<li><code>&amp;mut T</code> -&gt; <code>&amp;T</code></li>\n<li><code>&amp;mut T</code> -&gt; <code>Ref&lt;T&gt;</code></li>\n<li><a href=\"bevy_ecs/world/struct.EntityMut.html\" title=\"struct bevy_ecs::world::EntityMut\"><code>EntityMut</code></a> -&gt; <a href=\"bevy_ecs/world/struct.EntityRef.html\" title=\"struct bevy_ecs::world::EntityRef\"><code>EntityRef</code></a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transmute_lens_filtered\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1558-1571\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.transmute_lens_filtered\" class=\"fn\">transmute_lens_filtered</a>&lt;NewD: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryData.html\" title=\"trait bevy_ecs::query::QueryData\">QueryData</a>, NewF: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\">QueryFilter</a>&gt;(\n    &amp;mut self\n) -&gt; <a class=\"struct\" href=\"bevy_ecs/system/struct.QueryLens.html\" title=\"struct bevy_ecs::system::QueryLens\">QueryLens</a>&lt;'_, NewD, NewF&gt;</h4></section></summary><div class=\"docblock\"><p>Equivalent to <a href=\"bevy_ecs/system/struct.Query.html#method.transmute_lens\" title=\"method bevy_ecs::system::Query::transmute_lens\"><code>Self::transmute_lens</code></a> but also includes a <a href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\"><code>QueryFilter</code></a> type.</p>\n<p>Note that the lens will iterate the same tables and archetypes as the original query. This means that\nadditional archetypal query terms like <a href=\"bevy_ecs/query/struct.With.html\" title=\"struct bevy_ecs::query::With\"><code>With</code></a> and <a href=\"bevy_ecs/query/struct.Without.html\" title=\"struct bevy_ecs::query::Without\"><code>Without</code></a>\nwill not necessarily be respected and non-archetypal terms like <a href=\"bevy_ecs/query/struct.Added.html\" title=\"struct bevy_ecs::query::Added\"><code>Added</code></a> and\n<a href=\"bevy_ecs/query/struct.Changed.html\" title=\"struct bevy_ecs::query::Changed\"><code>Changed</code></a> will only be respected if they are in the type signature.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_query_lens\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1574-1576\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.as_query_lens\" class=\"fn\">as_query_lens</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"bevy_ecs/system/struct.QueryLens.html\" title=\"struct bevy_ecs::system::QueryLens\">QueryLens</a>&lt;'_, D&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a <a href=\"bevy_ecs/system/struct.QueryLens.html\" title=\"struct bevy_ecs::system::QueryLens\"><code>QueryLens</code></a> with the same accesses as the existing query</p>\n</div></details></div></details>",0,"bevy_ecs::system::system_param::lifetimeless::SQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Query%3C'w,+'s,+D,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1597-1677\">source</a><a href=\"#impl-Query%3C'w,+'s,+D,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'w, 's, D: <a class=\"trait\" href=\"bevy_ecs/query/trait.ReadOnlyQueryData.html\" title=\"trait bevy_ecs::query::ReadOnlyQueryData\">ReadOnlyQueryData</a>, F: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\">QueryFilter</a>&gt; <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'w, 's, D, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1631-1642\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.get_inner\" class=\"fn\">get_inner</a>(\n    &amp;self,\n    entity: <a class=\"struct\" href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\">Entity</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"type\" href=\"bevy_ecs/query/type.ROQueryItem.html\" title=\"type bevy_ecs::query::ROQueryItem\">ROQueryItem</a>&lt;'w, D&gt;, <a class=\"enum\" href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\">QueryEntityError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the query item for the given <a href=\"bevy_ecs/entity/struct.Entity.html\" title=\"struct bevy_ecs::entity::Entity\"><code>Entity</code></a>, with the actual “inner” world lifetime.</p>\n<p>In case of a nonexisting entity or mismatched component, a <a href=\"bevy_ecs/query/enum.QueryEntityError.html\" title=\"enum bevy_ecs::query::QueryEntityError\"><code>QueryEntityError</code></a> is\nreturned instead.</p>\n<p>This can only return immutable data (mutable data will be cast to an immutable form).\nSee <a href=\"bevy_ecs/system/struct.Query.html#method.get_mut\" title=\"method bevy_ecs::system::Query::get_mut\"><code>get_mut</code></a> for queries that contain at least one mutable component.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<p>Here, <code>get</code> is used to retrieve the exact query item of the entity specified by the\n<code>SelectedCharacter</code> resource.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>print_selected_character_name_system(\n       query: Query&lt;<span class=\"kw-2\">&amp;</span>Character&gt;,\n       selection: Res&lt;SelectedCharacter&gt;\n)\n{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(selected_character) = query.get(selection.entity) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, selected_character.name);\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1668-1676\">source</a><h4 class=\"code-header\">pub fn <a href=\"bevy_ecs/system/struct.Query.html#tymethod.iter_inner\" class=\"fn\">iter_inner</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryIter.html\" title=\"struct bevy_ecs::query::QueryIter\">QueryIter</a>&lt;'w, 's, D::<a class=\"associatedtype\" href=\"bevy_ecs/query/trait.QueryData.html#associatedtype.ReadOnly\" title=\"type bevy_ecs::query::QueryData::ReadOnly\">ReadOnly</a>, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"QueryIter&lt;&#39;w, &#39;s, D::ReadOnly, F&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a> over the query items, with the actual “inner” world lifetime.</p>\n<p>This can only return immutable data (mutable data will be cast to an immutable form).\nSee <a href=\"bevy_ecs/system/struct.Query.html#method.iter_mut\" title=\"method bevy_ecs::system::Query::iter_mut\"><code>Self::iter_mut</code></a> for queries that contain at least one mutable component.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<p>Here, the <code>report_names_system</code> iterates over the <code>Player</code> component of every entity\nthat contains it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>report_names_system(query: Query&lt;<span class=\"kw-2\">&amp;</span>Player&gt;) {\n    <span class=\"kw\">for </span>player <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>query {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Say hello to {}!\"</span>, player.name);\n    }\n}</code></pre></div>\n</div></details></div></details>",0,"bevy_ecs::system::system_param::lifetimeless::SQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SystemParam-for-Query%3C'_,+'_,+D,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/system_param.rs.html#191-233\">source</a><a href=\"#impl-SystemParam-for-Query%3C'_,+'_,+D,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryData.html\" title=\"trait bevy_ecs::query::QueryData\">QueryData</a> + 'static, F: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\">QueryFilter</a> + 'static&gt; <a class=\"trait\" href=\"bevy_ecs/system/trait.SystemParam.html\" title=\"trait bevy_ecs::system::SystemParam\">SystemParam</a> for <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'_, '_, D, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.State\" class=\"associatedtype\">State</a> = <a class=\"struct\" href=\"bevy_ecs/query/struct.QueryState.html\" title=\"struct bevy_ecs::query::QueryState\">QueryState</a>&lt;D, F&gt;</h4></section></summary><div class='docblock'>Used to store data which persists across invocations of a system.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'w, 's&gt; = <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'w, 's, D, F&gt;</h4></section></summary><div class='docblock'>The item type returned when constructing this system param.\nThe value of this associated type should be <code>Self</code>, instantiated with new lifetimes. <a href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.Item\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_state\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/system_param.rs.html#195-212\">source</a><a href=\"#method.init_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_ecs/system/trait.SystemParam.html#tymethod.init_state\" class=\"fn\">init_state</a>(world: &amp;mut <a class=\"struct\" href=\"bevy_ecs/world/struct.World.html\" title=\"struct bevy_ecs::world::World\">World</a>, system_meta: &amp;mut <a class=\"struct\" href=\"bevy_ecs/system/struct.SystemMeta.html\" title=\"struct bevy_ecs::system::SystemMeta\">SystemMeta</a>) -&gt; Self::<a class=\"associatedtype\" href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy_ecs::system::SystemParam::State\">State</a></h4></section></summary><div class='docblock'>Registers any <a href=\"bevy_ecs/world/struct.World.html\" title=\"struct bevy_ecs::world::World\"><code>World</code></a> access used by this <a href=\"bevy_ecs/system/trait.SystemParam.html\" title=\"trait bevy_ecs::system::SystemParam\"><code>SystemParam</code></a>\nand creates a new instance of this param’s <a href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.State\"><code>State</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_archetype\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/system_param.rs.html#214-219\">source</a><a href=\"#method.new_archetype\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_ecs/system/trait.SystemParam.html#method.new_archetype\" class=\"fn\">new_archetype</a>(\n    state: &amp;mut Self::<a class=\"associatedtype\" href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy_ecs::system::SystemParam::State\">State</a>,\n    archetype: &amp;<a class=\"struct\" href=\"bevy_ecs/archetype/struct.Archetype.html\" title=\"struct bevy_ecs::archetype::Archetype\">Archetype</a>,\n    system_meta: &amp;mut <a class=\"struct\" href=\"bevy_ecs/system/struct.SystemMeta.html\" title=\"struct bevy_ecs::system::SystemMeta\">SystemMeta</a>\n)</h4></section></summary><div class='docblock'>For the specified <a href=\"bevy_ecs/archetype/struct.Archetype.html\" title=\"struct bevy_ecs::archetype::Archetype\"><code>Archetype</code></a>, registers the components accessed by this <a href=\"bevy_ecs/system/trait.SystemParam.html\" title=\"trait bevy_ecs::system::SystemParam\"><code>SystemParam</code></a> (if applicable).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_param\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/system_param.rs.html#222-232\">source</a><a href=\"#method.get_param\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"bevy_ecs/system/trait.SystemParam.html#tymethod.get_param\" class=\"fn\">get_param</a>&lt;'w, 's&gt;(\n    state: &amp;'s mut Self::<a class=\"associatedtype\" href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy_ecs::system::SystemParam::State\">State</a>,\n    system_meta: &amp;<a class=\"struct\" href=\"bevy_ecs/system/struct.SystemMeta.html\" title=\"struct bevy_ecs::system::SystemMeta\">SystemMeta</a>,\n    world: <a class=\"struct\" href=\"bevy_ecs/world/unsafe_world_cell/struct.UnsafeWorldCell.html\" title=\"struct bevy_ecs::world::unsafe_world_cell::UnsafeWorldCell\">UnsafeWorldCell</a>&lt;'w&gt;,\n    change_tick: <a class=\"struct\" href=\"bevy_ecs/component/struct.Tick.html\" title=\"struct bevy_ecs::component::Tick\">Tick</a>\n) -&gt; Self::<a class=\"associatedtype\" href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.Item\" title=\"type bevy_ecs::system::SystemParam::Item\">Item</a>&lt;'w, 's&gt;</h4></section></summary><div class='docblock'>Creates a parameter to be passed into a <a href=\"bevy_ecs/system/trait.SystemParamFunction.html\" title=\"trait bevy_ecs::system::SystemParamFunction\"><code>SystemParamFunction</code></a>. <a href=\"bevy_ecs/system/trait.SystemParam.html#tymethod.get_param\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/system_param.rs.html#155\">source</a><a href=\"#method.apply\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bevy_ecs/system/trait.SystemParam.html#method.apply\" class=\"fn\">apply</a>(state: &amp;mut Self::<a class=\"associatedtype\" href=\"bevy_ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy_ecs::system::SystemParam::State\">State</a>, system_meta: &amp;<a class=\"struct\" href=\"bevy_ecs/system/struct.SystemMeta.html\" title=\"struct bevy_ecs::system::SystemMeta\">SystemMeta</a>, world: &amp;mut <a class=\"struct\" href=\"bevy_ecs/world/struct.World.html\" title=\"struct bevy_ecs::world::World\">World</a>)</h4></section></summary><div class='docblock'>Applies any deferred mutations stored in this <a href=\"bevy_ecs/system/trait.SystemParam.html\" title=\"trait bevy_ecs::system::SystemParam\"><code>SystemParam</code></a>’s state.\nThis is used to apply <a href=\"bevy_ecs/system/struct.Commands.html\" title=\"struct bevy_ecs::system::Commands\"><code>Commands</code></a> during <a href=\"bevy_ecs/schedule/fn.apply_deferred.html\" title=\"fn bevy_ecs::schedule::apply_deferred\"><code>apply_deferred</code></a>.</div></details></div></details>","SystemParam","bevy_ecs::system::system_param::lifetimeless::SQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+QueryLens%3C'w,+Q,+F%3E%3E-for-Query%3C'w,+'s,+Q,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1703-1709\">source</a><a href=\"#impl-From%3C%26mut+QueryLens%3C'w,+Q,+F%3E%3E-for-Query%3C'w,+'s,+Q,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'w, 's, Q: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryData.html\" title=\"trait bevy_ecs::query::QueryData\">QueryData</a>, F: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\">QueryFilter</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'s mut <a class=\"struct\" href=\"bevy_ecs/system/struct.QueryLens.html\" title=\"struct bevy_ecs::system::QueryLens\">QueryLens</a>&lt;'w, Q, F&gt;&gt; for <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'w, 's, Q, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#1706-1708\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: &amp;'s mut <a class=\"struct\" href=\"bevy_ecs/system/struct.QueryLens.html\" title=\"struct bevy_ecs::system::QueryLens\">QueryLens</a>&lt;'w, Q, F&gt;) -&gt; <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'w, 's, Q, F&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'s mut QueryLens<'w, Q, F>>","bevy_ecs::system::system_param::lifetimeless::SQuery"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Query%3C'_,+'_,+D,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#342-352\">source</a><a href=\"#impl-Debug-for-Query%3C'_,+'_,+D,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryData.html\" title=\"trait bevy_ecs::query::QueryData\">QueryData</a>, F: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\">QueryFilter</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'_, '_, D, F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/query.rs.html#343-351\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","bevy_ecs::system::system_param::lifetimeless::SQuery"],["<section id=\"impl-ReadOnlySystemParam-for-Query%3C'w,+'s,+D,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/system_param.rs.html#184-187\">source</a><a href=\"#impl-ReadOnlySystemParam-for-Query%3C'w,+'s,+D,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'w, 's, D: <a class=\"trait\" href=\"bevy_ecs/query/trait.ReadOnlyQueryData.html\" title=\"trait bevy_ecs::query::ReadOnlyQueryData\">ReadOnlyQueryData</a> + 'static, F: <a class=\"trait\" href=\"bevy_ecs/query/trait.QueryFilter.html\" title=\"trait bevy_ecs::query::QueryFilter\">QueryFilter</a> + 'static&gt; <a class=\"trait\" href=\"bevy_ecs/system/trait.ReadOnlySystemParam.html\" title=\"trait bevy_ecs::system::ReadOnlySystemParam\">ReadOnlySystemParam</a> for <a class=\"struct\" href=\"bevy_ecs/system/struct.Query.html\" title=\"struct bevy_ecs::system::Query\">Query</a>&lt;'w, 's, D, F&gt;</h3></section>","ReadOnlySystemParam","bevy_ecs::system::system_param::lifetimeless::SQuery"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()