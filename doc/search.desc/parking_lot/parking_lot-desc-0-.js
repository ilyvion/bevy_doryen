searchState.loadedDescShard("parking_lot", 0, "This library provides implementations of <code>Mutex</code>, <code>RwLock</code>, …\nAn RAII mutex guard returned by the <code>Arc</code> locking operations …\nAn RAII mutex guard returned by the <code>Arc</code> locking operations …\nAn RAII rwlock guard returned by the <code>Arc</code> locking …\nAn RAII rwlock guard returned by the <code>Arc</code> locking …\nAn RAII rwlock guard returned by the <code>Arc</code> locking …\nA Condition Variable\nA closure has completed successfully.\nA mutual exclusive primitive that is always fair, useful …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread is currently executing a closure.\nAn RAII mutex guard returned by <code>FairMutexGuard::map</code>, which …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA closure has not been executed yet\nA synchronization primitive which can be used to run a …\nCurrent state of a <code>Once</code>.\nA closure was executed but panicked.\nRaw fair mutex type backed by the parking lot.\nRaw mutex type backed by the parking lot.\nRaw reader-writer lock type backed by the parking lot.\nImplementation of the <code>GetThreadId</code> trait for …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nA type indicating whether a timed wait on a condition …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields the <code>RwLock</code> to a waiting thread if there …\nTemporarily yields the <code>RwLock</code> to a waiting thread if there …\nTemporarily yields the <code>RwLock</code> to a waiting thread if there …\nPerforms an initialization routine once and only once. The …\nPerforms the same function as <code>call_once</code> except ignores …\nCreates a new fair mutex in an unlocked state ready for …\nCreates a new mutex in an unlocked state ready for use.\nCreates a new reentrant mutex in an unlocked state ready …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nReturns whether the associated <code>Once</code> has successfully …\nAtomically downgrades a write lock into a read lock …\nAtomically downgrades an upgradable read lock lock into a …\nAtomically downgrades a write lock into an upgradable read …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnlocks the mutex and returns the <code>Arc</code> that was held by the …\nReturns a reference to the <code>Mutex</code> this is guarding, …\nCreates a new condition variable which is ready to be …\nCreates a new <code>Once</code> value.\nWakes up all blocked threads on this condvar.\nWakes up one blocked thread on this condvar.\nReturns whether the associated <code>Once</code> has been poisoned.\nReturns a reference to the <code>ReentrantMutex</code> this object is …\nReturns a reference to the rwlock, contained in its <code>Arc</code>.\nReturns a reference to the rwlock, contained in its <code>Arc</code>.\nReturns a reference to the rwlock, contained in its …\nReturns the current state of this <code>Once</code>.\nReturns whether the wait was known to have timed out.\nTries to atomically upgrade an upgradable read lock into …\nTries to atomically upgrade an upgradable read lock into …\nTries to atomically upgrade an upgradable read lock into …\nFirst, tries to atomically upgrade an upgradable read lock …\nTries to atomically upgrade an upgradable read lock into …\nTries to atomically upgrade an upgradable read lock into …\nUnlocks the mutex using a fair unlock protocol.\nUnlocks the mutex using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nAtomically upgrades an upgradable read lock lock into an …\nBlocks the current thread until this condition variable …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nBlocks the current thread until this condition variable …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nFirst, atomically upgrades an upgradable read lock lock …")