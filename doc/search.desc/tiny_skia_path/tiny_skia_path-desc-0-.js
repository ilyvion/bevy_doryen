searchState.loadedDescShard("tiny_skia_path", 0, "A tiny-skia Bezier path implementation.\nJust a random, valid number.\nConnects outside edges.\nNo stroke extension.\nA predefined 1 value.\nA predefined 0 value.\nA float that is known to be finite.\nA predefined 0.5 value.\nAn integer rectangle.\nAn integer size.\nDraws at the beginning and end of an open path contour.\nSpecifies how corners are drawn when a shape is stroked.\nExtends to miter limit.\nA float that is known to be &gt; 0.\nAn immutable <code>f32</code> in a 0..=1 range.\nAn immutable <code>f32</code> that is larger than 0 but less then 1.\nA NormalizedF32 value initialized with one.\nA Bezier path.\nA path builder.\nA path segment.\nA path segments iterator.\nA path stroker.\nA path verb.\nA point.\nA rectangle defined by left, top, right and bottom edges.\nAdds circle.\nAdds circle.\nCustom float to integer conversion routines.\nCustom float to integer rounding routines.\nFloat number extension methods.\nA screen <code>IntRect</code>.\nAdds square.\nStroke properties.\nA stroke dashing properties.\nAn affine transformation matrix.\nA NormalizedF32 value initialized with zero.\nReturns an absolute value.\nReturns rect’s bottom edge.\nReturns rect’s bottom edge.\nReturns the bottom edge.\nReturns the bounds of the path’s points.\nClears the path and returns a <code>PathBuilder</code> that will reuse …\nReset the builder.\nCloses the current contour.\nComputes a resolution scale.\nChecks that the rect is completely includes <code>other</code> Rect.\nChecks that the rect is completely includes <code>other</code> Rect.\nReturns the cross product of vector and vec.\nAdds a cubic curve from the last point to <code>x</code>, <code>y</code>.\nReturns the current verb.\nConverts the current path into a dashed one.\nA stroke dashing properties.\nReturns the Euclidean distance from origin.\nReturns the dot product of two points.\nA pair of f32 numbers.\nFinishes the builder and returns a <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Path</code> from a circle.\nCreates a new <code>Point</code> from <code>f32x2</code>.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates a new <code>Path</code> from an oval.\nCreates a Rect from Point array.\nCreates a new <code>Path</code> from <code>Rect</code>.\nCreates a new rotating <code>Transform</code>.\nCreates a new rotating <code>Transform</code> at the specified position.\nCreates a new <code>Transform</code>.\nCreates a new scaling <code>Transform</code>.\nCreates a new skewing <code>Transform</code>.\nCreates a new translating <code>Transform</code>.\nCreates a <code>NormalizedF32</code> from <code>u8</code>.\nCreates a new <code>IntSize</code> from width and height.\nCreates a new <code>Point</code>.\nCreates a new <code>IntRect</code>.\nCreates a new <code>ScreenIntRect</code>.\nCreates new <code>Rect</code>.\nCreates a new <code>ScreenIntRect</code>.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a <code>FiniteF32</code>.\nChecks that transform contains a scale part.\nChecks that transform contains a skew part.\nChecks that transform contains a translate part.\nReturns rect’s height.\nReturns rect’s height.\nReturns rect’s height.\nReturns height.\nCreates an identity transform.\nInsets the rectangle.\nInsets the rectangle by the specified offset.\nReturns an intersection of two rectangles.\nReturns an intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an inverted transform.\nChecks if path is empty.\nChecks if the builder has any segments added.\nChecks that transform is finite.\nReturns true if both x and y are measurable values.\nChecks that transform is identity.\nChecks that transform is scale-only.\nChecks that transform contains only scale and translate.\nChecks that transform is skew-only.\nChecks that transform is translate-only.\nReturns true if x and y are both zero.\nReturns the last point if any.\nReturns rect’s left edge.\nReturns rect’s left edge.\nReturns the left edge.\nReturns the number of segments in the path.\nReturns the current number of segments in the builder.\nReturns the Euclidean distance from origin.\nA stroke line cap.\nA stroke line join.\nAdds a line from the last point.\nOutsets the rectangle.\nTransforms a slice of points using the current transform.\nReturns a maximum value.\nReturns a maximum of both values.\nReturns a minimum value.\nThe limit at which a sharp corner is drawn beveled.\nAdds beginning of a contour.\nCreates a new pair.\nCreates a finite f32 number.\nCreates a <code>NormalizedF32</code> if the given value is in a 0..=1 …\nCreates a <code>NormalizedF32Exclusive</code>.\nCreates a new <code>NonZeroPositiveF32</code> if the given value is …\nCreates a new builder.\nCreates a new PathStroker.\nCreates a new stroke dashing object.\nCreates a <code>NormalizedValue</code> clamping the given value to a …\nCreates a <code>NormalizedF32Exclusive</code> clamping the given value.\nReturns the next verb.\nScales (fX, fY) so that length() returns one, while …\nOutsets the rectangle by the specified offset.\nA collection of functions to work with Bezier paths.\nReturns an internal vector of points.\nPost-concats the current transform.\nPost-scales the current transform.\nPost-translates the current transform.\nPre-concats the current transform.\nPre-scales the current transform.\nPre-translates the current transform.\nAdds a circle contour.\nAdds an oval contour bounded by the provided rectangle.\nAdds a rectangle contour.\nAdds a quad curve from the last point to <code>x</code>, <code>y</code>.\nReturns rect’s right edge.\nReturns rect’s right edge.\nReturns the right edge.\nConverts into an <code>IntRect</code> by adding 0.5 and discarding the …\nConverts into an <code>IntRect</code> rounding outwards.\nReturn the closest integer for the given float.\nScales Point in-place by scale.\nReturns an iterator over path’s segments.\nSets the auto closing mode. Off by default.\nScales vector so that distanceToOrigin() returns length, …\nSets vector to (x, y) scaled to length, if possible.\nSets vector to (x, y) scaled so length() returns one, and …\nReturns rect’s size.\nReturns rect’s size.\nCreates a new pair from a single value.\nReturns a stoked path.\nStokes the path.\nConverts a <code>Point</code> into a <code>f32x2</code>.\nConverts into a <code>IntRect</code>.\nConverts the current size into a <code>IntRect</code> at a provided …\nReturns the value as a <code>FiniteF32</code>.\nConverts into <code>Rect</code>.\nConverts into a <code>Rect</code>.\nConverts into <code>ScreenIntRect</code>.\nConverts the current size into a <code>IntRect</code> at a provided …\nReturns rect’s top edge.\nReturns rect’s top edge.\nReturns the top edge.\nReturns a transformed in-place path.\nReturns an internal vector of verbs.\nReturns rect’s width.\nReturns rect’s width.\nReturns rect’s width.\nReturns width.\nA stroke thickness.\nReturns rect’s width.\nCreates a new builder with a specified capacity.\nReturns the first value.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns the second value.\nReturns rect’s Y position.\nReturns rect’s Y position.\nReturns rect’s Y position.\nCreates a point at 0x0 position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")