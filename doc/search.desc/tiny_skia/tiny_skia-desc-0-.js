searchState.loadedDescShard("tiny_skia", 0, "<code>tiny-skia</code> is a tiny Skia subset ported to Rust.\nRepresents fully opaque Alpha value.\nRepresents fully transparent Alpha value.\nRepresents fully opaque AlphaU8 value.\nRepresents fully transparent AlphaU8 value.\nA black color.\nNumber of bytes per pixel.\nConnects outside edges.\nBicubic. High quality, but slow.\nBilinear.\nA blending mode.\nNo stroke extension.\nReplaces destination with zero: fully transparent.\nA clipping mask.\nAn RGBA color value, holding four floating point …\nHue and saturation of source with luminosity of …\nDarken destination to reflect source.\nBrighten destination to reflect source.\nA 32-bit RGBA color value.\nDarker of source and destination.\nPreserves destination.\nDestination inside source blended with source.\nDestination trimmed by source.\nDestination trimmed outside source.\nDestination over source.\nSubtract darker from lighter with higher contrast.\nSpecifies that “inside” is computed by an odd number …\nSubtract darker from lighter with lower contrast.\nA path filling rule.\nControls how much filtering to be done when transforming …\nA gradient point.\nMultiply or screen, depending on source.\nHue of source with saturation and luminosity of …\nAn integer rectangle.\nLighter of source and destination.\nDraws at the beginning and end of an open path contour.\nSpecifies how corners are drawn when a shape is stroked.\nA linear gradient shader.\nA linear gradient shader.\nLuminosity of source with hue and saturation of …\nExtends to miter limit.\nProduct of premultiplied colors; darkens destination.\nMultiply source with destination, darkening image.\nNearest-neighbor. Low quality, but fastest.\nMultiply or screen, depending on destination.\nReplicate the edge color if the shader draws outside of its\nControls how a shape should be painted.\nA Bezier path.\nA path builder.\nA path segment.\nA path segments iterator.\nA pattern shader.\nA pattern shader.\nA container that owns premultiplied RGBA pixels.\nA container that references mutable premultiplied RGBA …\nControls how a pixmap should be blended.\nA container that references premultiplied RGBA pixels.\nSum of colors.\nA point.\nA premultiplied RGBA color value, holding four floating …\nA 32-bit premultiplied RGBA color value.\nA radial gradient shader.\nA radial gradient shader.\nA rectangle defined by left, top, right and bottom edges.\nRepeat the shader’s image horizontally and vertically, …\nRepeat the shader’s image horizontally and vertically.\nAdds circle.\nAdds circle.\nSaturation of source with hue and luminosity of …\nMultiply inverse of pixels, inverting result; brightens …\nA shader specifies the source color(s) for what is being …\nLighten or darken, depending on source.\nA solid color shader.\nReplaces destination.\nSource inside destination blended with destination.\nSource trimmed inside destination.\nSource trimmed outside destination.\nSource over destination.\nA shader spreading mode.\nAdds square.\nStroke properties.\nA stroke dashing properties.\nA transparent color.\nA transparent color.\nAn affine transformation matrix.\nA white color.\nSpecifies that “inside” is computed by a non-zero sum …\nEach of source and destination trimmed outside the other.\nReturns color’s alpha component.\nReturns color’s alpha component.\nReturns color’s alpha component.\nReturns color’s alpha component.\nEnables anti-aliased painting.\nShifts color’s opacity.\nShifts shader’s opacity.\nReturns a container that references Pixmap’s data.\nReturns a container that references Pixmap’s data.\nReturns a container that references Pixmap’s data.\nPaint blending mode.\nPixmap blending mode.\nReturns color’s blue component.\nReturns color’s blue component.\nReturns color’s blue component.\nReturns color’s blue component.\nReturns rect’s bottom edge.\nReturns the bottom edge.\nReturns the bounds of the path’s points.\nClears the path and returns a <code>PathBuilder</code> that will reuse …\nReset the builder.\nClears the mask.\nReturns a copy of the pixmap that intersects the <code>rect</code>.\nReturns a copy of the pixmap that intersects the <code>rect</code>.\nCloses the current contour.\nChecks that the rect is completely includes <code>other</code> Rect.\nReturns the cross product of vector and vec.\nAdds a cubic curve from the last point to <code>x</code>, <code>y</code>.\nReturns the current verb.\nConverts the current path into a dashed one.\nA stroke dashing properties.\nReturns the internal data.\nReturns the internal data.\nReturns the mutable internal data.\nReturns the mutable internal data.\nDecodes a PNG data into a <code>Pixmap</code>.\nReturns a demultiplied color.\nReturns a demultiplied color.\nReturns the Euclidean distance from origin.\nReturns the dot product of two points.\nDraws a <code>Pixmap</code> on top of the current <code>Pixmap</code>.\nDraws a <code>Pixmap</code> on top of the current <code>Pixmap</code>.\nEncodes pixmap into a PNG data.\nEncodes pixmap into a PNG data.\nFills the entire pixmap with a specified color.\nFills the entire pixmap with a specified color.\nDraws a filled path onto the pixmap.\nDraws a filled path onto the pixmap.\nDraws a filled rectangle onto the pixmap.\nDraws a filled rectangle onto the pixmap.\nFinishes the builder and returns a <code>Path</code>.\nForces the high quality/precision rendering pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PixmapRef</code> from bytes.\nCreates a new <code>PixmapMut</code> from bytes.\nCreates a new <code>Path</code> from a circle.\nCreates a new <code>Point</code> from <code>f32x2</code>.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nCreates a new <code>Path</code> from an oval.\nCreates a Rect from Point array.\nCreates a new <code>Path</code> from <code>Rect</code>.\nCreates a new color.\nCreates a new premultiplied color.\nCreates a new color from 4 components.\nCreates a new color from 4 components.\nCreates a new rotating <code>Transform</code>.\nCreates a new rotating <code>Transform</code> at the specified position.\nCreates a new <code>Transform</code>.\nCreates a new scaling <code>Transform</code>.\nCreates a new skewing <code>Transform</code>.\nCreates a new translating <code>Transform</code>.\nCreates a new <code>Point</code>.\nCreates a new <code>IntRect</code>.\nCreates new <code>Rect</code>.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns color’s green component.\nReturns color’s green component.\nReturns color’s green component.\nReturns color’s green component.\nChecks that transform contains a scale part.\nChecks that transform contains a skew part.\nChecks that transform contains a translate part.\nReturns rect’s height.\nReturns rect’s height.\nReturns pixmap’s height.\nReturns pixmap’s height.\nReturns pixmap’s height.\nCreates an identity transform.\nInsets the rectangle.\nInsets the rectangle by the specified offset.\nReturns an intersection of two rectangles.\nReturns an intersection of two rectangles.\nIntersects the provided path with the current clipping …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an inverted transform.\nChecks if path is empty.\nChecks if the builder has any segments added.\nChecks that mask is empty.\nChecks that transform is finite.\nReturns true if both x and y are measurable values.\nChecks that transform is identity.\nCheck that color is opaque.\nCheck that color is opaque.\nCheck that color is opaque.\nChecks if the shader is guaranteed to produce only opaque …\nChecks that transform is scale-only.\nChecks that transform contains only scale and translate.\nChecks that transform is skew-only.\nChecks that the paint source is a solid color.\nChecks that transform is translate-only.\nReturns true if x and y are both zero.\nReturns the last point if any.\nReturns rect’s left edge.\nReturns the left edge.\nReturns the number of segments in the path.\nReturns the current number of segments in the builder.\nReturns the Euclidean distance from origin.\nA stroke line cap.\nA stroke line join.\nAdds a line from the last point.\nLoads a PNG file into a <code>Pixmap</code>.\nOutsets the rectangle.\nTransforms a slice of points using the current transform.\nThe limit at which a sharp corner is drawn beveled.\nAdds beginning of a contour.\nCreates a new builder.\nCreates a new stroke dashing object.\nCreates a new, empty mask.\nAllocates a new pixmap.\nCreates a new gradient point.\nCreates a new linear gradient shader.\nCreates a new radial gradient shader.\nCreates a new pattern shader.\nReturns the next verb.\nScales (fX, fY) so that length() returns one, while …\nPixmap opacity.\nOutsets the rectangle by the specified offset.\nReturns a pixel color.\nReturns a pixel color.\nReturns a slice of pixels.\nReturns a slice of pixels.\nReturns a mutable slice of pixels.\nReturns a mutable slice of pixels.\nReturns an internal vector of points.\nPost-concats the current transform.\nPost-scales the current transform.\nPost-translates the current transform.\nPre-concats the current transform.\nPre-scales the current transform.\nPre-translates the current transform.\nConverts into a premultiplied color.\nConverts into a premultiplied color.\nAdds a circle contour.\nAdds an oval contour bounded by the provided rectangle.\nAdds a rectangle contour.\nAdds a quad curve from the last point to <code>x</code>, <code>y</code>.\nSpecifies how much filtering to be done when transforming …\nReturns color’s red component.\nReturns color’s red component.\nReturns color’s red component.\nReturns color’s red component.\nReturns rect’s right edge.\nReturns the right edge.\nConverts into an <code>IntRect</code> by adding 0.5 and discarding the …\nConverts into an <code>IntRect</code> rounding outwards.\nSaves pixmap as a PNG file.\nSaves pixmap as a PNG file.\nScales Point in-place by scale.\nReturns an iterator over path’s segments.\nSets the alpha component value.\nSets the auto closing mode. Off by default.\nSets the blue component value.\nSets a paint source to a solid color.\nSets a paint source to a solid color.\nSets the green component value.\nScales vector so that distanceToOrigin() returns length, …\nSets vector to (x, y) scaled to length, if possible.\nSets vector to (x, y) scaled so length() returns one, and …\nSets the current clipping path.\nSets the red component value.\nA paint shader.\nReturns rect’s size.\nReturns a stoked path.\nStrokes a path.\nStrokes a path.\nConsumes the internal data.\nConverts into <code>ColorU8</code>.\nConverts into <code>PremultipliedColorU8</code>.\nConverts a <code>Point</code> into a <code>f32x2</code>.\nCreates a new <code>Pixmap</code> from the current data.\nCreates a new <code>Pixmap</code> from the current data.\nConverts into <code>Rect</code>.\nConverts into <code>ScreenIntRect</code>.\nReturns rect’s top edge.\nReturns the top edge.\nReturns a transformed in-place path.\nTransforms the shader.\nReturns an internal vector of verbs.\nReturns rect’s width.\nReturns rect’s width.\nReturns pixmap’s width.\nReturns pixmap’s width.\nReturns pixmap’s width.\nA stroke thickness.\nCreates a new builder with a specified capacity.\nReturns rect’s X position.\nReturns rect’s X position.\nReturns rect’s Y position.\nReturns rect’s Y position.\nCreates a point at 0x0 position.")