searchState.loadedDescShard("smithay_client_toolkit", 0, "Smithay Client Toolkit\nAn error representing the fact that a required global was …\nAn adapter to insert a Wayland <code>EventQueue</code> into a calloop …\nHelpers to handle data device related actions\nDeclare a batteries-included SCTK environment\nEnvironment management utilities\nMacro for declaring an environment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of outputs the surface is displayed on.\nReturns the current suggested scale factor of a surface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap an <code>EventQueue</code> as a <code>WaylandSource</code>.\nInitialize a batteries-included SCTK environment\nTypes and functions related to graphical outputs\nHelpers to handle primary selection related actions.\nAccess the underlying event queue\nInsert this source into given event loop with an adapter …\nRe-exports of some crates, for convenience\nTypes for automatically handling seats\nUnified shell surface handling\nVarious small utilities helping you to write clients\nWindow abstraction\nNotifies of the current selected action for the drag’n’…\nask action\nThe action using this data source was cancelled.\ncopy action\nHandle to support data exchange on a given seat\nA handler for data devices\nAn interface trait to forward the data device handler …\nA data offer for receiving data though copy/paste or drag …\nA data source for sending data though copy/paste or drag …\nPossible events a data source needs to react to\ndrag and drop actions\nPossible events generated during a drag’n’drop session\nThe drag’n’drop was dropped on your surface\nThe user performed the “drop” during a drag’n’drop\nA new drag’n’drop entered your surfaces\nThe action is finished, this data source will not be used …\nThe drag’n’drop offer left your surface\nThe drag’n’drop offer moved on the surface\nmove action\nno action\nA file descriptor that can only be read from\nWrite the offered data for selected mime type\nTarget mime type\nA file descriptor that can only be written to\nAccept a mime type for receiving data through this offer\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nNotify that you are finished with this offer, and will no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGet the list of available actions for this offer\nGet the currently set final action for this offer\nInitialize a data device handler\nCreate the DataDevice helper for this seat.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nCreate a new data source\nReturns the complement of this set of flags.\nRequest to receive the data of a given mime type\nReceive data to the write end of a raw file descriptor. If …\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nNotify the send and compositor of the dnd actions you …\nSet the global drag’n’drop callback\nProvide a data source as the new content for the selection\nStart a drag’n’drop offer\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAccess the data device associated with a seat\nAccess the <code>DataOffer</code> currently associated with current DnD\nAccess the list of mime types proposed by this offer\nAccess the <code>DataOffer</code> currently associated with the …\nThe action chosen by the target\nRequested mime type\nThe type accepted by the target\nPipe to write into\nThe associated data offer\nThe associated data offer\nThe associated data offer\nA serial associated with the entry of this dnd\nThe entered surface\nThe time of this motion\nhorizontal location on the surface\nnew horizontal location\nvertical location on the surface\nnew vertical location\nA Wayland Environment\nRequired trait for implementing a handler for “single” …\nInternal trait for the <code>Environment</code> logic\nRequired trait for implementing a handler for “multi” …\nA minimalist global handler for “single” globals\nCreate an automatic memory pool\nCreate a double memory pool\nCreate a new shell surface for this surface\nCreate a simple memory pool\nCreate a DPI-aware surface\nCreate a DPI-aware surface with callbacks\nCreate a new window wrapping given surface\nThis global was created and signaled in the registry with …\nA new instance of this global was created with given id …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess the global if it was signaled\nAccess all the currently existing instances\nAccess all instances of a “multi” global\nShorthand method to retrieve the list of outputs\nShorthand method to retrieve the list of seats\nAccess a “single” global\nGet the best available primary selection device manager …\nGet the best available shell protocol\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInsert a new listener for outputs\nInsert a new listener for seats\nThe underlying <code>GlobalManager</code>, if you need to do manual …\nCreate new <code>Environment</code>\nCreate a new handler\nCreate a new data source\nCreate new pending <code>Environment</code>\nCreate a new primary selection source.\nProcess a <code>GlobalEvent</code>\nThe instance with given id was removed\nAccess a “single” global or panic\nSet the data device callback\nAccess the list of SHM formats supported by the compositor\nAccess the data device associated with a seat\nAccess the inner environment\nAccess the primary selection associated with a seat.\n180 degree flip around a vertical axis\nflip and rotate 180 degrees counter-clockwise\nflip and rotate 270 degrees counter-clockwise\nflip and rotate 90 degrees counter-clockwise\nhorizontal BGR\nhorizontal RGB\nA possible mode for an output\nno geometry\nno transform\nA handler for <code>wl_output</code>\nTrait representing the OutputHandler functions\nCompiled information about an output\nA handle to an output listener callback\nA handle to an output status callback\nsubpixel geometry information\ntransform from framebuffer to output\nunknown geometry\nvertical BGR\nvertical RGB\nA handler for <code>zxdg_output_manager_v1</code>\n180 degrees counter-clockwise\n270 degrees counter-clockwise\n90 degrees counter-clockwise\nAdd a listener to this output\nThe description of this output as advertised by the server\nNumber of pixels of this mode in format <code>(width, height)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of this output as a global\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is the current mode for this output\nWhether this is the preferred mode for this output\nInsert a listener for output creation and removal events\nLocation of the top-left corner of this output in …\nThe make name of this output as advertised by the server\nThe model name of this output as advertised by the server\nPossible modes for an output\nThe name of this output as advertised by the server\nCreate a new instance of this handler\nCreate a new instance of this handler bound to the given …\nHelper function to create a bound pair of OutputHandler …\nHas this output been unadvertized by the registry\nPhysical dimensions of this output, in unspecified units\nRefresh rate for this mode, in mHz\nThe scaling factor of this output\nThe subpixel layout for this output\nThe current transformation applied to this output\nAccess the info associated with this output\nThe action using the primary selection source was …\nThe old <code>gtk_primary_selection</code> protocol, which is still …\nHandle to support primary selection on a given seat.\nPossible supported primary selection protocols\nA handler for primary selection.\nAn interface trait to forward the primary selection device …\nA primary selection offer for receiving data through …\nA primary selection source for sending data through …\nPossible events a primary selection source needs to react …\nWrite the offered data for selected mime type.\nThe current standard <code>primary_selection</code> protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the best available primary selection device manager …\nGet the best available primary selection device manager …\nInitialize a primary selection handler.\nCreate the <code>PrimarySelectionDevice</code> helper for this seat.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new primary selection source.\nRequest to receive the data of a given mime type.\nProvide a primary selection source as the new content for …\nAccess the list of mime types proposed by this offer.\nAccess the primary selection associated with a seat.\nAccess the primary selection associated with a seat.\nAccess the <code>PrimarySelectionOffer</code> currently associated with …\nRequested mime type.\nPipe to write into.\nThe metadata associated with a seat\nA simple handler for seats\nTrait representing the SeatHandler functions\nA handle to an seat listener callback\nGet the copy of the data associated with this seat\nWhether this seat has been removed from the registry\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this seat has a keyboard available\nWhether this seat has a pointer available\nWhether this seat has a touchscreen available\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtilities for keymap interpretation of keyboard input\nInsert a listener for seat events\nThe name of this seat\nCreate a new SeatHandler\nUtilities to work with pointers and their icons\nAccess the data associated with this seat\nProvided RMLVO specified a keymap that would not be loaded\nThe keyboard focus has entered a surface\nAn error that occurred while trying to initialize a mapped …\nEvents received from a mapped keyboard\nkeys will be repeated at a set rate and delay\nA key event occurred\nphysical key state\nThe keyboard focus has left a surface\nThe key modifiers have changed state\nRepresents the current state of the keyboard modifiers\nThe provided seat does not have the keyboard capability\nkey is pressed\nThe RMLVO description of a keymap\nkey is not pressed\nA key repetition event\nPossible kinds of key repetition\nAn event source managing the key repetition of a keyboard\nkeys will be repeated at a rate and delay set by the …\nFailed to init timers for repetition\nlibxkbcommon is not available\nThe “alt” key\nThe “Caps lock” key\nThe “control” key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA comma separated list of layouts (languages) to include …\nThe “logo” key\nImplement a keyboard for keymap translation with key …\nImplement a keyboard for keymap translation with key …\nThe keyboard model by which to interpret keycodes and LEDs\nThe “Num lock” key\nA comma separated list of options, through which the user …\nThe rules file to use\nThe “shift” key\nA comma separated list of variants, one per layout, which …\ninterpreted symbol of the key\ninterpreted symbol of the key\ninterpreted symbols of the currently pressed keys\ncurrent state of the modifiers\nraw value of the key\nraw value of the key\nraw values of the currently pressed keys\nserial number of the event\nserial number of the event\nserial number of the event\nnew state of the key\nsurface that was entered\nsurface that was left\ntime at which the keypress occurred\ntime at which the repetition occured\nutf8 interpretation of the entered text\nutf8 interpretation of the entered text\ndelay (in milliseconds) between a key press and the start …\nThe number of repetitions per second that should occur.\nUse this specific theme with given base size\nUse the system provided theme\nWrapper managing a system theme for pointer images\nThe specification of a cursor theme to be used by the …\nWrapper of a themed pointer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad a system pointer theme\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the cursor to the given cursor name\nWrap a pointer to theme it\nInitialize a new pointer as a ThemedPointer with an …\nName of the cursor theme to use\nBase size of the cursor images\nthe surface is now activated\nA close request has been received\nThe state of your window has been changed\nPossible events generated by a shell surface that you need …\nthe surface is fullscreen\nthe surface is maximized\nthe surface is being resized\nPossible supported shell protocols\nA handler for shells\nA helper trait for delegating shell handling\nTrait abstracting over shell surface protocols\ntypes of state on the surface\nthe surface is tiled\nthe surface is tiled\nthe surface is tiled\nthe surface is tiled\nThe legacy <code>wl_shell</code>.\nThe current standard <code>xdg_shell</code> protocol.\nA previous iteration of the <code>xdg_shell</code> protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the best available shell\nRetrive the <code>XdgToplevel</code> proxy if the underlying shell …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the shell surface\nCheck if the shell in use needs you to wait for a <code>configure</code>…\nCreate a new handler\nResizes the shell surface\nSet the app id of the shell surface\nMake fullscreen\nSet geometry\nSet maximum surface size\nMaximize surface\nSet minimum surface size\nMinimize surface\nSet the title of the shell surface\nShow window menu.\nUnset fullscreen\nUnmaximize surface\nOptional new size for your shell surface\nNew combination of states of your window\n16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little …\n[63:0] A:B:G:R 16:16:16:16 little endian\n[63:0] A:B:G:R 16:16:16:16 little endian\n32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian\n16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian\n32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian\n16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little …\n[63:0] A:R:G:B 16:16:16:16 little endian\n[63:0] A:R:G:B 16:16:16:16 little endian\n32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian\n16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian\n32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian\nA wrapper handling an SHM memory pool backed by a shared …\n[63:0] A:x:B:x:G:x:R:x 10:6:10:6:10:6:10:6 little endian\npacked AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little …\n8-bit BGR format, [7:0] B:G:R 2:3:3\n16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian\n24-bit BGR format, [23:0] B:G:R little endian\n32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian\n16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian\n16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little …\n32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian\n32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian\n16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian\n16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little …\n32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian\n8-bit color index format, [7:0] C\nA Double memory pool, for convenient double-buffering\npixel formats\n[31:0] G:R 16:16 little endian\n[15:0] G:R 8:8 little endian\nA wrapper handling an SHM memory pool backed by a shared …\n2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane\n2x2 subsampled Cr:Cb plane\n2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane\n2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane\nnon-subsampled Cr:Cb plane\nnon-subsampled Cb:Cr plane\n2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane\n2x2 subsampled Cr:Cb plane 10 bits per channel\n2x2 subsampled Cr:Cb plane 12 bits per channel\n2x2 subsampled Cr:Cb plane 16 bits per channel\n2x1 subsampled Cr:Cb plane, 10 bit per channel\n[15:0] R little endian\n[7:0] R\n[31:0] R:G 16:16 little endian\n[15:0] R:G 8:8 little endian\n8-bit RGB format, [7:0] R:G:B 3:3:2\n16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian\n24-bit RGB format, [23:0] R:G:B little endian\n32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian\n16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian\n16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little …\n32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian\n32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian\n16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian\n16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little …\n32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian\nA handler for the <code>wl_shm</code> global\nAn interface trait to forward the shm handler capability\npacked YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little …\nY followed by U then V, 10:10:10. Non-linear modifier only\n[23:0] Cr:Cb:Y 8:8:8 little endian\npacked YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little …\n[63:0] X3:X2:Y3:0:Cr0:0:Y2:0:X1:X0:Y1:0:Cb0:0:Y0:0 …\n[63:0] X3:X2:Y3:Cr0:Y2:X1:X0:Y1:Cb0:Y0 …\n16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little …\n[63:0] x:B:G:R 16:16:16:16 little endian\n[63:0] x:B:G:R 16:16:16:16 little endian\n32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian\n16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian\n32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian\n16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian\n[63:0] x:R:G:B 16:16:16:16 little endian\n[63:0] x:R:G:B 16:16:16:16 little endian\n32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian\n16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian\n32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian\n[63:0] X:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian\n[63:0] X:Cr:Y:Cb 16:16:16:16 little endian\n[31:0] X:Cr:Y:Cb 2:10:10:10 little endian\n[31:0] X:Y:Cb:Cr 8:8:8:8 little endian\n[63:0] A3:A2:Y3:0:Cr0:0:Y2:0:A1:A0:Y1:0:Cb0:0:Y0:0 …\n[63:0] A3:A2:Y3:Cr0:Y2:A1:A0:Y1:Cb0:Y0 …\n[63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 10:6:10:6:10:6:10:6 little …\n[63:0] Cr0:0:Y1:0:Cb0:0:Y0:0 12:4:12:4:12:4:12:4 little …\n[63:0] Cr0:Y1:Cb0:Y0 16:16:16:16 little endian per 2 Y …\n[31:0] A:Cr:Y:Cb 2:10:10:10 little endian\n[63:0] A:0:Cr:0:Y:0:Cb:0 12:4:12:4:12:4:12:4 little endian\n[63:0] A:Cr:Y:Cb 16:16:16:16 little endian\n3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) …\n3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) …\n3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) …\n3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) …\n3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) …\npacked YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little …\n3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) …\n3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) …\n3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) …\n3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) …\n3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) …\npacked YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little …\nCreate a new buffer to this pool\nCreate a new buffer in this pool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the pool contains buffers that are …\nUses the memmap2 crate to map the underlying shared memory …\nCreate a new memory pool associated with given shm\nCreate a double memory pool\nCreate a new memory pool associated with the given shm\nCreate a new ShmHandler\nThis method checks both its internal memory pools and …\nResize the memory pool\nResize the memory pool\nAccess the list of SHM formats supported by the compositor\nTry drawing with the given closure\nCreate a new memory pool associated with the given shm.\nthe surface is now activated\nThe window is active, in the foreground\nRepresents the status of a button\nForce using the client-side <code>Frame</code>\nA close request has been received\nThe window should be closed\nConfiguration for this frame\nThe state of your window has been changed\nPossible decoration modes for a Window\nButton is disabled\nType of errors that may occur when attempting to create a …\nPossible events generated by a window that you need to …\nA simple set of decorations that can be used as a fallback\nFollow the preference of the compositor\nInterface for defining the drawing of decorations\nRequest generated by a Frame\nthe surface is fullscreen\nButton is being hovered over by pointer\nButton is not being hovered over by pointer\nThe window is inactive, in the background\nThe window should be maximized\nthe surface is maximized\nThe window should be minimized\nAn interactive move should be started\nDon’t decorate the Window\nThe decorations need to be refreshed\nThe frame requests to be refreshed\nAn interactive resize should be started\nthe surface is being resized\nRequest server-side decorations\nShow window menu.\ntypes of state on the surface\nthe surface is tiled\nthe surface is tiled\nthe surface is tiled\nthe surface is tiled\nThe window should be unmaximized\nA window\nRepresents the status of a window\nAdds the border dimensions to the given dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the Frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the coordinates of the top-left corner of the …\nNotify that a new wl_seat should be handled\nRedraw the decorations\nRefreshes the frame\nNotify that this seat has lost the pointer capability or …\nChange the size of the decorations\nResize the decorations\nSet an app id for the surface.\nSets the configuration for the frame\nSet whether the window should be decorated or not.\nSets the frame configuration for the window\nRequest the window to be set fullscreen\nHide or show the decorations\nSets the maximum possible size for this window\nRequest the window to be maximized\nSets the minimum possible size for this window\nRequest the window to be minimized\nSet whether interactive resize hints should be displayed …\nSet whether the window should be resizeable by the user\nSet the Window XDG states for the frame\nSets the frames title\nSet a short title for the window.\nStart an interactive, user-driven move of the surface\nSubtracts the border dimensions from the given dimensions.\nAccess the surface wrapped in this Window\nRequest the window to quit fullscreen mode\nRequest the window to be un-maximized\nOptional new size for your <em>inner</em> surface\nNew combination of states of your window")