searchState.loadedDescShard("bevy_ecs", 0, "Bevy ECS\nTypes for defining <code>Archetype</code>s, collections of entities …\nTypes for controlling batching behavior during parallel …\nTypes for handling <code>Bundle</code>s.\nTypes that detect when their internal data mutate.\nTypes for declaring and storing <code>Component</code>s.\nMacro to define a new label trait\nEntity handling types.\nEvent handling types.\nA module for the unified <code>Identifier</code> ID struct, for use as …\nProvides types used to statically intern immutable values.\nTraits used by label implementations\nTypes for creating and storing <code>Observer</code>s\nMost commonly used re-exported types.\nContains APIs for retrieving component data from the world.\nTypes that enable reflection support.\nAlerting events when a component is removed from an entity.\nContains APIs for ordering systems and executing them on a …\nStorage layouts for ECS data.\nTools for controlling behavior in an ECS application.\nDefines the <code>World</code> and APIs for accessing it directly.\nMetadata for a single archetype within a <code>World</code>.\nAn opaque unique joint ID for a <code>Component</code> in an <code>Archetype</code> …\nMetadata about an <code>Entity</code> in a <code>Archetype</code>.\nThe next <code>ArchetypeId</code> in an <code>Archetypes</code> collection.\nAn opaque unique ID for a single <code>Archetype</code> within a <code>World</code>.\nAn opaque location within a <code>Archetype</code>.\nThe backing store of all <code>Archetype</code>s within a <code>World</code>.\nThe ID for the <code>Archetype</code> without any components.\nArchetypes and bundles form a graph. Adding or removing a …\nIndex indicating an invalid archetype row. This is meant …\nSafety:\nReturns the number of components that are stored in …\nReturns the total number of components in the archetype\nGets an iterator of all of the components in the archetype.\nChecks if the archetype contains a specific component. …\nFetches a immutable reference to the archetype’s <code>Edges</code>, …\nFetches an immutable reference to the archetype without …\nFetches the entities contained in this archetype.\nFetches the row in the <code>Table</code> where the components for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the “generation”, a handle to the current …\nFetches an immutable reference to an <code>Archetype</code> using its …\nChecks the cache for the target archetype when adding a …\nFetches the corresponding <code>ArchetypeComponentId</code> for a …\nChecks the cache for the target archetype when removing a …\nGets the type of storage where a component in the …\nChecks the cache for the target archetype when removing a …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nThe ID of the entity.\nFetches the ID for the archetype.\nGets the index of the row.\nThe plain value of this <code>ArchetypeId</code>.\nThe first archetype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the archetype has any entities.\nReturns a read-only iterator over all archetypes.\nGets the total number of entities that belong to the …\nFetches the total number of <code>Archetype</code>s within the world.\nCreates a <code>ArchetypeRow</code>.\nCreate an <code>ArchetypeId</code> from a plain value.\nGets an iterator of all of the components stored in …\nGets an iterator of all of the components stored in <code>Table</code>s.\nFetches the archetype’s <code>Table</code> ID.\nThe row in the <code>Table</code> where the entity’s components are …\nDictates how a parallel operation chunks up large …\nThe upper and lower limits for a batch of entities.\nConfigures the number of batches to assign to each thread …\nThe number of batches per thread in the <code>ComputeTaskPool</code>. …\nCalculate the batch size according to the given thread …\nDeclares a batching strategy with a fixed batch size.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the maximum allowed batch size of this instance.\nConfigures the minimum allowed batch size of this instance.\nCreates a new unconstrained default batching strategy.\nThe <code>Bundle</code> trait enables insertion and removal of <code>Component</code>…\nFor a specific <code>World</code>, this stores a unique value …\nStores metadata associated with a specific type of <code>Bundle</code> …\nMetadata for bundles. Stores a <code>BundleInfo</code> for each type of …\nThe parts from <code>Bundle</code> that don’t require statically …\nReturns the ID of each component stored in this bundle.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the metadata associated with a specific type of …\nGets this <code>Bundle</code>’s component ids. This will be <code>None</code> if …\nGets the value identifying a specific type of bundle. …\nReturns a value identifying the associated <code>Bundle</code> type.\nReturns the index of the associated <code>Bundle</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the ID of each component stored …\nThe (arbitrarily chosen) minimum number of world tick …\nTypes that can read change detection information. This …\nTypes that implement reliable change detection.\nThe type contained within this smart pointer\nThe maximum change tick difference that won’t overflow …\nUnique mutable borrow of an entity’s component or of a …\nUnique mutable borrow of resources or an entity’s …\nUnique borrow of a non-<code>Send</code> resource.\nShared borrow of an entity’s component with access to …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nAllows you access to the dereferenced value of this …\nAllows you access to the dereferenced value of this …\nAllows you access to the dereferenced value of this …\nReturns a pointer to the value without taking ownership of …\nReturns an immutable pointer to the value without taking …\nManually bypasses change detection, allowing you to mutate …\nCopies a reference to a resource.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert this <code>NonSendMut</code> into a <code>Mut</code>. This allows keeping …\nConvert this <code>ResMut</code> into a <code>Mut</code>. This allows keeping the …\nReturns the argument unchanged.\nReturns <code>true</code> if this value was changed or mutably …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDue to lifetime limitations of the <code>Deref</code> trait, this …\nConsume <code>self</code> and return a mutable reference to the …\nConsume <code>self</code> and return a mutable reference to the …\nReturns the reference wrapped by this type. The reference …\nConsume <code>self</code> and return a mutable reference to the …\nReturns the pointer to the value, marking it as changed.\nReturns <code>true</code> if this value was added after the system last …\nReturns <code>true</code> if this value was added or mutably …\nReturns the change tick recording the time this data was …\nMap <code>Ref</code> to a different type using <code>f</code>.\nMaps to an inner value by applying a function to the …\nMaps to an inner value by applying a function to the …\nMaps to an inner value by applying a function to the …\nTurn this <code>MutUntyped</code> into a <code>Mut</code> by mapping the inner <code>PtrMut</code>…\nCreate a new <code>Ref</code> using provided values.\nCreates a new change-detection enabled smart pointer. In …\nReturns a <code>Mut&lt;&gt;</code> with a smaller lifetime. This is useful if …\nReturns a <code>Mut&lt;&gt;</code> with a smaller lifetime. This is useful if …\nReturns a <code>Mut&lt;&gt;</code> with a smaller lifetime. This is useful if …\nReturns a <code>MutUntyped</code> with a smaller lifetime. This is …\nOverwrites this smart pointer with the given value, if and …\nFlags this value as having been changed.\nOverwrites this smart pointer with the given value, if and …\nManually sets the change tick recording the time when this …\nTransforms this <code>MutUntyped</code> into a <code>Mut&lt;T&gt;</code> with the same …\nA data type that can be used to store data for an entity.\nA value describing a component or resource, which may or …\nThe type used for <code>Component</code> lifecycle hooks such as <code>on_add</code>…\n<code>World</code>-mutating functions that run as part of lifecycle …\nA value which uniquely identifies the type of a <code>Component</code> …\nA <code>SystemParam</code> that provides access to the <code>ComponentId</code> for …\nStores metadata for a type of component or resource stored …\nRecords when a component or resource was added and when it …\nStores metadata associated with each kind of <code>Component</code> in …\nThe maximum relative age for a change tick. The value of …\nA constant indicating the storage type used for this …\nProvides fast addition and removal of components, but …\nThe storage used for a specific component type.\nProvides fast and cache-friendly iteration, but slower …\nA value that tracks when a system ran relative to other …\nInterior-mutable access to the <code>Tick</code>s for a single …\nThe tick indicating when the value was added to the world.\nReturns the tick recording the time this component or …\nThe tick indicating the last time the value was modified.\nReturns the <code>ComponentId</code> of the given <code>Component</code> type <code>T</code>.\nGet the function which should be called to clean up values …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the value of this change tick.\nGets the <code>ComponentId</code> for the type <code>T</code>.\nType-erased equivalent of <code>Components::component_id()</code>.\nGets the metadata associated with the given component.\nGets the metadata associated with the given component.\nReturns the name associated with the given component.\nType-erased equivalent of <code>Components::resource_id()</code>.\nProvides a reference to the collection of hooks associated …\nReturns a value uniquely identifying the current component.\nReturns the index of the current component.\nInitializes a component of type <code>T</code> with this instance. If a …\nInitializes a component described by <code>descriptor</code>.\nInitializes a non-send resource of type <code>T</code> with this …\nInitializes a <code>Resource</code> of type <code>T</code> with this instance. If a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the component or resource was added after …\nReturns <code>true</code> if the component or resource was added or …\nReturns <code>true</code> if there are no components registered with …\nReturns <code>true</code> if this <code>Tick</code> occurred since the system’s …\nReturns <code>true</code> if the underlying component type can be …\nGets an iterator over all components registered with this …\nReturns the tick recording the time this component or …\nReturns the layout used to store values of this component …\nReturns the number of components registered with this …\nReturns the name of the current component.\nReturns the name of the current component.\nCreates a new <code>ComponentId</code>.\nCreate a new <code>ComponentDescriptor</code> for the type <code>T</code>.\nCreates a new <code>Tick</code> wrapping the given value.\nCreate a new <code>ComponentDescriptor</code> for a resource.\nCreate a new <code>ComponentDescriptor</code>.\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nCalled when registering this component, allowing mutable …\nReturns the <code>ComponentId</code> of the given <code>Resource</code> type <code>T</code>.\nSets the value of this change tick.\nManually sets the change tick.\nReturns a value indicating the storage strategy for the …\nReturns a value indicating the storage strategy for the …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nReturns the <code>TypeId</code> of the underlying component type. …\nReturns the <code>TypeId</code> of the underlying component type. …\nA <code>World</code>’s internal metadata store on all of its entities.\nLightweight identifier of an entity.\nA <code>BuildHasher</code> that results in a <code>EntityHasher</code>.\nA <code>HashMap</code> pre-configured to use <code>EntityHash</code> hashing.\nA <code>HashSet</code> pre-configured to use <code>EntityHash</code> hashing.\nA very fast hash that is only designed to work on …\nA location of an entity in an archetype.\nAn implementor of this trait knows how to map an <code>Entity</code> …\nOperation to map all contained <code>Entity</code> fields in a type to …\nAn entity ID with a placeholder value. This may or may not …\nAn <code>Iterator</code> returning a sequence of <code>Entity</code> values from\nA wrapper for <code>EntityHashMap&lt;Entity&gt;</code>, augmenting it with …\nAllocate an entity ID directly.\nAllocate a specific entity ID, overwriting its generation.\nThe ID of the <code>Archetype</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Archetype</code>.\nClears all <code>Entity</code> from the World.\nReturns true if the <code>Entities</code> contains <code>entity</code>.\nReserves the allocated references to dead entities within …\nAllocates space for entities previously reserved with …\nSafety\nFlushes all reserved entities to an “invalid” state. …\nDestroy an entity, allowing it to be reused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReconstruct an <code>Entity</code> previously destructured with …\nCreates a new entity ID with the specified <code>index</code> and a …\nReturns the generation of this Entity’s index. The …\nReturns the location of an <code>Entity</code>. Note: for pending …\nGets a reference to the underlying <code>EntityHashMap&lt;Entity&gt;</code>.\nGets a mutable reference to the underlying …\nReturn a transiently unique identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if any entity is currently active.\nThe count of currently allocated entities.\nUpdates all <code>Entity</code> references stored inside using …\nMap an entity to another entity\nReturns the corresponding mapped entity or reserves a new …\nCreates a new <code>SceneEntityMapper</code>, spawning a temporary base …\nEnsure at least <code>n</code> allocations can succeed without …\nReserve entity IDs concurrently.\nReserve one entity ID concurrently.\nGet the <code>Entity</code> with a given id, if it exists in this …\nThe ID of the <code>Table</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Table</code>.\nConvert to a form convenient for passing outside of rust.\nThe count of all entities in the <code>World</code> that have ever been …\nReconstruct an <code>Entity</code> previously destructured with …\nCreates an <code>SceneEntityMapper</code> from a provided <code>World</code> and …\nWithout any fixed timestep, events should always be …\nSomething that “happens” and might be read / observed …\nAn <code>EventId</code> uniquely identifies an event stored in a …\nAn iterator that yields any unread events from an …\nAn iterator that yields any unread events (and their IDs) …\nReads events of type <code>T</code> in order and tracks which events …\nA registry of all of the <code>Events</code> in the <code>World</code>, used by …\nSends events of type <code>T</code>.\nAn event collection that represents the events that …\nStores the state for an <code>EventReader</code>.\nAt least one pass of the fixed update schedules has …\n<code>Iterator</code> over sent <code>EventIds</code> from a batch.\nControls whether or not the events in an <code>EventRegistry</code> …\nWe need to wait until at least one pass of the fixed …\nRemoves all events.\nConsumes all available events.\nSee <code>EventReader::clear()</code>\nRemoves an event from the world and it’s associated …\nCreates a draining iterator that removes all events.\nA run condition for <code>event_update_system</code>.\nA system that calls <code>Events::update</code> on all registered <code>Events</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a specific event by id if it still exists in the …\nGets a new <code>ManualEventReader</code>. This will include all events …\nGets a new <code>ManualEventReader</code>. This will ignore all events …\nUniquely identifies the event associated with this ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no events currently stored in …\nReturns <code>true</code> if there are no events available to read.\nSee <code>EventReader::is_empty()</code>\nIterates over events that happened since the last “update…\nReturns the number of events currently stored in the event …\nDetermines the number of events available to be read from …\nSee <code>EventReader::len</code>\nAmount of events we missed.\nCreates a new iterator that yields any <code>events</code> that have …\nReturns the index of the oldest event stored in the event …\nOldest id still in the events buffer.\nIterates over the events this <code>EventReader</code> has not seen …\nSee <code>EventReader::read</code>\nLike <code>read</code>, except also returning the <code>EventId</code> of the events.\nSee <code>EventReader::read_with_id</code>\nRegisters an event type to be updated in a given <code>World</code>\nUpdates all of the registered events in the World.\n“Sends” an <code>event</code> by writing it to the current event …\nSends an <code>event</code>, which can later be read by <code>EventReader</code>s. …\nSends a list of <code>events</code> all at once, which can later be …\nSends a list of <code>events</code> all at once, which can later be …\nSends the default value of the event. Useful when the …\nSends the default value of the event. Useful when the …\nShould the events be updated?\nSignals the <code>event_update_system</code> to run after <code>FixedUpdate</code> …\nSwaps the event buffers and clears the oldest event …\nSwaps the event buffers and drains the oldest event …\nIterate over only the events.\nA unified identifier for all entity and similar IDs. Has …\nError types for <code>super::Identifier</code> conversions. An ID can …\nReturns the argument unchanged.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nReturns the value of the high segment of the <code>Identifier</code>. …\nCalls <code>U::from(self)</code>.\nReturns the kind of <code>Identifier</code> from the high segment.\nReturns the value of the low segment of the <code>Identifier</code>.\nReturns the masked value of the high segment of the …\nConstruct a new <code>Identifier</code>. The <code>high</code> parameter is masked …\nConvert the <code>Identifier</code> into a <code>u64</code>.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nAn  Error type for <code>super::Identifier</code>, mostly for providing …\nA given ID has an invalid configuration of bits for …\nA given ID has an invalid value for initialising to a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait for internable values.\nAn interned value. Will stay valid until the end of the …\nA thread-safe interner which can be used to create …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the <code>Interned&lt;T&gt;</code> corresponding to <code>value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a static reference to <code>self</code>, possibly leaking …\nCreates a new empty interner\nReturns <code>true</code> if the two references point to the same value.\nFeeds the reference to the hasher.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn object safe version of <code>Hash</code>. This trait is …\nCasts the type to <code>dyn Any</code>.\nCasts the type to <code>dyn Any</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given <code>Hasher</code>.\nEquivalent to <code>BoxedSystem</code> for <code>ObserverSystem</code>.\nCollection of <code>ObserverRunner</code> for <code>Observer</code> registered to a …\nCollection of <code>ObserverRunner</code> for <code>Observer</code> registered to a …\nEmit a trigger for a dynamic component id. This is unsafe …\nAn <code>Observer</code> system. Add this <code>Component</code> to an <code>Entity</code> to …\nA description of what an <code>Observer</code> observes.\nType for function that is run when an observer is …\nContains <code>Observer</code> information. This defines how a given …\nEvent trigger metadata for a given <code>Observer</code>,\nMetadata for observers. Stores a cache mapping trigger ids …\nType containing triggered <code>Event</code> information for a given …\nA <code>Command</code> that emits a given trigger for a given set of …\nRepresents a collection of targets for a specific <code>Trigger</code> …\nThe components the trigger should target.\nThe entities the trigger should target.\nReturns the entity that triggered the observer, could be …\nThe entity the trigger targeted.\nReturns a reference to the triggered event.\nThe event to trigger.\nReturns a mutable reference to the triggered event.\nReturns a pointer to the triggered event.\nReturns the event type of this trigger.\nThe <code>ComponentId</code> the trigger targeted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Observer</code>, which defaults to a “global” …\nCreates a new trigger for the given event and observer …\nSets the event type of the resulting trigger, used for …\nThe <code>Entity</code> of the observer handling the trigger.\nThe targets to trigger the event for.\nObserve the given <code>entity</code>. This will cause the <code>Observer</code> to …\nObserve the given <code>component</code>. This will cause the <code>Observer</code> …\nObserve the given <code>ComponentId</code> list. This will cause the …\nAdd the given <code>components</code> to the descriptor.\nObserve the given <code>Entity</code> list. This will cause the <code>Observer</code>…\nAdd the given <code>entities</code> to the descriptor.\nObserve the given <code>entity</code>. This will cause the <code>Observer</code> to …\nObserve the given <code>event</code>. This will cause the <code>Observer</code> to …\nObserve the given <code>event</code>. This will cause the <code>Observer</code> to …\nObserve the given event list. This will cause the <code>Observer</code> …\nAdd the given <code>events</code> to the descriptor.\nTracks read and write access to specific elements in a …\nA filter on a component that only retains results the …\nThe <code>Entity</code> was requested mutably more than once.\nThe <code>AnyOf</code> query parameter fetches entities with any of the …\nA marker trait to indicate that the filter works at an …\nA filter on a component that only retains results the …\nPer archetype/table state used by this <code>WorldQuery</code> to fetch …\nAn <code>Access</code> that has been filtered to include and exclude …\nA collection of <code>FilteredAccess</code> instances.\nReturns a bool that describes if an entity has the …\nReturns true if (and only if) this Filter relies strictly …\nReturns true if (and only if) every table of every …\nThe item returned by this <code>WorldQuery</code> For <code>QueryData</code> this …\nMultiple entities fit the query.\nNo entity fits the query.\nThe given <code>Entity</code> does not exist.\nA filter that tests if any of the given filters apply.\nBuilder struct to create <code>QueryState</code> instances at runtime.\nAn iterator over <code>K</code>-sized combinations of query items …\nTypes that can be fetched from a <code>World</code> using a <code>Query</code>.\nImplement <code>QueryData</code> to use a struct as a data parameter in …\nThe given <code>Entity</code>’s components do not match the query.\nAn error that occurs when retrieving a specific <code>Entity</code>’s …\nTypes that filter the results of a <code>Query</code>.\nImplement <code>QueryFilter</code> to use a struct as a filter …\nThe item type returned when a <code>WorldQuery</code> is iterated over\nAn <code>Iterator</code> over query results of a <code>Query</code>.\nAn <code>Iterator</code> over the query items generated from an …\nA parallel iterator over query results of a <code>Query</code>.\nAn error that occurs when evaluating a <code>Query</code> or <code>QueryState</code> …\nAn <code>Iterator</code> over sorted query results of a <code>Query</code>.\nProvides scoped access to a <code>World</code> state according to a …\nThe read-only variant of the item type returned when a …\nThe read-only variant of this <code>QueryData</code>, which satisfies …\nA <code>QueryData</code> that is read only.\nState used to construct a <code>Self::Fetch</code>. This will be cached …\nFilter that selects entities with a component <code>T</code>.\nFilter that selects entities without a component <code>T</code>.\nTypes that can be used as parameters in a <code>Query</code>. Types …\nReturns a reference to the <code>FilteredAccess</code> that will be …\nReturns a reference to the underlying unfiltered access.\nReturns a mutable reference to the underlying unfiltered …\nAdds the filtered access to the set.\nAdds an archetypal (indirect) access to the element given …\nAdds access to the element given by <code>index</code>.\nAdds access to the element given by <code>index</code>.\nAdds exclusive access to the element given by <code>index</code>.\nAdds exclusive access to the element given by <code>index</code>.\nTakes a function over mutable access to a <code>QueryBuilder</code>, …\nAdds a <code>With</code> filter: corresponds to a conjunction (AND) …\nAdds a <code>Without</code> filter: corresponds to a conjunction (AND) …\nAppends an array of filters: corresponds to a disjunction …\nReturns the indices of the elements that this has an …\nConverts this <code>QueryState</code> reference to a <code>QueryState</code> that …\nChanges the batching strategy used when iterating.\nCreate a <code>QueryState</code> with the accesses of the builder.\nRemoves all accesses.\nRemoves all accesses stored in this set.\nRemoves all writes.\nReturns a reference to the unfiltered access of the entire …\nReturns the components accessed by this query.\nReturns <code>true</code> if the given <code>Entity</code> matches the query.\nAdds accesses required for <code>T</code> to self.\nAdds all access from <code>other</code>.\nAdds all access and filters from <code>other</code>.\nAdds all of the accesses from the passed set to <code>self</code>.\nAdds access to self’s underlying <code>FilteredAccess</code> …\nAdds all of the accesses from <code>other</code> to <code>self</code>.\nFetch <code>Self::Item</code> for either the given <code>entity</code> in the …\nGet next result from the query\nGet next combination of queried components\nAdds filter from <code>T</code> to self.\nReturns true if the provided <code>Entity</code> and <code>TableRow</code> should be …\nRuns <code>func</code> on each query result in parallel.\nRuns <code>func</code> on each query result in parallel on a value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>QueryState</code> from a given <code>QueryBuilder</code> and …\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns a vector of elements that the access and <code>other</code> …\nReturns a vector of elements that this and <code>other</code> cannot …\nReturns a vector of elements that this set and <code>other</code> …\nReturns a vector of elements that this set and <code>other</code> …\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns the read-only query results for the given array of …\nReturns the query results for the given array of <code>Entity</code>.\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns a single immutable query result when there is …\nReturns a single mutable query result when there is …\nReturns a query result when there is exactly one entity …\nReturns a query result when there is exactly one entity …\nAttempts to initialize a <code>State</code> for this <code>WorldQuery</code> type …\nGets the query result for the given <code>World</code> and <code>Entity</code>.\nReturns <code>true</code> if this can access anything.\nReturns <code>true</code> if this accesses anything mutably.\nReturns true if this has an archetypal (indirect) access …\nReturns <code>true</code> if this can access the element given by <code>index</code>.\nReturns <code>true</code> if this has access to all indexed elements …\nReturns <code>true</code> if this can exclusively access the element …\nReturns <code>true</code> if this has write access to all indexed …\nCreates a new instance of this fetch.\nCreates and initializes a <code>State</code> for this <code>WorldQuery</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the access and <code>other</code> can be active at the …\nReturns <code>true</code> if this and <code>other</code> can be active at the same …\nReturns <code>true</code> if this and <code>other</code> can be active at the same …\nChecks if the query is empty for the given <code>World</code>, where …\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nReturns an <code>Iterator</code> over the query results for the given …\nReturns an <code>Iterator</code> over all possible combinations of <code>K</code> …\nReturns an <code>Iterator</code> over all possible combinations of <code>K</code> …\nReturns an <code>Iterator</code> over all possible combinations of <code>K</code> …\nReturns an <code>Iterator</code> over the query results for the given …\nReturns an <code>Iterator</code> over the read-only query items …\nReturns an <code>Iterator</code> over the read-only query items …\nReturns an iterator over the query items generated from an …\nReturns an <code>Iterator</code> over the query results for the given …\nReturns an <code>Iterator</code> over the query results for the given …\nUse this to combine two queries. The data accessed will be …\nUse this to combine two queries. The data accessed will be …\nReturns the archetypes matched by this query.\nReturns the tables matched by this query.\nReturns <code>true</code> if this query matches a set of components. …\nReturns <code>true</code> if this query matches a set of components. …\nAdds <code>&amp;mut T</code> to the <code>FilteredAccess</code> of self.\nCreates a new builder with the accesses required for <code>Q</code> and …\nCreates a new <code>QueryState</code> from a given <code>World</code> and inherits …\nCreates an empty <code>Access</code> collection.\nUpdate the current <code>QueryState</code> with information from the …\nTakes a function over mutable access to a <code>QueryBuilder</code>, …\nTakes a function over mutable access to a <code>QueryBuilder</code>, …\nReturns a parallel iterator over the query results for the …\nReturns a parallel iterator over the query results for the …\nSets this as having access to all indexed elements (i.e. …\nSets the underlying unfiltered access as having access to …\nMarks the set as reading all possible indices of type T.\nReturns the indices of the elements this has non-exclusive …\nReturns the indices of the elements this has access to.\nAdds <code>&amp;T</code> to the <code>FilteredAccess</code> of self.\nSets available accesses for implementors with dynamic …\nSets available accesses for implementors with dynamic …\nAdjusts internal state to account for the next <code>Archetype</code>. …\nAdjusts internal state to account for the next <code>Table</code>. This …\nThis function manually implements subtyping for the query …\nReturns a single immutable query result when there is …\nReturns a single mutable query result when there is …\nSorts all query items into a new iterator, using the query …\nSorts all query items into a new iterator with a …\nSort all query items into a new iterator with a key …\nSorts all query items into a new iterator with a key …\nSorts all query items into a new iterator, using the query …\nSorts all query items into a new iterator with a …\nSorts all query items into a new iterator with a key …\nTransmute the existing builder adding required accesses. …\nUse this to transform a <code>QueryState</code> into a more generic …\nTransmute the existing builder adding required accesses. …\nCreates a new <code>QueryState</code> with the same underlying …\nFor the given <code>archetype</code>, adds any component accessed used …\nUpdates the state’s internal view of the <code>World</code>’s …\nUpdates the state’s internal view of the <code>world</code>’s …\nAdds any component accesses used by this <code>WorldQuery</code> to …\nPanics\nAdds <code>With&lt;T&gt;</code> to the <code>FilteredAccess</code> of self.\nReturns the indices of the elements that this access …\nAdds <code>With&lt;T&gt;</code> to the <code>FilteredAccess</code> of self from a runtime …\nAdds <code>Without&lt;T&gt;</code> to the <code>FilteredAccess</code> of self.\nReturns the indices of the elements that this access …\nAdds <code>Without&lt;T&gt;</code> to the <code>FilteredAccess</code> of self from a …\nReturns a reference to the world passed to <code>Self::new</code>.\nReturns a mutable reference to the world passed to …\nSets this as having mutable access to all indexed elements …\nSets the underlying unfiltered access as having mutable …\nMarks the set as writing all T.\nReturns the indices of the elements this has exclusive …\nA <code>Resource</code> storing <code>TypeRegistry</code> for type registrations …\nA struct used to operate on reflected <code>Bundle</code> trait of a …\nThe raw function pointers needed to make up a <code>ReflectBundle</code>…\nAn extension trait for <code>EntityCommands</code> for reflection …\nA struct used to operate on reflected <code>Component</code> trait of a …\nThe raw function pointers needed to make up a …\nA struct used to operate on the reflected <code>FromWorld</code> trait …\nThe raw function pointers needed to make up a …\nFor a specific type of component, this maps any fields …\nFor a specific type of resource, this maps any fields with …\nA struct used to operate on reflected <code>Resource</code> of a type.\nThe raw function pointers needed to make up a …\nUses reflection to set the value of this <code>Bundle</code> type in …\nUses reflection to set the value of this <code>Component</code> type in …\nUses reflection to set the value of this <code>Resource</code> type in …\nFunction pointer implementing <code>ReflectBundle::apply()</code>.\nFunction pointer implementing <code>ReflectComponent::apply()</code>.\nFunction pointer implementing <code>ReflectResource::apply()</code>.\nUses reflection to set the value of this <code>Bundle</code> type in …\nUses reflection to set the value of this <code>Component</code> type in …\nUses reflection to set the value of this <code>Resource</code> type in …\nFunction pointer implementing …\nFunction pointer implementing …\nFunction pointer implementing …\nReturns whether entity contains this <code>Component</code>\nFunction pointer implementing <code>ReflectComponent::contains()</code>.\nGets the value of this <code>Component</code> type from entity from …\nGets the value of this <code>Resource</code> type from <code>source_world</code> and …\nFunction pointer implementing <code>ReflectComponent::copy()</code>.\nFunction pointer implementing <code>ReflectResource::copy()</code>.\nThe underlying function pointers implementing methods on …\nThe underlying function pointers implementing methods on …\nThe underlying function pointers implementing methods on …\nThe underlying function pointers implementing methods on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs default reflected <code>FromWorld</code> from world using …\nFunction pointer implementing …\nInsert a reflected <code>Bundle</code> into the entity like <code>insert()</code>.\nInsert a reflected <code>Component</code> into the entity like <code>insert()</code>.\nInsert a reflected <code>Resource</code> into the world like <code>insert()</code>.\nFunction pointer implementing <code>ReflectBundle::insert()</code>.\nFunction pointer implementing <code>ReflectComponent::insert()</code>.\nFunction pointer implementing <code>ReflectResource::insert()</code>.\nAdds the given boxed reflect component to the entity using …\nSame as <code>insert_reflect</code>, but using the <code>T</code> resource as type …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA general method for applying <code>MapEntities</code> behavior to all …\nA general method for applying <code>MapEntities</code> behavior to …\nA method for applying <code>MapEntities</code> behavior to elements in …\nCreate a custom implementation of <code>ReflectBundle</code>.\nGet the default set of <code>ReflectBundleFns</code> for a specific …\nCreate a custom implementation of <code>ReflectComponent</code>.\nGet the default set of <code>ReflectComponentFns</code> for a specific …\nCreate a custom implementation of <code>ReflectFromWorld</code>.\nGet the default set of <code>ReflectFromWorldFns</code> for a specific …\nCreate a custom implementation of <code>ReflectResource</code>.\nGet the default set of <code>ReflectResourceFns</code> for a specific …\nGets the value of this <code>Component</code> type from the entity as a …\nGets the value of this <code>Resource</code> type from the world as a …\nFunction pointer implementing <code>ReflectComponent::reflect()</code>.\nFunction pointer implementing <code>ReflectResource::reflect()</code>.\nGets the value of this <code>Component</code> type from the entity as a …\nGets the value of this <code>Resource</code> type from the world as a …\nFunction pointer implementing …\nSafety\nSafety\nFunction pointer implementing …\nFunction pointer implementing …\nRemoves this <code>Bundle</code> type from the entity. Does nothing if …\nRemoves this <code>Component</code> type from the entity. Does nothing …\nRemoves this <code>Resource</code> type from the world. Does nothing if …\nFunction pointer implementing <code>ReflectBundle::remove()</code>.\nFunction pointer implementing <code>ReflectComponent::remove()</code>.\nFunction pointer implementing <code>ReflectResource::remove()</code>.\nRemoves from the entity the component with the given type …\nSame as <code>remove_reflect</code>, but using the <code>T</code> resource as type …\nWrapper around <code>Entity</code> for <code>RemovedComponents</code>. Internally, …\nStores the <code>RemovedComponents</code> event buffers for all types …\nWrapper around a <code>ManualEventReader&lt;RemovedComponentEntity&gt;</code> …\nA <code>SystemParam</code> that yields entities that had their <code>T</code> …\nIterator over entities that had a specific component …\nIterator over entities that had a specific component …\nConsumes all available events.\nFetch underlying <code>Events</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the event storage for a given component.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are no events available to read.\nReturns an iterator over components and their entity …\nDetermines the number of removal events available to be …\nCreates an empty storage buffer for component removal …\nIterates over the events this <code>RemovedComponents</code> has not …\nLike <code>read</code>, except also returning the <code>EventId</code> of the events.\nFetch underlying <code>ManualEventReader</code>.\nFetch underlying <code>ManualEventReader</code> mutably.\nDestructures to get a mutable reference to the …\nSends a removal event for the specified component.\nFor each type of component, swaps the event buffers and …\nSystems with conflicting access have indeterminate run …\nCombines the outputs of two systems using the <code>&amp;&amp;</code> operator.\nA <code>SystemSet</code> implicitly created when using …\nA type-erased run condition stored in a <code>Box</code>.\nChain systems into dependencies\nA system that determines if one or more scheduled systems …\nConfiguration for a tuple of nested <code>Configs</code> instances.\nConfiguration for a tuple of nested <code>Configs</code> instances.\nConfiguration for a tuple of nested <code>Configs</code> instances.\nTried to order a system (set) relative to a system set it …\nA directed acyclic graph structure.\nThe dependency graph contains a cycle.\nA system (set) has been told to run before itself.\nOccurrences are logged and result in errors.\nSpecifies how a <code>Schedule</code> will be run.\nThe hierarchy of system sets contains a cycle.\nA system set contains itself.\nThe hierarchy of system sets contains redundant edges.\nOccurrences are completely ignored.\nA shorthand for <code>Interned&lt;dyn ScheduleLabel&gt;</code>.\nA shorthand for <code>Interned&lt;dyn SystemSet&gt;</code>.\nTypes that can convert into a <code>SystemConfigs</code>.\nTypes that can be converted into a <code>SystemSet</code>.\nTypes that can convert into a <code>SystemSetConfigs</code>.\nSpecifies how schedule construction should respond to …\nNew-typed <code>ThreadExecutor</code> <code>Resource</code> that is used to run …\nRuns the schedule using a thread pool. Non-conflicting …\nRuns the schedule using a thread pool. Non-conflicting …\nNodes are allowed to run in any order.\nStores configuration for a single generic node (a system …\nConfiguration for a single node.\nConfiguration for a single node.\nConfiguration for a single node.\nA collections of generic <code>NodeConfig</code>s.\nUnique identifier for a system or system set stored in a …\nInvokes <code>Not</code> with the output of another system.\nCombines the outputs of two systems using the <code>||</code> operator.\nA collection of systems, and the metadata and executor …\nCategory of errors encountered during schedule …\nSpecifies miscellaneous settings for schedule construction.\nMetadata for a <code>Schedule</code>.\nA strongly-typed class of labels used to identify a …\nDerive macro generating an impl of the trait <code>ScheduleLabel</code>.\nError to denote that <code>Schedule::initialize</code> or <code>Schedule::run</code> …\nResource that stores <code>Schedule</code>s mapped to <code>ScheduleLabel</code>s …\nIdentifier for a system set.\nThe type of <code>SystemSet</code> this instance converts into.\nTried to order system sets that share systems.\nLike <code>SingleThreaded</code> but calls <code>apply_deferred</code> immediately …\nA variant of <code>SingleThreadedExecutor</code> that calls …\nRuns the schedule using a single thread.\nRuns the schedule using a single thread.\nResource for controlling system stepping behavior\nIdentifier for a system.\nStores configuration for a single system.\nA collection of <code>SystemConfig</code>.\nHolds systems and conditions of a <code>Schedule</code> sorted in …\nTypes that identify logical groups of systems.\nDerive macro generating an impl of the trait <code>SystemSet</code>.\nA <code>SystemSet</code> with scheduling metadata.\nA collection of <code>SystemSetConfig</code>.\nA <code>SystemSet</code> grouping instances of the same function.\nTried to order a system (set) relative to all instances of …\nTried to run a schedule before all of its systems have …\nOccurrences are logged only.\nRun nodes in order. If there are deferred parameters in …\nRun nodes in order. This will not add <code>apply_deferred</code> …\nEnable stepping for the provided schedule\nAdd a collection of systems to the schedule.\nAdds one or more systems to the <code>Schedule</code> matching the …\nRun after all systems in <code>set</code>. If <code>set</code> has any systems that …\nRun after all systems in <code>set</code>. If <code>set</code> has any systems that …\nRuns before all systems in <code>set</code>. If <code>set</code> has any systems …\nRuns before all systems in <code>set</code>. If <code>set</code> has any systems …\nRun after all systems in <code>set</code>.\nRun after all systems in <code>set</code>.\nRun after all systems in <code>set</code>.\nRun after all systems in <code>set</code>.\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nEnsure this system always runs when stepping is enabled\nEnsure this system instance always runs when stepping is …\nDetermines whether the presence of ambiguities (systems …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from …\nSuppress warnings and errors that would result from …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from these …\nSuppress warnings and errors that would result from …\nSuppress warnings and errors that would result from …\nReturns a new run condition that only returns <code>true</code> if both …\nReturns a new run condition that only returns <code>true</code> if both …\nInstructs the executor to call <code>System::apply_deferred</code> on …\nDirectly applies any accumulated <code>Deferred</code> system …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nAuto insert <code>apply_deferred</code> systems into the schedule, when …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nRuns before all systems in <code>set</code>. If <code>self</code> has any systems …\nRun before all systems in <code>set</code>.\nRun before all systems in <code>set</code>.\nRun before all systems in <code>set</code>.\nRun before all systems in <code>set</code>.\nSystem to call denoting that a new render frame has begun\nBuild a <code>SystemSchedule</code> optimized for scheduler access from …\nA cached topological ordering of the graph.\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of system sets.\nTreat this collection as a sequence of system sets.\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of systems.\nTreat this collection as a sequence of systems.\nClear a breakpoint for the system\nclear a breakpoint for system instance\nclear a breakpoint for system instance\nClear behavior set for all systems in the provided <code>Schedule</code>\nClear any behavior set for the system\nA collection of run conditions that may be useful in any …\nApplies the provided <code>ScheduleBuildSettings</code> to all …\nConfigures a collection of system sets in this schedule, …\nConfigures a collection of system sets in the provided …\nReturns the list of systems that conflict with each other, …\nconvert conflicts to human readable format\nDoes a schedule with the provided label already exist?\nRun all remaining systems in the stepping frame during the …\nReturn our current position within the stepping frame\nCreates a schedule with a default label. Only use in …\nReturns the <code>Dag</code> of the dependencies in the schedule.\nDisable stepping, resume normal systems execution\nAdd a run condition to each contained system.\nAdd a run condition to each contained system.\nClones this <code>ScheduleLabel</code>.\nClones this <code>SystemSet</code>.\nFeeds this value into the given <code>Hasher</code>.\nFeeds this value into the given <code>Hasher</code>.\nBegin stepping at the start of the next frame\nReturns a mutable reference to the schedules associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the schedule associated with <code>label</code>, …\nReturns the schedule’s current <code>ScheduleBuildSettings</code>.\nReturns the schedule’s current execution strategy.\nReturns a mutable reference to the schedule associated …\nReturns the set at the given <code>NodeId</code>, if it exists.\nReturns the system at the given <code>NodeId</code>, if it exists.\nReturns the <code>ScheduleGraph</code>.\nThe directed graph of the stored systems, connected by …\nReturns a mutable reference to the <code>ScheduleGraph</code>.\nReturns the <code>Dag</code> of the hierarchy.\nDetermines whether the presence of redundant edges in the …\nSuppress warnings and errors that would result from …\nSuppress warnings and errors that would result from …\nList of <code>ComponentId</code>s to ignore when reporting system order …\nAdd these systems to the provided <code>set</code>.\nAdd these systems to the provided <code>set</code>.\nAdd these system sets to the provided <code>set</code>.\nAdd these system sets to the provided <code>set</code>.\nAdds a new boxed system set to the systems.\nInitializes any newly-added systems and conditions, …\nInitializes any newly-added systems and conditions by …\nInserts a labeled schedule into the map.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a <code>SystemConfigs</code>.\nConverts this instance to its associated <code>SystemSet</code> type.\nReturns <code>true</code> if this system set is an <code>AnonymousSet</code>.\nReturns <code>true</code> if this system set is an <code>AnonymousSet</code>.\nCheck if stepping is enabled\nReturns <code>true</code> if the identified node is a system set.\nReturns <code>true</code> if the identified node is a system.\nReturns an iterator over all schedules. Iteration order is …\nIterate through the <code>ComponentId</code>’s that will be ignored.\nReturns an iterator over mutable references to all …\nGet the <code>InternedScheduleLabel</code> for this <code>Schedule</code>.\nEnsure this system never runs when stepping is enabled\nEnsure this system instance never runs when stepping is …\nCreates a new <code>multi_threaded</code> executor for use with a …\nConstructs an empty <code>Schedule</code>.\nCreates a new executor that can be used to run systems on …\nCreates a new simple executor for use in a <code>Schedule</code>. This …\nCreates a new single-threaded executor for use in a …\nCreates an empty <code>SystemSchedule</code>.\nConstructs an empty <code>Schedules</code> with zero initial capacity.\nCreates an empty <code>ScheduleGraph</code> with default settings.\nDefault build settings. See the field-level documentation …\nCreate a new instance of the <code>Stepping</code> resource.\nReturns a new run condition that returns <code>true</code> if either …\nReturns a new run condition that returns <code>true</code> if either …\nPrints the names of the components and resources with <code>info</code>\nRemoves the schedule corresponding to the <code>label</code> from the …\nRemoves the (schedule, label) pair corresponding to the …\nDisable stepping for the provided schedule\nIf set to true, report all system sets the conflicting …\nRuns all systems in this schedule on the <code>world</code>, using its …\nRun the systems only if the <code>Condition</code> is <code>true</code>.\nRun the systems only if the <code>Condition</code> is <code>true</code>.\nRun the systems in this set(s) only if the <code>Condition</code> is …\nRun the systems in this set(s) only if the <code>Condition</code> is …\nAdds a new boxed run condition to the systems.\nReturn the list of schedules with stepping enabled in the …\nSet whether the schedule applies deferred system buffers …\nReturns the set at the given <code>NodeId</code>.\nAdd a breakpoint for system\nAdd a breakpoint for system instance\nChanges miscellaneous build settings.\nSets the schedule’s execution strategy.\nget the list of systems this schedule should skip for this …\nRun the next system during the next render frame\nReturns the system at the given <code>NodeId</code>.\nReturns an iterator over all system sets in this schedule, …\nReturns <code>Some</code> if this system set is a <code>SystemTypeSet</code>.\nReturns <code>Some</code> if this system set is a <code>SystemTypeSet</code>.\nReturns an iterator over all systems in this schedule.\nReturns an iterator over all systems in this schedule, …\nReturns the number of systems in this schedule.\nIf set to true, node names will be shortened instead of …\nSee <code>Chain</code> for usage.\nRun conditions applied to everything in the tuple.\nConfiguration for each element of the tuple.\nSee <code>Chain</code> for usage.\nRun conditions applied to everything in the tuple.\nConfiguration for each element of the tuple.\nSee <code>Chain</code> for usage.\nRun conditions applied to everything in the tuple.\nConfiguration for each element of the tuple.\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nGenerates a <code>Condition</code> that inverses the result of passed …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA type-erased contiguous container for data of a …\nA sparse data structure of <code>Component</code>s.\nThe type-erased backing storage and metadata for a single …\nThe backing store for all <code>Resource</code>s stored in the <code>World</code>.\nA data structure that blends dense and sparse storage\nRepresents something that can be stored in a <code>SparseSet</code> as …\nA collection of <code>ComponentSparseSet</code> storages, indexed by …\nThe raw data stores of a <code>World</code>\nA column-oriented structure-of-arrays based storage for …\nAn opaque unique ID for a <code>Table</code> within a <code>World</code>.\nA opaque newtype for rows in <code>Table</code>s. Specifies a single …\nA collection of <code>Table</code> storages, indexed by <code>TableId</code>\nGets the underlying table index from the ID.\nGets the index of the row as a <code>usize</code>.\nGets the underlying table index from the ID.\nGets the index of the row as a <code>usize</code>.\nReturns the total number of elements the <code>SparseSet</code> can …\nClears all resources.\nClears all of the elements from the sparse set.\nClears the column, removing all values.\nGets the number of components being stored in the table.\nReturns <code>true</code> if the sparse set has a component value for …\nReturns <code>true</code> if the sparse set contains a value for <code>index</code>.\nThe <code>TableId</code> of the <code>Table</code> without any components.\nFetches a read-only slice of the entities stored within …\nGets the maximum number of entities the table can …\nGets the number of entities currently being stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TableId</code>.\nCreates a <code>TableRow</code>.\nCreates a new <code>TableId</code>.\nCreates a <code>TableRow</code> from a <code>usize</code> index.\nFetches a <code>Table</code> by its <code>TableId</code>.\nGets read-only access to a resource, if it exists.\nReturns a reference to the entity’s component value.\nReturns a reference to the value for <code>index</code>.\nGets a reference to the <code>ComponentSparseSet</code> of a <code>ComponentId</code>…\nFetches a reference to the data and change detection ticks …\nReturns a reference to the “added” tick of the entity…\nFetches the “added” change detection tick for the …\nFetches the “added” change detection tick for the …\nFetches the slice to the <code>Column</code>’s “added” change …\nReturns a reference to the “changed” tick of the entity…\nFetches the “changed” change detection tick for the …\nFetches the “changed” change detection tick for the …\nFetches the slice to the <code>Column</code>’s “changed” change …\nFetches a read-only reference to the <code>Column</code> for a given …\nReturns a reference to the resource, if it exists.\nFetches a read-only reference to the data at <code>row</code>.\nFetches a mutable reference to the data at <code>row</code>.\nFetches the data pointer to the first element of the <code>Column</code>…\nFetches the slice to the <code>Column</code>’s data cast to a given …\nFetches a read-only reference to the data at <code>row</code>. Unlike …\nReturns a mutable reference to the value for <code>index</code>.\nReturns a reference to the value for <code>index</code>, inserting one …\nCreates a new instance of this type with the specified …\nReturns a reference to the resource’s change ticks, if …\nReturns a reference to the “added” and “changed” …\nFetches the change detection ticks for the value at <code>row</code>.\nFetches the change detection ticks for the value at <code>row</code>. …\nReturns references to the entity’s component value and …\nChecks if the table contains a <code>Column</code> for a given <code>Component</code>…\nGets the <code>ArchetypeComponentId</code> for the resource.\nReturns an iterator visiting all keys (indices) in …\nInserts <code>value</code> at <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the <code>Table</code> is empty or not.\nReturns true if this collection contains no <code>Table</code>s\nReturns true if there are no resources stored in the <code>World</code>,\nReturns <code>true</code> if the sparse set contains no component …\nReturns <code>true</code> if the sparse set contains no elements.\nReturns true if this collection contains no …\nChecks if the column is empty. Returns <code>true</code> if there are …\nReturns true if the resource is populated.\nFetches the <code>Layout</code> for the underlying type.\nIterates over the <code>Column</code>s of the <code>Table</code>.\nIterates through all of the tables stored within in <code>TableId</code>…\nIterate over all resources that have been initialized, …\nReturns an iterator visiting all key-value pairs in …\nAn Iterator visiting all (<code>ComponentId</code>, <code>ComponentSparseSet</code>) …\nReturns an iterator visiting all key-value pairs in …\nReturns the number of <code>Table</code>s this collection contains\nThe total number of resources stored in the <code>World</code>\nReturns the number of component values in the sparse set.\nReturns the number of elements in the sparse set.\nReturns the number of <code>ComponentSparseSet</code>s this collection …\nGets the current number of elements stored in the column.\nCreates a new <code>SparseSet</code>.\nBacking storage for <code>!Send</code> resources.\nRemoves and returns the value for <code>index</code>.\nBacking storage for resources.\nGets the sparse set index corresponding to this instance.\nBacking storage for <code>SparseSet</code> components.\nBacking storage for <code>Table</code> components.\nReturns an iterator visiting all values in arbitrary order.\nReturns an iterator visiting all values mutably in …\nCreates a new <code>SparseSet</code> with a specified initial capacity.\nCustomizes the behavior of an <code>AdapterSystem</code>\nA <code>System</code> that takes the output of <code>S</code> and transforms it by …\nA convenience type alias for a boxed <code>System</code> trait object.\nA parameter that can be built with <code>SystemBuilder</code>\nA mutable reference to this type will be passed to the …\nA <code>System</code> defined by combining two other systems. The …\nCustomizes the behavior of a <code>CombinatorSystem</code>.\nA <code>Command</code> queue to perform structural changes to the <code>World</code>.\nA <code>SystemParam</code> that stores a buffer which gets applied to …\nA <code>Command</code> which gets executed for a given <code>Entity</code>.\nA list of commands that will be run to modify an entity.\nA function system that runs with exclusive <code>World</code> access.\nA parameter that can be used in an exclusive system (a …\nA trait implemented for all exclusive system functions …\nShorthand way of accessing the associated type …\nThe <code>System</code> counter part of an ordinary function.\nWrapper type to mark a <code>SystemParam</code> as an input.\nThe input type for an <code>AdapterSystem</code>.\nThe input type for a <code>CombinatorSystem</code>.\nThe input type to this system. See <code>System::In</code>.\nThe input type to this system. See <code>System::In</code>.\nThe system’s input. See <code>In</code> for <code>FunctionSystem</code>s.\nImplemented for systems that convert into <code>ObserverSystem</code>.\nConversion trait to turn something into a <code>System</code>.\nThe item type returned when constructing this system param.\nThe item type returned when constructing this system param.\nA system local <code>SystemParam</code>.\nShared borrow of a non-<code>Send</code> resource.\nImplemented for systems that have an [<code>Observer</code>] as the …\nThe output type for an <code>AdapterSystem</code>.\nThe output type for a <code>CombinatorSystem</code>.\nThe return type of this system. See <code>System::Out</code>.\nThe return type of this system. See <code>System::Out</code>.\nThe system’s output.\nAn alternative to <code>Commands</code> that can be used in parallel …\nThe <code>ExclusiveSystemParam</code>’s defined by this system’s <code>fn</code> …\nThe <code>SystemParam</code>/s used by this system to access the <code>World</code>.\nA collection of potentially conflicting <code>SystemParam</code>s …\nA <code>System</code> created by piping the output of the first system …\nSystem parameter that provides selective access to the …\nType returned from <code>Query::transmute_lens</code> containing the …\n<code>System</code> types that do not modify the <code>World</code> when run. This …\nA <code>SystemParam</code> that only reads a given <code>World</code>.\nA system tried to run itself recursively.\nThe <code>Command</code> type for registering one shot systems from …\nAn operation with stored systems failed.\nA system that has been removed from the registry. It …\nA type that can be inserted into a <code>World</code> as a singleton.\nThe <code>Command</code> type for <code>World::run_system</code>.\nTrait used to run a system immediately on a <code>World</code>.\nThe <code>Command</code> type for <code>World::run_system</code> or …\nA system tried to remove itself.\nUsed to store data which persists across invocations of a …\nUsed to store data which persists across invocations of a …\nA helper for using system parameters in generic contexts\nAn ECS system that can be added to a <code>Schedule</code>\nThe type of <code>System</code> that this instance converts into.\nThe type of <code>System</code> that this instance converts into.\nTypes that can be used with <code>Deferred&lt;T&gt;</code> in systems. This …\nBuilder struct used to construct state for <code>SystemParam</code> …\nA <code>SystemParam</code> that reads the previous and current change …\nAn identifier for a registered system.\nA system was run by id, but no system with that id was …\nThe metadata of a <code>System</code>.\n<code>SystemParam</code> that returns the name of the system which it …\nA parameter that can be used in a <code>System</code>.\nImplement <code>SystemParam</code> to use a struct as a parameter in a …\nA trait implemented for all functions that can be used as …\nShorthand way of accessing the associated type …\nHolds on to persistent state required to drive <code>SystemParam</code> …\nTurns an <code>EntityCommand</code> type into a <code>Command</code> type.\nWhen used in an <code>AdapterSystem</code>, this function customizes …\nPushes a generic <code>Command</code> to the command queue.\nPushes an <code>EntityCommand</code> to the queue, which will get …\nTake all commands from <code>other</code> and append them to <code>self</code>, …\nExecutes this command for the given <code>Entity</code>.\nApplies any deferred mutations to the <code>World</code>.\nApplies all state queued up for <code>SystemParam</code> values. For …\nApplies any deferred mutations stored in this <code>SystemParam</code>…\nApplies any deferred mutations stored in this <code>SystemParam</code>…\nApplies any <code>Deferred</code> system parameters (or other system …\nReturns the system’s archetype component <code>Access</code>.\nGets a <code>QueryLens</code> with the same accesses as the existing …\nEnsure that a given function is a read-only system.\nEnsure that a given function is a system.\nEnsures that the provided system doesn’t with itself.\nConstructs <code>SystemParam::State</code> for <code>Self</code> using a given …\nConstruct the a system with the built params\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nAdd <code>T</code> as a parameter built with the given function\nChecks any <code>Tick</code>s stored on this system and wraps their …\nRemoves all components associated with the entity.\nClone the combined system. The cloned instance must be …\nWhen used in a <code>CombinatorSystem</code>, this function customizes …\nTemporarily provides access to the <code>Commands</code> for the …\nReturns the underlying <code>Commands</code>.\nReturns the system’s component <code>Access</code>.\nReturns <code>true</code> if the given <code>Entity</code> matches the query.\nReturns the system’s default system sets.\nReturns the system’s default system sets.\nDespawns the entity. This will emit a warning if the …\nReturns the <code>EntityCommands</code> for the requested <code>Entity</code>.\nTransforms a <code>SystemId</code> into the <code>Entity</code> that holds the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>SystemId</code> from an <code>Entity</code>. Useful when you only have …\nRetrieve the <code>SystemParam</code> values. This can only be called …\nReturns the read-only query item for the given <code>Entity</code>.\nReturns the <code>EntityCommands</code> for the requested <code>Entity</code>, if it …\nReturns the query item for the given <code>Entity</code>, with the …\nGets the tick indicating the last time this system ran.\nRetrieve the <code>SystemParam</code> values. This can only be called …\nRetrieve the mutable <code>SystemParam</code> values.  This will not …\nReturns the read-only query items for the given array of …\nReturns the query items for the given array of <code>Entity</code>.\nRetrieve the mutable <code>SystemParam</code> values.\nReturns the query item for the given <code>Entity</code>.\nPushes a <code>Command</code> to the queue for creating a new <code>Entity</code> if …\nCreates a parameter to be passed into a <code>SystemParamFunction</code>…\nCreates a parameter to be passed into an …\nReturns a single read-only query item when there is …\nReturns a single query item when there is exactly one …\nReturns the query item for the given <code>Entity</code>.\nRetrieve the <code>SystemParam</code> values. This will not update …\nReturns true if system as deferred buffers\nReturns true if the system has deferred <code>SystemParam</code>’s\nReturns the <code>Entity</code> id of the entity.\nCreates a new instance of this param’s <code>State</code>.\nPushes a <code>Command</code> to the queue for inserting a <code>Resource</code> in …\nRegisters any <code>World</code> access used by this <code>SystemParam</code> and …\nInitialize the system.\nIs the system initialized? A system is initialized the …\nAdds a <code>Bundle</code> of components to the entity.\nPushes a <code>Command</code> to the queue for creating entities, if …\nPushes a <code>Command</code> to the queue for inserting a <code>Resource</code> in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value of the parameter\nTurns this value into its corresponding <code>System</code>.\nTurns this value into its corresponding <code>System</code>.\nReturns <code>true</code> if the resource was added after the system …\nReturns <code>true</code> if the resource was added or mutably …\nReturns <code>true</code> if there are no query items.\nReturns true if the system must be run exclusively.\nReturns true if the system is <code>Send</code>.\nReturns true if the system is <code>Send</code>.\nReturns an <code>Iterator</code> over the read-only query items.\nReturns a <code>QueryCombinationIter</code> over all combinations of <code>K</code> …\nReturns a <code>QueryCombinationIter</code> over all combinations of <code>K</code> …\nIterates over all possible combinations of <code>K</code> query items …\nReturns an <code>Iterator</code> over the query items, with the actual …\nReturns an <code>Iterator</code> over the read-only query items …\nReturns an iterator over the query items generated from an …\nReturns an <code>Iterator</code> over the query items generated from an …\nReturns an <code>Iterator</code> over the query items.\nReturns an <code>Iterator</code> over the query items.\nReturns a <code>QueryLens</code> that can be used to get a query with …\nEquivalent to <code>Self::join</code> but also includes a <code>QueryFilter</code> …\nReturns the <code>World</code> change tick seen by the system the …\nContains type aliases for built-in <code>SystemParam</code>s with …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nLogs the components of the entity at the info level.\nReturns the read-only query items for the given array of …\nReturns the query items for the given array of <code>Entity</code>.\nPass the output of this system into the passed function <code>f</code>, …\nReturns <code>true</code> if <code>world_id</code> matches the <code>World</code> that was used …\nGets the metadata for this instance.\nReturns the system’s name.\nReturns the system’s name\nGets the name of the system.\nConstruct a new builder with the default state for <code>T</code>\nCreates a new system that combines two inner systems.\nReturns a new <code>Commands</code> instance from a <code>CommandQueue</code> and a …\nCreates a new <code>SystemState</code> with default state.\nCreates a new <code>Command</code> struct, which can be added to …\nCreates a new Command struct, which can be added to …\nCreates a new <code>System</code> that uses <code>func</code> to adapt <code>system</code>, via …\nCreates a new <code>Command</code> struct, which can be added to …\nFor the specified <code>Archetype</code>, registers the components …\nFor the specified <code>Archetype</code>, registers the components …\nReturns a new <code>Commands</code> instance from a <code>CommandQueue</code> and an …\nCreates a new <code>Command</code> struct, which can be added to …\nSpawn an <code>Observer</code> and returns the <code>EntityCommands</code> …\nCreates an <code>Observer</code> listening for a trigger of type <code>T</code> that …\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 0th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 1st parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 2nd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 3rd parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 4th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 5th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 5th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 5th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 6th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 6th parameter in this <code>ParamSet</code>…\nGets exclusive access to the 7th parameter in this <code>ParamSet</code>…\nReturns a parallel iterator over the query results for the …\nReturns a parallel iterator over the query results for the …\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nAdd <code>T</code> as a parameter built from the world\nPass the output of this system <code>A</code> into a second system <code>B</code>, …\nPush a <code>Command</code> onto the queue.\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nCreate a <code>Query</code> from the underlying <code>QueryState</code>.\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nHelper method for adding a filtered <code>Query</code> as a param, …\nQueues any deferred mutations to be applied at the next …\nQueues any deferred mutations to be applied at the next …\nQueues any deferred mutations to be applied at the next …\nQueues any deferred mutations to be applied at the next …\nEnqueues any <code>Deferred</code> system parameters (or other system …\nReturns a <code>Commands</code> with a smaller lifetime. This is useful …\nReturns an <code>EntityCommands</code> with a smaller lifetime. This is …\nReturns a <code>Deferred&lt;T&gt;</code> with a smaller lifetime. This is …\nRegisters a system and returns a <code>SystemId</code> so it can later …\nRemoves a <code>Bundle</code> of components from the entity.\nRemoves a component from the entity.\nPushes a <code>Command</code> to the queue for removing a <code>Resource</code> from …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nRemoves all components except the given <code>Bundle</code> from the …\nExecutes this system once. See <code>System::run</code>.\nExecutes this system once. See <code>System::run</code> or …\nRuns the system with the given input in the world.\nRuns the system with the given input in the world.\nRuns this system with the given input in the world.\nRuns this system with the given input in the world.\nRuns the system corresponding to the given <code>SystemId</code>. …\nRuns a system and applies its deferred parameters.\nRuns a system and applies its deferred parameters.\nRuns a system with given input and applies its deferred …\nRuns the system corresponding to the given <code>SystemId</code>. …\nRuns the system with the given input in the world. Unlike …\nMarks the system as having deferred buffers like <code>Commands</code> …\nOverwrites the tick indicating the last time this system …\nSets the system to be not <code>Send</code>.\nReturns a single read-only query item when there is …\nReturns a single query item when there is exactly one …\nPushes a <code>Command</code> to the queue for creating a new entity …\nPushes a <code>Command</code> to the queue for creating entities with a …\nPushes a <code>Command</code> to the queue for creating a new empty …\nReturn the constructed <code>SystemState</code>\nThe system removed from the storage.\nGet the <code>TypeId</code> of the <code>System</code> produced after calling …\nReturns the current <code>World</code> change tick seen by the system.\nReturns another <code>Query</code> from this that fetches the read-only …\nReturns a <code>QueryLens</code> that can be used to get a query with a …\nEquivalent to <code>Self::transmute_lens</code> but also includes a …\nSends a “global” [<code>Trigger</code>] without any targets. This …\nSends a [<code>Trigger</code>] for the given targets. This will run any …\nTries to add a <code>Bundle</code> of components to the entity.\nReturns the <code>TypeId</code> of the underlying system type.\nReturns the <code>TypeId</code> of the underlying system type.\nUpdate the system’s archetype component <code>Access</code>.\nUpdates the state’s internal view of the <code>World</code>’s …\nUpdates the state’s internal view of the <code>world</code>’s …\nReturns a <code>Command</code> which executes this <code>EntityCommand</code> for …\nReturns a <code>Command</code> which executes this <code>EntityCommand</code> for …\nA shorthand for writing <code>&amp;&#39;static T</code>.\n<code>Commands</code> with <code>&#39;static</code> lifetimes.\nA <code>Query</code> with <code>&#39;static</code> lifetimes.\nA <code>Res</code> with <code>&#39;static</code> lifetimes.\nA <code>ResMut</code> with <code>&#39;static</code> lifetimes.\nA shorthand for writing <code>&amp;&#39;static mut T</code>.\nA <code>World</code> mutation.\nDensely and efficiently stores a queue of heterogenous …\nA <code>World</code> reference that disallows structural ECS changes. …\nProvides mutable access to a single entity and all of its …\nA read-only reference to a particular <code>Entity</code> and all of …\nA mutable reference to a particular <code>Entity</code>, and the entire …\nA view into a single entity and component in a world, …\nProvides mutable access to a single entity and some of its …\nProvides read-only access to a single entity and some of …\nCreates an instance of the type this trait is implemented …\nInternal components used by bevy with a fixed component id.\n<code>ComponentId</code> for <code>OnInsert</code>\n<code>ComponentId</code> for <code>OnRemove</code>\nAn occupied entry.\nA view into an occupied entry in a <code>EntityWorldMut</code>. It is …\nTrigger emitted when a component is added to an entity.\nTrigger emitted when a component is inserted on to to an …\nTrigger emitted when a component is removed from an entity.\nAn iterator that spawns a series of entities and returns …\nA vacant entry.\nA view into a vacant entry in a <code>EntityWorldMut</code>. It is part …\nStores and exposes operations on entities, components, …\nA unique identifier for a <code>World</code>.\nReturns a reference to the underlying <code>Access</code>.\nReturns a reference to the underlying <code>Access</code>.\nAdds the specified <code>Schedule</code> to the world. The schedule can …\nIgnore system order ambiguities caused by conflicts on …\nIgnore system order ambiguities caused by conflicts on …\nProvides in-place mutable access to an occupied entry.\nTake all commands from <code>other</code> and append them to <code>self</code>, …\nApplies this command, causing it to mutate the provided …\nExecute the queued <code>Command</code>s in the world after applying …\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nRetrieves this world’s <code>Archetypes</code> collection.\nGets read-only access to all of the entity’s components.\nGets read-only access to all of the entity’s components.\nCreates a new <code>UnsafeWorldCell</code> view with complete …\nCreates a new <code>UnsafeWorldCell</code> view with only read access …\nRetrieves this world’s <code>Bundles</code> collection.\nReads the current change tick of this world.\nIterates all component change ticks and clamps any older …\nRemoves all components associated with the entity.\nRuns both <code>clear_entities</code> and <code>clear_resources</code>, invalidating …\nDespawns all entities in this <code>World</code>.\nClears all resources in this <code>World</code>.\nClears the internal component tracker state.\nCreates a <code>Commands</code> instance that pushes to the world’s …\nCreates a new <code>Commands</code> instance that writes to the world’…\nReturns the <code>ComponentId</code> of the given <code>Component</code> type <code>T</code>.\nReturns an iterator over the component ids that are …\nRetrieves this world’s <code>Components</code> collection.\nReturns an iterator over the component ids that are …\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if a resource of type <code>R</code> exists. Otherwise …\nReturns <code>true</code> if a resource of type <code>R</code> exists. Otherwise …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nDespawns the current entity.\nDespawns the given <code>entity</code>, if it exists. This will also …\nRetrieves this world’s <code>Entities</code> collection.\nRetrieves this world’s <code>Entities</code> collection mutably.\nRetrieves an <code>EntityRef</code> that exposes read-only operations …\nRetrieves an <code>EntityMut</code> that exposes read and write …\nRetrieves an <code>EntityWorldMut</code> that exposes read and write …\nGets an Entry into the world for this entity and component …\nContains error types returned by bevy’s schedule.\nEnsures any commands triggered by the actions of Self are …\nCalls both <code>World::flush_entities</code> and <code>World::flush_commands</code>.\nApplies any commands in the world’s internal <code>CommandQueue</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using data from the given <code>World</code>.\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets a reference to the component in the entry.\nGets access to the component of type <code>T</code> for the current …\nRetrieves a reference to the given <code>entity</code>’s <code>Component</code> of …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets the component of the given <code>ComponentId</code> from the …\nGets the component of the given <code>ComponentId</code> from the …\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves an immutable untyped reference to the given …\nGets the component of the given <code>ComponentId</code> from the …\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves an <code>EntityRef</code> that exposes read-only operations …\nRetrieves an <code>EntityMut</code> that exposes read and write …\nRetrieves an <code>EntityWorldMut</code> that exposes read and write …\nGets an <code>EntityRef</code> for multiple entities at once.\nGets an <code>EntityRef</code> for multiple entities at once, whose …\nGets mutable access to multiple entities, whose number is …\nGets mutable access to multiple entities, contained in a […\nGets mutable access to multiple entities.\nRetrieves a mutable reference to the given <code>entity</code>’s …\nGets mutable access to the component of type <code>T</code> for the …\nGets mutable access to the component of type <code>T</code> for the …\nGets a mutable reference to the component in the entry.\nGets mutable access to the component of type <code>T</code> for the …\nRetrieves a mutable reference to the given <code>entity</code>’s …\nRetrieves a mutable untyped reference to the given <code>entity</code>…\nGets a <code>MutUntyped</code> of the component of the given <code>ComponentId</code>…\nGets a <code>MutUntyped</code> of the component of the given <code>ComponentId</code>…\nGets a <code>MutUntyped</code> of the component of the given <code>ComponentId</code>…\nRetrieves a mutable untyped reference to the given <code>entity</code>…\nGets a <code>!Send</code> resource to the resource with the id …\nGets a <code>!Send</code> resource to the resource with the id …\nGets a <code>!Send</code> resource to the resource with the id …\nGets a reference to the non-send resource of the given …\nGets a mutable reference to the non-send resource of the …\nGets a mutable reference to the non-send resource of the …\nReturns an <code>EntityWorldMut</code> for the given <code>entity</code> (if it …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets a reference to the resource of the given type if it …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nRetrieves the change ticks for the given resource.\nRetrieves the change ticks for the given <code>ComponentId</code>.\nGets a mutable reference to the resource of the given type …\nGets a mutable reference to the resource of the given type …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a mutable reference to the resource of type <code>T</code> if it …\nGets a reference including change detection to the …\nReturns the ID of the current entity.\nReturns the ID of the current entity.\nReturns the ID of the current entity.\nRetrieves this <code>World</code>’s unique ID\nReturns the ID of the current entity.\nReturns the ID of the current entity.\nIncrements the world’s current change tick and returns …\nInitializes all of the components in the given <code>Bundle</code> and …\nInitializes a new <code>Component</code> type and returns the …\nInitializes a new <code>Component</code> type and returns the …\nInitializes a new non-send resource and returns the …\nInitializes a new resource and returns the <code>ComponentId</code> …\nAdds a <code>Bundle</code> of components to the entity.\nReplaces the component of the entry.\nInserts the component into the <code>VacantEntry</code> and returns a …\nInserts a dynamic <code>Component</code> into the entity.\nInserts a dynamic <code>Bundle</code> into the entity.\nReplaces the component of the entry, and returns an …\nInserts the component into the <code>VacantEntry</code> and returns an …\nInserts a new <code>!Send</code> resource with the given <code>value</code>. Will …\nInserts a new non-send resource with the given <code>value</code>.\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, either spawns …\nInserts a new resource with the given <code>value</code>.\nInserts a new resource with the given <code>value</code>. Will replace …\nReturns the components of an <code>Entity</code> through <code>ComponentInfo</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nConsumes <code>self</code> and gets the component of the given …\nConsumes <code>self</code> and gets the component of the given …\nConsumes self and gets mutable access to the component of …\nConsumes <code>self</code> and gets mutable access to the component of …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConsumes self and gets mutable access to the component of …\nConsumes <code>self</code> and gets a [<code>MutUntyped&lt;&#39;w&gt;</code>] of the component …\nConsumes <code>self</code> and gets a [<code>MutUntyped&lt;&#39;w&gt;</code>] of the component …\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nConsumes <code>self</code> and gets access to the component of type <code>T</code> …\nReturns this entity’s <code>World</code>, consuming itself.\nReturns false if there are any commands in the queue\nReturns <code>true</code> if a resource of type <code>R</code> exists and was added …\nReturns <code>true</code> if a resource with id <code>component_id</code> exists and …\nReturns <code>true</code> if a resource of type <code>R</code> exists and was …\nReturns <code>true</code> if a resource with id <code>component_id</code> exists and …\nReturns an <code>Entity</code> iterator of current entities.\nReturns a mutable iterator over all entities in the <code>World</code>.\nIterates over all resources in the world.\nMutably iterates over all resources in the world.\nWhen called from within an exclusive system (a <code>System</code> that …\nSets <code>World::last_change_tick()</code> to the specified value …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets an <code>EntityRef</code> for multiple entities at once.\nGets mutable access to multiple entities at once.\nCreates a new empty <code>World</code>.\nCreate a new, unique <code>WorldId</code>. Returns <code>None</code> if the supply …\nGets an immutable reference to the non-send resource of …\nGets a mutable reference to the non-send resource of the …\nGets a mutable reference to the non-send resource of the …\nCreates an <code>Observer</code> listening for events of type <code>E</code> …\nSpawn a “global” <code>Observer</code> and returns it’s <code>Entity</code>.\nEnsures the entry has this component by inserting the …\nEnsures the entry has this component by inserting the …\nEnsures the entry has this component by inserting the …\nPush a <code>Command</code> onto the queue.\nReturns <code>Query</code> for the given <code>QueryState</code>, which is used to …\nReturns <code>QueryState</code> for the given <code>QueryData</code>, which is used …\nReturns <code>QueryState</code> for the given filtered <code>QueryData</code>, which …\nReads the current change tick of this world.\nReborrow self as a new instance of <code>DeferredWorld</code>\nReturns a new instance with a shorter lifetime. This is …\nReturns a new instance with a shorter lifetime. This is …\nSimilar to <code>Self::register_system</code>, but allows passing in a …\nReturns a mutable reference to the <code>ComponentHooks</code> for a …\nReturns a mutable reference to the <code>ComponentHooks</code> for a …\nRegisters a system and returns a <code>SystemId</code> so it can later …\nRemoves any components in the <code>Bundle</code> from the entity.\nRemoves a dynamic <code>Component</code> from the entity if it exists.\nRemoves the resource of a given type, if it exists. …\nRemoves a <code>!Send</code> resource from the world and returns it, if …\nRemoves the resource of a given type and returns it, if it …\nRemoves the resource of a given type, if it exists. …\nRemoves a registered system and returns the system, if it …\nReturns an iterator of entities that had components of …\nRetrieves this world’s <code>RemovedComponentEvents</code> collection\nReturns an iterator of entities that had components with …\nGets a reference to the resource of the given type\nGets a mutable reference to the resource of the given type\nGets a mutable reference to the resource of the given type\nGets a reference to the resource of the given type\nTemporarily removes the requested resource from this <code>World</code>…\nRemoves any components except those in the <code>Bundle</code> from the …\nRuns the <code>Schedule</code> associated with the <code>label</code> a single time.\nRun stored systems by their <code>SystemId</code>. Before running a …\nRun a stored chained system by its <code>SystemId</code>, providing an …\nTemporarily removes the schedule associated with <code>label</code> …\nSends an <code>Event</code>. This method returns the ID of the sent …\nSends an <code>Event</code>. This method returns the ID of the sent …\nSends a batch of <code>Event</code>s from an iterator. This method …\nSends a batch of <code>Event</code>s from an iterator. This method …\nSends the default value of the <code>Event</code> of type <code>E</code>. This …\nSends the default value of the <code>Event</code> of type <code>E</code>. This …\nSpawns a new <code>Entity</code> with a given <code>Bundle</code> of components and …\nSpawns a batch of entities with the same component <code>Bundle</code> …\nSpawns a new <code>Entity</code> and returns a corresponding …\nRetrieves this world’s <code>Storages</code> collection.\nRemoves all components in the <code>Bundle</code> from the entity and …\nRemoves the component from the entry and returns it.\nSends a “global” [<code>Trigger</code>] without any targets.\nTriggers the given <code>event</code>, which will run any observers …\nSends a [<code>Trigger</code>] with the given <code>targets</code>.\nTriggers the given <code>event</code> for the given <code>targets</code>, which will …\nAttempts to run the <code>Schedule</code> associated with the <code>label</code> a …\nTemporarily removes the schedule associated with <code>label</code> …\nContains types that allow disjoint mutable access to a …\nUpdates the internal entity location to match the current …\nGets read-only access to the world that the current entity …\nReturns this entity’s world.\nGives mutable access to this entity’s <code>World</code> in a …\nThe error type returned by <code>World::try_run_schedule</code> if the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA interior-mutable reference to a particular <code>Entity</code> and …\nVariant of the <code>World</code> where resource and component accesses …\nReturns the archetype that the current entity belongs to.\nRetrieves this world’s <code>Archetypes</code> collection.\nRetrieves this world’s <code>Bundles</code> collection.\nGets the current change tick of this world.\nRetrieves this world’s <code>Components</code> collection.\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component with …\nRetrieves this world’s <code>Entities</code> collection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves an <code>UnsafeEntityCell</code> that exposes read and write …\nSafety\nRetrieves a mutable untyped reference to the given <code>entity</code>…\nGets a reference to the non-send resource of the given …\nGets a <code>!Send</code> resource to the resource with the id …\nGets a mutable reference to the non-send resource of the …\nGets a <code>!Send</code> resource to the resource with the id …\nSafety\nGets a reference to the resource of the given type if it …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a mutable reference to the resource of the given type …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a reference including change detection to the …\nRetrieves this world’s unique ID.\nReturns the ID of the current entity.\nIncrements the world’s current change tick and returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn self into a <code>DeferredWorld</code>\nReturns the <code>Tick</code> indicating the last time that …\nGets metadata indicating the location where the current …\nRetrieves this world’s collection of removed components.\nProvides unchecked access to the internal data stores of …\nGets a reference to the <code>&amp;World</code> this <code>UnsafeWorldCell</code> …\nGets the world that the current entity belongs to.\nGets a reference to the <code>World</code> this <code>UnsafeWorldCell</code> belong …\nGets a mutable reference to the <code>World</code> this <code>UnsafeWorldCell</code> …")