searchState.loadedDescShard("time", 0, "Simple time handling.\nISO 8601 time duration with nanosecond precision. This …\nRepresents error when converting <code>Duration</code> to/from a …\nAn opaque structure representing a moment in time.\nA structure representing a moment in time.\nA record specifying a time value in seconds and …\nHolds a calendar date and time broken down into its …\nA wrapper around a <code>Tm</code> and format string that implements …\nThe resulting Tm is in UTC.\nReturns a TmFmt that outputs according to the <code>asctime</code> …\nReturns the specified time in the local timezone\nReturns the specified time in UTC\nAdd two durations, returning <code>None</code> if overflow occurred.\nSubtract two durations, returning <code>None</code> if overflow …\nReturns a TmFmt that outputs according to the <code>asctime</code> …\nMakes a new <code>Duration</code> with given number of days. Equivalent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>time::Duration</code> object from <code>std::time::Duration</code>\nReturns the current time as a <code>timespec</code> containing the …\nMakes a new <code>Duration</code> with given number of hours. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the duration equals <code>Duration::zero()</code>.\nThe maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.\nMakes a new <code>Duration</code> with given number of microseconds.\nMakes a new <code>Duration</code> with given number of milliseconds.\nThe minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.\nMakes a new <code>Duration</code> with given number of minutes. …\nMakes a new <code>Duration</code> with given number of nanoseconds.\nReturns the current time in the local timezone\nReturns a <code>PreciseTime</code> representing the current moment in …\nReturns a <code>SteadyTime</code> representing the current moment in …\nReturns the current time in UTC\nReturns the total number of whole days in the duration.\nReturns the total number of whole hours in the duration.\nReturns the total number of whole microseconds in the …\nReturns the total number of whole milliseconds in the …\nReturns the total number of whole minutes in the duration.\nReturns the total number of whole nanoseconds in the …\nReturns the total number of whole seconds in the duration.\nReturns the total number of whole weeks in the duration.\nReturns the current value of a high-resolution performance …\nReturns the current value of a high-resolution performance …\nReturns a TmFmt that outputs according to RFC 3339. RFC …\nReturns a TmFmt that outputs according to RFC 822.\nReturns a TmFmt that outputs according to RFC 822 with …\nMakes a new <code>Duration</code> with given number of seconds. Panics …\nRuns a closure, returning the duration of time it took to …\nFormats the time according to the format string.\nFormats the time according to the format string.\nParses the time from the string according to the format …\nThe resulting Tm is in UTC.\nHours after midnight - [0, 23]\nDaylight Saving Time flag.\nDay of the month - [1, 31]\nMinutes after the hour - [0, 59]\nMonths since January - [0, 11]\nNanoseconds after the second - [0, 109 - 1]\nSeconds after the minute - [0, 60]\nIdentifies the time zone that was used to compute this …\nDays since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, …, 6 …\nDays since January 1 - [0, 365]\nYears since 1900\nReturns a <code>Duration</code> representing the span of time from the …\nConvert time to the local timezone\nCreates a <code>std::time::Duration</code> object from <code>time::Duration</code>\nConvert time to the seconds from January 1, 1970\nConvert time to the UTC\nMakes a new <code>Duration</code> with given number of weeks. …\nA duration where the stored seconds and nanoseconds are …")