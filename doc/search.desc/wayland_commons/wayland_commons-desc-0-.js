searchState.loadedDescShard("wayland_commons", 0, "Common definitions for wayland\nSet of events associated to this interface\nThe description of a wayland interface\nWire representation of this MessageGroup\nThe wrapper type for ObjectMap allowing the mapping of …\nA group of messages\nName of this interface\nAn empty enum representing a MessageGroup with no messages\nSet of requests associated to this interface\nStores a value in a threadafe container that only lets you …\nMaximum supported version of this interface\nBuild a C representation of this message\nPointer to the C representation of this interface\nRetrieve the child <code>Object</code> associated with this message if …\nDebugging helpers to handle <code>WAYLAND_DEBUG</code> env variable.\nFilter\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a message from its raw representation\nConstruct a message of this group from its C representation\nAccess the underlying value\nMutably access the underlying value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn this message into its raw representation\nWhether this message is a destructor\nWayland objects map\nCreate a new ThreadGuard wrapper\nThe opcode of this message\nThe minimal object version for which this message exists\nCreates a <code>SmallVec</code> containing the arguments.\nWayland socket manipulation\nTry to access the underlying value\nTry to mutably access the underlying value\nVarious utilities used for other implementations\nTypes and routines used to manipulate arguments from the …\nPrint the dispatched message to stderr in a following …\nPrint the send message to stderr in a following format:\nHolder of global dispatch-related data\nAn event filter\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess the dispatch data knowing its type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new filter from given closure\nReborrows this <code>DispatchData</code> to create a new one with the …\nSend a message to this filter\nWrap a mutable reference\nThe representation of a protocol object\nA holder for the object store of a connection\nA trait representing the metadata a wayland implementation …\nLimit separating server-created from client-created …\nCreate the metadata for a child object\nA function which, from an opcode, a version, and the Meta, …\nA function which, from an opcode, a version, and the Meta, …\nAllocate a new id for an object in the client namespace\nCreate an optional <code>Object</code> corresponding to the possible …\nDescription of the events of this object\nFind an object in the store\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an Object corresponding to given interface and …\nInsert given object for given id\nInterface name of this object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether this object is of given interface\nMetadata associated to this object (ex: its event queue …\nCreate a new empty object map\nCreate a placeholder object that will be filled-in by the …\nRemove an object from the store\nCreate an optional <code>Object</code> corresponding to the possible …\nDescription of the requests of this object\nAllocate a new id for an object in the server namespace\nVersion of this object\nMutably access an object of the map\nMutably access all objects of the map in sequence\nAn adapter around a raw Socket that directly handles …\nMaximum number of bytes that can be sent in a single …\nMaximum number of FD that can be sent in a single socket …\nA wayland socket\nTry to fill the incoming buffers of this socket, to prepare\nFlush the contents of the outgoing buffer into the socket\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet direct access to the underlying socket\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve ownership of the underlying Socket\nWrap a Socket into a Buffered Socket\nRetrieve the current value of the requested …\nReceive a single message from the socket\nRead and deserialize messages from the socket\nRead and deserialize a single message from the incoming …\nSend a single message to the socket\nWrite a message to the outgoing buffer\nA wrapper for user data, able to store any type, and …\nA storage able to store several values of <code>UserData</code> of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to access the wrapped user data\nAttempt to access the wrapped user data of a given type\nInsert a value in the map if it is not already there\nInsert a value in the map if it is not already there\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new UserData instance\nCreate a new map\nSets the UserData to a given value\nSets the UserData to a given threadsafe value\nEnum of possible argument as recognized by the wire, …\nEnum of possible argument types as recognized by the wire\nVec\nVec\nThe buffer is too small to hold the message contents\nThe message contains a FD that could not be dup-ed\nRawFd\nRawFd\nfixed point, 1/256 precision\nfixed point, 1/256 precision\ni32\ni32\nThe message is malformed and cannot be parsed\nA wire message\nWire metadata of a given message\nError generated when trying to deserialize a message from …\nError generated when trying to serialize a message into …\nMore data is needed to deserialize the message\nThe message references a FD but the buffer FD is empty\nid of a newly created wayland object\nid of a newly created wayland object\nid of a wayland object\nid of a wayland object\nCString\nCString\nu32\nu32\nArguments of the message\nWhether this message is a destructor\nDuplicate a <code>RawFd</code> and set the CLOEXEC flag on the copy\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse a single wayland message with the given …\nRetrieve the type of a given argument instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of this message\nOpcode of the message\nID of the object sending this message\nSignature of the message\nMinimum required version of the interface\nSerialize the contents of this message into provided …")