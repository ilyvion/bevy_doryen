searchState.loadedDescShard("nonmax", 0, "GitHub CI Status nonmax on crates.io nonmax docs\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nGets non-max with maximum possible value (which is maximum …\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nAn integer that is known not to equal its maximum value.\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nGets non-max with the value one (1)\nAn error type returned when an integer cannot be parsed …\nAn error type returned when a checked integral type …\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nGets non-max with the value zero (0)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max if the given value is not the maximum\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.\nCreates a new non-max without checking the value.")