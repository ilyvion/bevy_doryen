searchState.loadedDescShard("image", 0, "Overview\nPixel is 8-bit alpha\nAnimationDecoder trait\nAn Image in AVIF format.\nBGR colors\nPixel contains 8-bit B, G and R channels\nPixel contains 8-bit B, G and R channels\nBGR colors + alpha channel\nPixel is 8-bit BGR with an alpha channel\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nColorType for this pixel format\nAn enumeration over supported color types and bit depths\nAn Image in DDS Format\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nEach pixel in this image is 8-bit Bgr\nEach pixel in this image is 8-bit Bgr with alpha\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nAn enumeration of supported image formats for encoding.\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nUnderlying image type. This is mainly used by SubImages in …\nUnderlying image type. This is mainly used by SubImages in …\nAn Image in JPEG Format\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nGrayscale colors\nGrayscale colors + alpha channel\nA generalized pixel.\nThe type of pixel.\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in PNG Format\nAn Image in general PNM Format\nPrimitive trait from old stdlib\nRepresents the progress of an image operation.\nThe type of reader produced by <code>into_reader</code>.\nRGB colors\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe underlying subpixel type.\nAn Image in TGA Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nA value for signalling an error: An unsupported format was …\nAn Image in WEBP Format\nAdjust the contrast of this image. <code>contrast</code> is the amount …\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nReturn a reference to an 8bit BGR image\nReturn a reference to an 8bit BGRA image\nGet the bytes of this value.\nReturn this image’s pixels as a native endian byte slice.\nReturn a view on the raw sample buffer.\nReturn a mutable view on the raw sample buffer.\nReturn a view on the raw sample buffer for 16 bit per …\nReturn a view on the raw sample buffer for 8 bit per …\nReturn a reference to an 16bit Grayscale image\nReturn a reference to an 8bit Grayscale image\nReturn a reference to an 16bit Grayscale image with an …\nReturn a reference to an 8bit Grayscale image with an …\nReturn a mutable reference to an 8bit BGR image\nReturn a mutable reference to an 8bit RGBA image\nReturn a mutable reference to an 16bit Grayscale image\nReturn a mutable reference to an 8bit Grayscale image\nReturn a mutable reference to an 16bit Grayscale image …\nReturn a mutable reference to an 8bit Grayscale image with …\nReturn a mutable reference to an 16bit RGB image\nReturn a mutable reference to an 8bit RGB image\nReturn a mutable reference to an 16bit RGBA image\nReturn a mutable reference to an 8bit RGBA image\nReturns the underlying raw buffer\nReturn a reference to an 16bit RGB image\nReturn a reference to an 8bit RGB image\nReturn a reference to an 16bit RGBA image\nReturn a reference to an 8bit RGBA image\nReturns the number of bits contained in a pixel of …\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nDEPRECATED: This method will be removed. Blend the pixel …\nPut a pixel at location (x, y), taking into account alpha …\nDEPRECATED: Use iterator <code>pixels_mut</code> to blend the pixels …\nPerforms a Gaussian blur on this image. <code>sigma</code> is a measure …\nThe bounding rectangle of this image.\nBrighten the pixels of this image. <code>value</code> is the amount to …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nReturns the image buffer\nReturns a mutable image buffer\nReturns the number of bytes contained in a pixel of …\nReturn if the ImageFormat can be decoded by the lib.\nReturn if the ImageFormat can be encoded by the lib.\nChange the coordinates of this subimage.\nReturns the number of channels of this pixel type.\nReturns the number of channels of this pixel type.\nReturns the number of color channels that make up this …\nGet the number of channels for colors of this type.\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nEncoding and decoding for various image file formats.\nSteps through the iterator from the current frame until …\nReturn this image’s color type.\nReturns a string that can help to interpret the meaning …\nReturns a string that can help to interpret the meaning …\nReturns the color type of the image data produced by this …\nReturns the ColorType for this pixel format\nReturns the ColorType for this pixel format\nExamples\nCopies all of the pixels from another image into this …\nCopies all of the pixels from another image into this …\nCopies all of the pixels from one part of this image to …\nCopies all of the pixels from one part of this image to …\nReturn a cut-out of this image delimited by the bounding …\nReturn a cut-out of this image delimited by the bounding …\nA measure of completed decoding.\nDelay of this frame\nReturns a tuple containing the width and height of the …\nThe width and height of this image.\nThe width and height of this image.\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the rows of the image. The iterator yields …\nEnumerates over the rows of the image. The iterator yields …\nContains detailed error representation.\nExpands a color palette by re-using the existing buffer. …\nExpands a color palette by re-using the existing buffer. …\nReturn a list of applicable extensions for this format.\nFilters this image with the specified 3x3 kernel.\nImage representations for ffi.\nFlip this image horizontally\nFlip this image vertically\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nDecodes an encoded image into a dynamic image.\nReturn the image format specified by a path’s file …\nConstructs a new ImageBuffer by repeated application of …\nCreate a delay from a ratio of milliseconds.\nContructs a new frame\nReturn the image format specified by the path’s file …\nConstructs a new ImageBuffer by copying a pixel\nContructs a buffer from a generic container (for example a …\nConvert from a duration, clamped between 0 and an …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nCreates an image buffer out of an existing buffer. Returns …\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the pixel at location <code>(x, y)</code>\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGets a reference to the mutable pixel at location <code>(x, y)</code>\nDEPRECATED: Do not use is function: It is unimplemented!\nReturn a grayscale version of this image.\nGuess image format from memory block\nReturns if there is an alpha channel.\nReturns false if the color scheme is grayscale, true …\nThe height of this image.\nThe height of this image.\nThe height of this image.\nHue rotate the supplied image. <code>value</code> is the degrees to …\nRead the dimensions of the image located at the specified …\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nReturns true if this x, y coordinate is contained inside …\nReturns a reference to the underlying image.\nReturns a mutable reference to the underlying image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the image and returns a BGR image.\nConsume the image and returns a BGR image.\nConsume the image and returns a BGRA image.\nConsume the image and returns a BGRA image.\nReturns the image buffer\nReturn this image’s pixels as a byte vector. If the …\nReturn the raw sample buffer with its stride an dimension …\nConsume the decoder producing a series of frames.\nConsume the image and returns a Luma image.\nConsume the image and returns a Luma image.\nConsume the image and returns a Luma image.\nConsume the image and returns a LumaA image.\nConsume the image and returns a LumaA image.\nConsume the image and returns a LumaA image.\nReturns the underlying raw buffer\nReturns a reader that can be used to obtain the bytes of …\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsumes the image buffer and returns the underlying data …\nInvert this pixel\nInvert the colors of this image. This method operates …\nInput and output of images.\nReturns the x offset\nCreate a new image from a Reader\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nCreates a new <code>Frames</code> from an implementation specific …\nConstruct a new subimage The coordinates set the position …\nContructs a new frame without any delay.\nCreates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.\nCreates a dynamic image backed by a buffer of BGR pixels.\nCreates a dynamic image backed by a buffer of BGRA pixels.\nCreates a dynamic image backed by a buffer of grey pixels.\nCreates a dynamic image backed by a buffer of grey pixels.\nCreates a dynamic image backed by a buffer of grey pixels …\nCreates a dynamic image backed by a buffer of grey pixels …\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nThe numerator and denominator of the delay in milliseconds.\nOpen the image located at the path specified. The image’…\nRetuns the color type of the image file before decoding\nRetuns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nReturns an Iterator over the pixels of this image. The …\nReturns an iterator over the pixels of this image. The …\nReturns an iterator over the mutable pixels of this image.\nDecoding and Encoding of PNG Images\nPut a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location <code>(x, y)</code>\nReturns all the bytes in the image.\nReturns all the bytes in the image.\nSame as <code>read_image</code> but periodically calls the provided …\nSame as <code>read_image</code> but periodically calls the provided …\nDecode a rectangular section of the image; see …\nDecode a rectangular section of the image; see …\nDecode a rectangular section of the image, periodically …\nCalculate a measure for remaining decoding work.\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nRotate this image 180 degrees clockwise.\nRotate this image 270 degrees clockwise.\nRotate this image 90 degrees clockwise.\nReturns an iterator over the rows of this image.\nReturns an iterator over the mutable rows of this image.\nGet the format of the buffer when viewed as a matrix of …\nSaves the buffer to a file at the path specified.\nSaves the buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified …\nSaves the buffer to a file at the specified path in the …\nSaves the buffer to a file at the specified path in the …\nReturns the minimum number of bytes that can be …\nReturns the minimum number of bytes that can be …\nReturns a mutable subimage that is a view into this image. …\nReturns a mutable subimage that is a view into this image. …\nScale this image down to fit within a specific size. …\nScale this image down to a specific size. Returns a new …\nConvert this pixel to BGR\nReturns a copy of this image as an BGR image.\nReturns a copy of this image as an BGR image.\nConvert this pixel to BGR with an alpha channel\nReturns a copy of this image as an BGRA image.\nReturns a copy of this image as an BGRA image.\nReturn a copy of this image’s pixels as a byte vector.\nConvert this subimage to an ImageBuffer\nConvert this pixel to luma\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nConvert this pixel to luma with an alpha channel\nReturns a copy of this image as a LumaA image.\nReturns a copy of this image as a LumaA image.\nReturns a copy of this image as a LumaA image.\nConvert this pixel to RGB\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nConvert this pixel to RGB with an alpha channel\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns the y offset\nA measure of all necessary decoding work.\nReturns the total number of bytes in the decoded image.\nReturns the total number of bytes in the decoded image.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y), ignoring bounds …\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y), ignoring bounds checking.\nPerforms an unsharpen mask on this image. <code>sigma</code> is the …\nReturns an subimage that is an immutable view into this …\nReturns an subimage that is an immutable view into this …\nThe width of this image.\nThe width of this image.\nThe width of this image.\nWrites all the bytes in an image to the encoder.\nEncode this image and write it to <code>w</code>\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoding and Encoding of PNG Images\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nHuffman coding compression\nNo processing done, best used for low bit depth greyscale …\nPNG Encoder\nPNG Reader\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nPng Reader\nRun-length encoding compression\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nTurn this into an iterator over the animation frames.\nEncodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the image contains an animation.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code> with …\nThe required color type can not be handled.\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nReturns the image format associated with this error.\nReturn the image format associated with this error.\nReturns the image format associated with this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>UnsupportedError</code> for an image with details on …\nCreate an <code>EncodingError</code> for an image format.\nCreate a <code>DecodingError</code> for an image format.\nConstruct a <code>ParameterError</code> directly from a corresponding …\nConstruct a generic <code>LimitError</code> directly from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>UnsupportedErrorKind</code> of the …\nReturns the corresponding <code>ParameterErrorKind</code> of the error.\nReturns the corresponding <code>LimitErrorKind</code> of the error.\nCreate an <code>EncodingError</code> that stems from an arbitrary error …\nCreate a <code>DecodingError</code> that stems from an arbitrary error …\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nThe color format did not match the channel count.\nGet a mutable reference based version.\nView the samples as a slice.\nGet a reference based version.\nView the samples as a slice.\nView this buffer as an image over some type of pixel.\nInterpret this buffer as a mutable image.\nView this buffer but keep mutability at a sample level.\nTuple of bounds in the order of coordinate inputs.\nTuple of bounds in the order of coordinate inputs.\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nDescribe a column-major image packed in all directions.\nGet the dimensions <code>(channels, width, height)</code>.\nGet the dimensions <code>(channels, width, height)</code>.\nCheck if a buffer of length <code>len</code> is large enough.\nCheck if a buffer of length <code>len</code> is large enough.\nGet a reference on the inner sample descriptor.\nGet a reference on the sample buffer descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to a single sample.\nGet a mutable reference to a selected subpixel if it is …\nGet a mutable reference to a selected sample.\nGet a reference to a single sample.\nGet a reference to a selected subpixel if it is in-bounds.\nGet a reference to a selected subpixel.\nIf there are any samples aliasing each other.\nIf there are any samples aliasing each other.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nMutable portion of the buffer that holds sample values.\nReturn the mutable portion of the buffer that holds sample …\nReturn the mutable buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nCheck that the pixel and the channel index are in bounds.\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nReturn a reference to a single sample at specified …\nResolve the index of a particular sample.\nGet the theoretical position of sample (x, y, channel).\nGet the theoretical position of sample (channel, x, y).\nReturn a mutable reference to a single sample at specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake out the sample buffer.\nTake out the sample buffer.\nCheck if a buffer fulfills the requirements of a normal …\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nCompares the logical preconditions.\nDescribe a row-major image packed in all directions.\nGet a reference on the inner buffer.\nGet a reference on the inner buffer.\nUnderlying linear container holding sample values.\nShrink the image to the minimum of current and given …\nShrink the image to the minimum of current and given …\nShrink the inner image.\nShrink the inner image.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nCopy the data into an owned vector.\nMove the data into an image buffer.\nTry to convert this into an image with mutable pixels.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nCreate a monocolor image from a single pixel.\nColor operations\nCubic Filter\nColor operations\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nImage sampling Performs a Gaussian blur on the supplied …\nColor operations\nFunctions for altering and converting the color of …\nColor operations\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nColor operations\nImage sampling Perform a 3x3 box filter on the supplied …\nAffine transformations Flip an image horizontally\nAffine transformations Flip an image horizontally and put …\nAffine transformations Flip an image horizontally in place.\nAffine transformations Flip an image vertically\nAffine transformations Flip an image vertically and put …\nAffine transformations Flip an image vertically in place.\nReturns the argument unchanged.\nColor operations\nFill the image with a linear horizontal gradient\nColor operations\nColor operations\nCalls <code>U::from(self)</code>.\nColor operations\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nImage sampling Resize the supplied image to the specified …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 270 degrees …\nAffine transformations Rotate an image 270 degrees …\nAffine transformations Rotate an image 90 degrees …\nAffine transformations Rotate an image 90 degrees …\nImage sampling Resize the supplied image to the specific …\nTile an image by repeating it multiple times\nImage sampling Performs an unsharpen mask on the supplied …\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nReturns the argument unchanged.\nConvert the supplied image to grayscale\nDetermine if this implementation of ColorMap overrides the …\nIndicate NeuQuant implements <code>lookup</code>.\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place. <code>value</code> is the …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nCalls <code>U::from(self)</code>.\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nA multi-format image reader.\nRemove the current information on the image format.\nRead the image (replaces <code>load</code>).\nGet the currently determined format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead the image dimensions.\nUnwrap the reader.\nCreate a new image reader without a preset format.\nOpen a file to read, format will be guessed from path.\nSupply the format as which to interpret the read image.\nConstruct a reader with specified format.\nMake a format guess based on the content, replacing it on …\nA Rectangle defined by its top left corner, width and …\nReturns the argument unchanged.\nThe rectangle’s height.\nCalls <code>U::from(self)</code>.\nNEUQUANT Neural-Net quantization algorithm by Anthony …\nShared mathematical utility functions.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nNeural network color quantizer\nReturns the argument unchanged.\nIndicate NeuQuant implements <code>lookup</code>.\nCalls <code>U::from(self)</code>.\nCut value to be inside given range")