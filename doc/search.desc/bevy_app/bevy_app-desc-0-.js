searchState.loadedDescShard("bevy_app", 0, "This crate is about everything concerning the …\nPlugins are being added.\n<code>App</code> is the primary API for writing user applications. It …\nAn event that indicates the <code>App</code> should exit. If one or …\nA strongly-typed class of labels used to identify an <code>App</code>.\nGenerates an impl of the <code>AppLabel</code> trait.\nCleanup has been executed for all plugins added.\nA type representing an unsafe function that returns a …\nAn object safe version of <code>Eq</code>. This trait is automatically …\nGenerates a dynamic plugin entry point function for the …\nThe <code>App</code> experienced an unhandleable error. Holds the exit …\nFinish has been executed for all plugins added.\nRuns first in the schedule.\nRuns first in the <code>FixedMain</code> schedule.\nThe schedule that runs last in <code>FixedMain</code>\nThe schedule that contains systems which only run after a …\nDefines the schedules to be run for the <code>FixedMain</code> …\nThe schedule that runs after the <code>FixedUpdate</code> schedule, for …\nThe schedule that contains logic that must run before …\nThe schedule that contains most gameplay logic.\nA shorthand for <code>Interned&lt;dyn AppLabel&gt;</code>.\nRuns last in the schedule.\nIndicates that the <code>App</code>’s schedule should run repeatedly.\nThe schedule that contains the app logic that is evaluated …\nDefines the schedules to be run for the <code>Main</code> schedule, …\nInitializes the <code>Main</code> schedule, sub schedules, and …\nIndicates that the <code>App</code>’s schedule should run only once.\nAdds sensible panic handlers to Apps. This plugin is part …\nA collection of Bevy app logic and configuration.\nCombines multiple <code>Plugin</code>s into a single unit.\nFacilitates the creation and configuration of a <code>PluginGroup</code>…\nTypes that represent a set of <code>Plugin</code>s.\nPlugins state in the application\nThe schedule that runs once after <code>Startup</code>.\nThe schedule that contains logic that must run after <code>Update</code>…\nThe schedule that runs before <code>Startup</code>.\nThe schedule that contains logic that must run before …\nAll plugins already added are ready.\nRuns the <code>FixedMain</code> schedule in a loop according until all …\nDetermines the method used to run an <code>App</code>’s <code>Schedule</code>.\nConfigures an <code>App</code> to run its <code>Schedule</code> according to a given …\nThe schedule that contains scene spawning.\nThe schedule that runs once when the app starts.\nA secondary application with its own <code>World</code>. These can run …\nThe collection of sub-apps that belong to an <code>App</code>.\n<code>App</code> exited without any problems.\nThe schedule that contains app logic. Ideally containing …\nAdds the plugin <code>Plugin</code> at the end of this …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> after the plugin …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> before the plugin …\nInitializes <code>T</code> event handling by inserting an event queue …\nSee <code>App::add_event</code>.\nAdds a <code>PluginGroup</code> at the end of this <code>PluginGroupBuilder</code>. …\nInstalls a <code>Plugin</code> collection.\nSee <code>App::add_plugins</code>.\nInserts a new <code>schedule</code> under the provided <code>label</code>, …\nSee <code>App::add_schedule</code>.\nAdds one or more systems to the given schedule in this app…\nSee <code>App::add_systems</code>.\nWhen doing ambiguity checking this ignores systems that …\nSee <code>App::allow_ambiguous_component</code>.\nWhen doing ambiguity checking this ignores systems that …\nSee <code>App::allow_ambiguous_resource</code>.\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nConfigures the <code>App</code> to which this plugin is added.\nConfigures the <code>Plugin</code>s that are to be added.\nRuns <code>Plugin::cleanup</code> for each plugin. This is usually …\nRuns after all plugins are built and finished, but before …\nRuns after all plugins are built and finished, but before …\nRuns <code>Plugin::cleanup</code> for each plugin.\nApplies the provided <code>ScheduleBuildSettings</code> to all …\nSee <code>App::configure_schedules</code>.\nConfigures a collection of system sets in the provided …\nSee <code>App::configure_sets</code>.\nDisables a <code>Plugin</code>, preventing it from being added to the …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nClones this <code>AppLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nRuns function <code>f</code> with the <code>Schedule</code> associated with <code>label</code>.\nSee <code>App::edit_schedule</code>.\nCreates a new empty <code>App</code> with minimal default configuration.\nEnables a <code>Plugin</code>.\nCreates a <code>AppExit::Error</code> with a error code of 1.\nExtracts data from <code>world</code> into the app’s world using the …\nRuns <code>Plugin::finish</code> for each plugin. This is usually …\nFinish adding this plugin to the <code>App</code>, once all plugins …\nFinish adding this plugin to the <code>App</code>, once all plugins …\nConsumes the <code>PluginGroupBuilder</code> and builds the contained …\nRuns <code>Plugin::finish</code> for each plugin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>AppExit</code> from a code.\nReturns a vector of references to all plugins of type <code>T</code> …\nSee <code>App::get_added_plugins</code>.\nReturns a reference to the <code>Schedule</code> with the provided <code>label</code>…\nSee <code>App::get_schedule</code>.\nReturns a mutable reference to the <code>Schedule</code> with the …\nSee <code>App::get_schedule_mut</code>.\nReturns a reference to the <code>SubApp</code> with the given label, if …\nReturns a mutable reference to the <code>SubApp</code> with the given …\nSuppress warnings and errors that would result from …\nSee <code>App::ignore_ambiguity</code>.\nInserts the <code>!Send</code> resource into the app if there is no …\nInserts the <code>Resource</code>, initialized with its default value, …\nSee <code>App::init_resource</code>.\nInitializes an empty <code>schedule</code> under the provided <code>label</code>, if …\nSee <code>App::init_schedule</code>.\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nAdds the given <code>schedule</code> after the <code>after</code> schedule\nInserts the <code>!Send</code> resource into the app, overwriting any …\nInserts the <code>Resource</code> into the app, overwriting any …\nSee <code>App::insert_resource</code>.\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nInserts a <code>SubApp</code> with the given label.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns <code>true</code> if <code>self</code> is a <code>AppExit::Error</code>.\nReturns <code>true</code> if the <code>Plugin</code> has already been added.\nSee <code>App::is_plugin_added</code>.\nReturns <code>true</code> if <code>self</code> is a <code>AppExit::Success</code>.\nIf the plugin can be meaningfully instantiated several …\nIf the plugin can be meaningfully instantiated several …\nReturns an iterator over the sub-apps (starting with the …\nReturns a mutable iterator over the sub-apps (starting …\nThe labels to run for the main phase of the <code>Main</code> schedule …\nThe labels to run for the <code>FixedMain</code> schedule (in the order …\nReturns a reference to the main <code>SubApp</code>.\nThe primary sub-app that contains the “main” world.\nReturns a mutable reference to the main <code>SubApp</code>.\nConfigures a name for the <code>Plugin</code> which is primarily used …\nConfigures a name for the <code>Plugin</code> which is primarily used …\nConfigures a name for the <code>PluginGroup</code> which is primarily …\nConfigures a name for the <code>PluginGroup</code> which is primarily …\nCreates a new <code>App</code> with some default structure to enable …\nReturns a default, empty <code>SubApp</code>.\nSpawns an <code>Observer</code> entity, which will watch for and …\nReturns the state of all plugins. This is usually called …\nReturn the state of plugins.\nHas the plugin finished its setup? This can be useful for …\nHas the plugin finished its setup? This can be useful for …\nRegisters a system and returns a <code>SystemId</code> so it can later …\nSee <code>App::register_system</code>.\nRegisters the type <code>T</code> in the <code>TypeRegistry</code> resource, adding …\nSee <code>App::register_type</code>.\nAssociates type data <code>D</code> with type <code>T</code> in the <code>TypeRegistry</code> …\nSee <code>App::register_type_data</code>.\nRemoves the <code>SubApp</code> with the given label, if it exists.\nRuns the <code>App</code> by calling its runner.\nRuns the default schedule.\nA system that runs the fixed timestep’s “main schedule…\nSee <code>RunMode::Loop</code>.\nA system that runs the “main schedule”\nDetermines whether the <code>Schedule</code> is run once or repeatedly.\nSee <code>RunMode::Once</code>.\nSets the value of the given <code>Plugin</code>, if it exists\nSets the value of the given <code>Plugin</code>, if it exists\nSets the value of the given <code>Plugin</code>, if it exists.\nSets the method that will be called by <code>extract</code>.\nSets the function that will be called when the app is run.\nAttempts to determine if an <code>AppExit</code> was raised since the …\nStart a new builder for the <code>PluginGroup</code>.\nThe labels to run for the startup phase of the <code>Main</code> …\nReturns a reference to the <code>SubApp</code> with the given label.\nReturns a reference to the <code>SubApp</code> with the given label.\nOther, labeled sub-apps.\nRuns the default schedules of all sub-apps (starting with …\nRuns the default schedule and updates internal component …\nCalls <code>update</code> for the main sub-app, and then calls <code>extract</code> …\nThe schedule that will be run by <code>update</code>.\nExtract data from the main world into the <code>SubApp</code> with the …\nExtract data from the main world into the <code>SubApp</code> with the …\nReturns a reference to the <code>World</code>.\nReturns a reference to the <code>World</code>.\nReturns a mutable reference to the <code>World</code>.\nReturns a mutable reference to the <code>World</code>.\nThe minimum <code>Duration</code> to wait after a <code>Schedule</code> has …")