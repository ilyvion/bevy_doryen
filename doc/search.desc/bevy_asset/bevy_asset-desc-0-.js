searchState.loadedDescShard("bevy_asset", 0, "Emitted whenever an <code>Asset</code> is added.\nAlways check if assets have meta files. If the meta does …\nThe top level <code>Asset</code> loaded by this <code>AssetLoader</code>.\nAdds asset-related builder methods to <code>App</code>.\nA type erased container for an <code>Asset</code> value that is capable …\nEvents that occur for a specific loaded <code>Asset</code>, such as “…\nA system set where events accumulated in <code>Assets</code> are …\nProvides <code>Handle</code> and <code>UntypedHandle</code> <em>for a specific asset type</em>…\nA unique runtime-only identifier for an <code>Asset</code>. This is …\nA generational runtime-only identifier for a specific <code>Asset</code>…\nAn error that occurs during an <code>Asset</code> load.\nAn event emitted when a specific <code>Asset</code> fails to load.\nLoads an <code>Asset</code> from a given byte <code>Reader</code>. This can accept …\nConfigures how / if meta files will be checked. If an asset…\nRepresents a path to an asset in a “virtual filesystem”…\nProvides “asset” loading and processing functionality. …\nLoads and tracks the state of <code>Asset</code> values from a …\nThe “asset mode” the server is currently in.\nStores <code>Asset</code> values identified by their <code>AssetId</code>.\nA mutable iterator over <code>Assets</code>.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nThe uuid for the default <code>AssetId</code>. It is valid to assign a …\nThe load state of an asset’s dependencies.\nAn error that occurs while deserializing <code>AssetMeta</code>.\nA builder for directly loading nested assets inside a …\nProvides type-erased access to an <code>AssetLoader</code>.\nA “type erased / boxed” counterpart to <code>LoadedAsset</code>. …\nThe type of error which could be encountered by this …\nThe asset failed to load.\nOne or more dependencies have failed to load\nOne or more dependencies have failed to load in this asset…\nA strong or weak handle to a specific <code>Asset</code>. If a <code>Handle</code> …\nThis asset id <em>should</em> never be valid. Assigning a value to …\nA small / efficient runtime identifier that can be used to …\nA small / efficient runtime identifier that can be used to …\nError that occurs when the <code>AssetPath::label</code> section of a …\nError that occurs when the <code>AssetPath::source</code> section of a …\nEncountered an I/O error while loading an asset.\nA context that provides access to assets in <code>AssetLoader</code>s, …\nAn error that occurs when attempting to call […\nThe load state of an asset.\nThe asset has been loaded and has been added to the <code>World</code>\nDependencies have all loaded\nDependencies in this asset’s dependency tree have all …\nThe successful result of an <code>AssetLoader::load</code> call. This …\nA “loaded folder” containing handles for all assets …\nA “loaded asset” containing the untyped handle for an …\nEmitted whenever an <code>Asset</code> has been fully loaded (including …\nThe asset is in the process of loading.\nDependencies are still loading\nDependencies in this asset’s dependency tree are still …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nError that occurs when a path string has an …\nError that occurs when a path string has an …\nEmitted whenever an <code>Asset</code> value is modified.\nA builder for loading nested assets inside a <code>LoadContext</code>.\nNever check if assets have meta files and always use the …\nThe asset has not started loading yet\nThe asset has not started loading yet\nThe asset has not started loading yet\nAn error that occurs when parsing a string type to create …\nOnly look up meta files for the provided paths. The …\nThis server loads processed assets.\nAssets will be “pre-processed”. This enables assets to …\nAn error produced when calling …\nThe recursive load state of an asset’s dependencies.\nType data for the <code>TypeRegistry</code> used to operate on …\nReflect type data struct relating a <code>Handle&lt;T&gt;</code> back to the <code>T</code>…\nEmitted whenever an <code>Asset</code> is removed.\nThe settings type used by this <code>AssetLoader</code>.\nA “strong” reference to a live (or loading) <code>Asset</code>. If …\nThe internal “strong” <code>Asset</code> handle storage for …\nA system set that holds all “track asset” operations.\nCaused when trying to convert an <code>UntypedHandle</code> into a …\nCaused when trying to convert an <code>UntypedAssetId</code> into an …\nThis server loads unprocessed assets.\nLoads assets from their <code>AssetSource</code>’s default <code>AssetReader</code>…\nErrors preventing the conversion of to/from an …\nAn “untyped” / “generic-less” <code>Asset</code> identifier …\nErrors preventing the conversion of to/from an …\nAn untyped version of <code>AssetLoadFailedEvent</code>.\nA builder for directly loading untyped nested assets …\nAn untyped variant of <code>Handle</code>, which internally stores the …\nA builder for loading untyped nested assets inside a …\nEmitted when the last <code>super::Handle::Strong</code> of an <code>Asset</code> is …\nA stable-across-runs / const asset identifier. This will …\nA stable-across-runs / const asset identifier. This will …\nA “weak” reference to an <code>Asset</code>. If a <code>Handle</code> is …\nAdds the given <code>asset</code> and allocates a new strong <code>Handle</code> for …\nEquivalent of <code>Assets::add</code>\nQueues a new asset to be tracked by the <code>AssetServer</code> and …\nInsert an asset similarly to <code>Assets::add</code>.\nQueues a new asset to be tracked by the <code>AssetServer</code> and …\nThis will add the given <code>asset</code> as a “labeled <code>Asset</code>” …\nAdd a <code>LoadedAsset</code> that is a “labeled sub asset” of the …\nA system that applies accumulated asset change events to …\nGets the source asset path for this load context.\nReturns the <code>TypeId</code> of the top-level <code>Asset</code> loaded by the …\nRetrieves the <code>TypeId</code> of the stored <code>Asset</code> type.\nThe <code>TypeId</code> of the asset\nReturns the type name of the top-level <code>Asset</code> loaded by the …\nRetrieves the <code>type_name</code> of the stored <code>Asset</code> type.\nThe <code>TypeId</code> of the <code>Assets&lt;T&gt;</code> resource\nBegins a new labeled asset load. Use the returned …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nClones this into an “owned” value. If internally a …\nCreates a <code>Handle::Weak</code> clone of this <code>Handle</code>, which will …\nCreates an <code>UntypedHandle::Weak</code> clone of this <code>UntypedHandle</code>…\nCloses the writer.\nReturns <code>true</code> if the <code>id</code> exists in this collection. …\nReturns the default meta value for the <code>AssetLoader</code> (erased …\nDeserializes metadata from the input <code>meta</code> bytes into the …\nLoad assets directly, rather than creating handles.\nCast this loaded asset as the given type. If the type does …\nReturns a boxed object from a boxed trait object if the …\nA way to go from a <code>Handle&lt;T&gt;</code> in a <code>dyn Any</code> to a …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nCreates a new <code>embedded</code> asset by embedding the bytes of the …\nReturns the <code>Path</code> for a given <code>embedded</code> asset. This is used …\nEquality comparison for <code>AssetLoaderError::error</code> is not …\nEquality comparison is not full (only through <code>TypeId</code>)\nWhy the asset failed to load.\nWhy the asset failed to load.\nReturns a list of extensions supported by this asset …\nReturns a list of extensions supported by this <code>AssetLoader</code>…\nReturns a list of extensions supported by this <code>AssetLoader</code>…\nThe default file path to use (relative to the project …\n“Finishes” this context by populating the final <code>Asset</code> …\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an opaque <code>u64</code> acquired from <code>AssetIndex::to_bits</code> …\nCreates a new <code>AssetPath</code> from a <code>Path</code>.\nRetrieves a reference to the internal <code>Asset</code> type.\nRetrieves a reference to the internal <code>Asset</code> type, if it …\nRetrieves a reference to the <code>Asset</code> with the given <code>id</code>, if …\nEquivalent of <code>Assets::get</code>\nRetrieves the default <code>AssetLoader</code> for the given <code>Asset</code> …\nRetrieves the default <code>AssetLoader</code> for the given <code>Asset</code> …\nReturns the registered <code>AssetLoader</code> associated with the …\nReturns the registered <code>AssetLoader</code> associated with the …\nReturns the full extension (including multiple ‘.’ …\nReturns an active handle for the given path, if the asset …\nRetrieves an <code>AssetHandleProvider</code> capable of reserving new …\nReturns an active untyped handle for the given path, if …\nReturns all active untyped handles for the given path, if …\nGet a <code>Handle</code> from an <code>AssetId</code>.\nGet an <code>UntypedHandle</code> from an <code>UntypedAssetId</code>. See …\nReturns a handle to an asset of type <code>A</code> with the label <code>label</code>…\nReturns the <code>ErasedLoadedAsset</code> for the given label, if it …\nReturns the <code>ErasedLoadedAsset</code> for the given label, if it …\nRetrieves the main <code>LoadState</code> of a given asset <code>id</code>.\nRetrieves all loads states for the given asset id.\nRetrieves a mutable reference to the <code>Asset</code> with the given …\nEquivalent of <code>Assets::get_mut</code>\nRetrieves an <code>Asset</code> stored for the given <code>id</code> if it exists. …\nReturns the path for the given <code>id</code>, if it has one.\nReturns an active untyped handle for the given path and …\nRetrieves the default <code>AssetLoader</code> for the given path, if …\nReturns an active untyped asset id for the given path, if …\nReturns all active untyped asset IDs for the given path, …\nRetrieves the <code>RecursiveDependencyLoadState</code> of a given …\nRetrieves the <code>AssetSource</code> for the given <code>source</code>.\nUpgrade an <code>AssetId</code> into a strong <code>Handle</code> that will prevent …\nEquivalent of <code>Assets::get_mut</code>, but works with an …\nA system that manages internal <code>AssetServer</code> events, such as …\nThe <code>TypeId</code> of the <code>Handle&lt;T&gt;</code> for this asset\nReturns <code>true</code> if an asset with the label <code>label</code> exists in …\nReturns the <code>AssetId</code> of this <code>Asset</code>.\nReturns the <code>UntypedAssetId</code> for the referenced asset.\nReturns an iterator over the <code>AssetId</code> of every <code>Asset</code> stored …\nEquivalent of <code>Assets::ids</code>\nInitializes the given <code>Asset</code> in the <code>App</code> by:\nInitializes the given loader in the <code>App</code>’s <code>AssetServer</code>.\nInserts the given <code>asset</code>, identified by the given <code>id</code>. If an …\nEquivalent of <code>Assets::insert</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this into an “owned” value. If internally a …\nReturns an <code>AssetId</code> with <code>Self::INVALID_UUID</code>, which <em>should</em> …\nReturns true if the trait object wraps an object of type …\nReturns <code>true</code> if this event is <code>AssetEvent::Added</code> and …\nReturns <code>true</code> if there are no assets in this collection.\nEquivalent of <code>Assets::is_empty</code>\nReturns <code>true</code> if this event is …\nReturns true if the asset and all of its dependencies …\nReturns <code>true</code> if the given <code>id</code> corresponds to an asset that …\nReturns <code>true</code> if this event is <code>AssetEvent::Modified</code> and …\nReturns <code>true</code> if this event is <code>AssetEvent::Removed</code> and …\nReturns <code>true</code> if this is a strong handle.\nReturns <code>true</code> if this event is <code>AssetEvent::Unused</code> and …\nReturns <code>true</code> if this is a weak handle.\nReturns an iterator over the <code>AssetId</code> and <code>Asset</code> ref of …\nIterate over all labels for “labeled assets” in the …\nIterate over all labels for “labeled assets” in the …\nReturns an iterator over the <code>AssetId</code> and mutable <code>Asset</code> ref …\nGets the “sub-asset label”.\nGets the “sub-asset label”.\nCreates a new <code>LoadContext</code> for the given <code>label</code>. The <code>load</code> …\nReturns the number of assets currently stored in the …\nEquivalent of <code>Assets::len</code>\nAsynchronously loads <code>AssetLoader::Asset</code> (and any other …\nAsynchronously loads the asset(s) from the bytes provided …\nRetrieves a handle for the asset at the given path and …\nRetrieves a handle for the asset at the given path and …\nRetrieves a handle for the asset at the given path and …\nLoads the asset at the given <code>path</code> directly. This is an …\nLoads the asset at the given <code>path</code> directly. This is an …\nBegins loading an <code>Asset</code> of type <code>A</code> stored at <code>path</code>. This …\nBegins loading an <code>Asset</code> of type <code>A</code> stored at <code>path</code> while …\nBegins loading an <code>Asset</code> of type <code>A</code> stored at <code>path</code> while …\nLoad an asset similarly to <code>AssetServer::load</code>.\nLoad an asset with settings, similarly to …\nLoads all assets from the specified folder recursively. …\nLoads an “internal” asset by embedding the string …\nLoads an “internal” binary asset by embedding the …\nRetrieves the main <code>LoadState</code> of a given asset <code>id</code>.\nLoad an asset without knowing its type. The method returns …\nAsynchronously load an asset that you do not know the type …\nBegins loading an <code>Asset</code> of type <code>A</code> stored at <code>path</code>. The …\nCreate a builder for loading nested assets in this context.\nHow/If asset meta files should be checked.\nThe “meta transform” for the strong handle. This will …\nReturns the <code>AssetServerMode</code> this server is currently in.\nThe <code>AssetMode</code> to use for this server.\nCreate a new instance of <code>AssetServer</code>. If <code>watch_for_changes</code> …\nCreate a new loaded asset. This will use …\nCreate a new instance of <code>AssetServer</code>. If <code>watch_for_changes</code> …\nReturns an <code>AssetPath</code> for the parent folder of this path, …\nCreates a new <code>AssetPath</code> from a string in the asset path …\nGets the source path for this load context.\nReturns the path if this is (1) a strong handle and (2) …\nReturns the path if this is (1) a strong handle and (2) …\nGets the path to the asset in the “virtual filesystem”.\nThe asset path that was attempted.\nThe asset path that was attempted.\nPreregisters a loader for the given extensions, that will …\nPre-register a loader that will later be added.\nThe default file path to use (relative to the project …\nReads some bytes from the byte stream.\nReads the asset at the given path and returns its bytes\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nLike <code>read()</code>, except it reads into a slice of buffers.\nRetrieves the  <code>RecursiveDependencyLoadState</code> of a given …\nRegisters a new <code>Asset</code> type. <code>Asset</code> types must be registered …\nRegisters the given <code>loader</code> in the <code>App</code>’s <code>AssetServer</code>.\nRegisters the given <code>processor</code> in the <code>App</code>’s <code>AssetProcessor</code>…\nRegisters the asset type <code>T</code> using <code>[App::register]</code>, and adds …\nRegisters the given <code>AssetSourceBuilder</code> with the given <code>id</code>.\nRegisters a new <code>AssetLoader</code>. <code>AssetLoader</code>s must be …\nKicks off a reload of the asset stored at the given path. …\nRemoves (and returns) the <code>Asset</code> with the given <code>id</code>, if it …\nEquivalent of <code>Assets::remove</code>\nRemoves a “sub-asset label” from this <code>AssetPath</code>, if …\nRemoves (and returns) the <code>Asset</code> with the given <code>id</code>, if it …\nReserves a new <code>Handle</code> for an asset that will be stored in …\nReserves a new strong <code>UntypedHandle</code> (with a new …\nResolves a relative asset path via concatenation. The …\nResolves an embedded asset path via concatenation. The …\nRusty Object Notation, a crate used to serialize and …\nSets the default asset processor for the given <code>extension</code>.\nGets the “asset source”, if one was defined. If none …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCast (and take ownership) of the <code>Asset</code> value of the given …\nCast (and take ownership) of the <code>Asset</code> value of the given …\nTakes the “sub-asset label” from this <code>AssetPath</code>, if …\nConvert the <code>AssetIndex</code> into an opaque blob of bits to …\nA system that synchronizes the state of assets in this …\nCreates a new <code>AssetPath</code> from a string in the asset path …\nConverts to a typed Handle. This will panic if the …\nTry to convert this to a “typed” <code>AssetId</code>.\nReturns the <code>TypeId</code> of the <code>AssetLoader</code>.\nReturns the <code>TypeId</code> of the referenced <code>Asset</code>.\nReturns the stored <code>TypeId</code> of the referenced <code>Asset</code>.\nReturns the type name of the <code>AssetLoader</code>.\nConverts to a typed Handle. This will panic if the …\nConverts this to a “typed” <code>AssetId</code>.\nA way to go from a <code>UntypedHandle</code> to a <code>Handle&lt;T&gt;</code> in a …\nConverts to a typed Handle. This will check the type when …\nConverts this to a “typed” <code>AssetId</code>. When compiled in …\nConverts to a typed Handle. This <em>will not check if the </em>…\nConverts this to a “typed” <code>AssetId</code> without checking …\nLoad assets without static type information.\nLoad the asset without providing static type information.\nConverts this to an “untyped” / “generic-less” …\nConverts this <code>Handle</code> to an “untyped” / “generic-less…\nConverts this to an “untyped” / “generic-less” …\nIf set, will override the default “watch for changes” …\nReturns true if the <code>AssetServer</code> watches for changes.\nCreate a new <code>Handle::Weak</code> with the given <code>u128</code> encoding of …\nSpecify the output asset type.\nSpecify the output asset type.\nReturns this asset path with the given label. This will …\nSpecify the reader to use to read the asset data.\nConfigure the settings used to load the asset.\nReturns this asset path with the given asset source. This …\nGets the path to the asset in the “virtual filesystem” …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nAn asset at this path was added.\nA folder at the given path was added.\nAsset metadata at this path was added.\nPerforms read operations on an asset storage. <code>AssetReader</code> …\nErrors that occur while loading assets.\nA collection of unprocessed and processed <code>AssetReader</code>, …\nMetadata about an “asset source”, such as how to …\nA <code>Resource</code> that hold (repeatable) functions capable of …\nAn “asset source change event” that occurs whenever …\nA reference to an “asset source”, which maps to an …\nA collection of <code>AssetSource</code>s.\nA handle to an “asset watcher” process, that will …\nPreforms write operations on an asset storage. <code>AssetWriter</code> …\nErrors that occur while loading assets.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nThe default asset source.\nEquivalent to an <code>AssetReader</code> but using boxed futures, …\nEquivalent to an <code>AssetWriter</code> but using boxed futures, …\nThe HTTP request completed but returned an unhandled HTTP …\nEncountered an I/O error while loading an asset.\nEncountered an I/O error while loading an asset.\nAn error returned when an <code>AssetSource</code> does not exist for a …\nAn error returned when an <code>AssetWriter</code> does not exist for a …\nAn error returned when a processed <code>AssetReader</code> does not …\nAn error returned when a processed <code>AssetWriter</code> does not …\nAn asset at this path was modified.\nAsset metadata at this path was modified.\nA non-default named asset source.\nPath not found.\nAn asset at this path was removed.\nA folder at the given path was removed.\nAsset metadata at this path was removed.\nSomething of unknown type was removed. It is the job of …\nAn asset at this path was renamed.\nA folder at the given path was renamed.\nAsset metadata at this path was renamed.\nAn <code>AsyncRead</code> implementation capable of reading a [<code>&amp;[u8]</code>].\nAn <code>AsyncRead</code> implementation capable of reading a <code>Vec&lt;u8&gt;</code>.\nReturns <code>None</code> if this is <code>AssetSourceId::Default</code> and <code>Some</code> …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nStarts building a new <code>AssetSource</code>.\nBuilds a new <code>AssetSource</code> with the given <code>id</code>. If <code>watch</code> is …\nBuilds a new <code>AssetSources</code> collection. If <code>watch</code> is true, …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nClones into an owned [<code>AssetSourceId&lt;&#39;static&gt;</code>]. This is …\nCloses the writer.\nEquality comparison for <code>AssetReaderError::Io</code> is not full …\nReturn’s this source’s unprocessed event receiver, if …\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis will cause processed <code>AssetReader</code> futures (such as …\nThis will cause processed <code>AssetReader</code> futures (such as …\nGets the <code>AssetSource</code> with the given <code>id</code>, if it exists.\nReturns a builder function for this platform’s default …\nReturns the default non-existent <code>AssetWatcher</code> warning for …\nReturns a builder function for this platform’s default …\nReturns a builder function for this platform’s default …\nGets a mutable builder with the given <code>id</code>, if it exists.\nReturns this source’s id.\nIterates over the <code>AssetSourceId</code> of every <code>AssetSource</code> in …\nInitializes the default <code>AssetSourceBuilder</code> if it has not …\nInserts a new builder with the given <code>id</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is not already an owned / static id, create one. …\nReturns true if the provided path points to a directory.\nReturns true if the provided path points to a directory.\nIterates all asset sources in the collection (including …\nMutably iterates all asset sources in the collection …\nIterates all processed asset sources in the collection …\nMutably iterates all processed asset sources in the …\nCreate a new <code>VecReader</code> for <code>bytes</code>.\nCreate a new <code>SliceReader</code> for <code>bytes</code>.\nCreates a new <code>AssetSourceId</code>\nReturns a builder containing the “platform default source…\nReturn’s this source’s processed event receiver, if …\nReturn’s this source’s processed <code>AssetReader</code>, if it …\nReturn’s this source’s processed <code>AssetWriter</code>, if it …\nReturns a future to load the full file data at the …\nReturns a future to load the full file data at the …\nReads some bytes from the byte stream.\nReturns an iterator of directory entry names at the …\nReturns an iterator of directory entry names at the …\nReads the exact number of bytes required to fill <code>buf</code>.\nReturns a future to load the full file data at the …\nReturns a future to load the full file data at the …\nReads asset metadata bytes at the given <code>path</code> into a <code>Vec&lt;u8&gt;</code>…\nReads asset metadata bytes at the given <code>path</code> into a <code>Vec&lt;u8&gt;</code>…\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nLike <code>read()</code>, except it reads into a slice of buffers.\nReturn’s this source’s unprocessed <code>AssetReader</code>.\nRemoves the asset stored at the given path.\nRemoves the asset stored at the given path.\nRemoves all assets (and directories) in this directory, …\nRemoves all assets (and directories) in this directory, …\nRemoves the directory at the given path, including all …\nRemoves the directory at the given path, including all …\nRemoves the directory at the given path, but only if it is …\nRemoves the directory at the given path, but only if it is …\nRemoves the asset meta stored at the given path. This …\nRemoves the asset meta stored at the given path. This …\nRenames the asset at <code>old_path</code> to <code>new_path</code>\nRenames the asset at <code>old_path</code> to <code>new_path</code>\nRenames the asset meta for the asset at <code>old_path</code> to …\nRenames the asset meta for the asset at <code>old_path</code> to …\nReturns true if the assets in this source should be …\nCreates an adapter which will read at most <code>limit</code> bytes …\nWill use the given <code>reader</code> function to construct processed …\nEnables a warning for the processed source watcher, which …\nWill use the given <code>watcher</code> function to construct processed …\nWill use the given <code>writer</code> function to construct processed …\nWill use the given <code>reader</code> function to construct …\nEnables a warning for the unprocessed source watcher, …\nWill use the given <code>watcher</code> function to construct …\nWill use the given <code>writer</code> function to construct …\nWrites the full asset bytes at the provided path.\nWrites the full asset bytes at the provided path.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites the asset <code>bytes</code> to the given <code>path</code>.\nWrites the asset <code>bytes</code> to the given <code>path</code>.\nWrites the full asset meta bytes at the provided path. …\nWrites the full asset meta bytes at the provided path. …\nWrites the asset meta <code>bytes</code> to the given <code>path</code>.\nWrites the asset meta <code>bytes</code> to the given <code>path</code>.\nLike <code>write()</code>, except that it writes a slice of buffers.\nReturn’s this source’s unprocessed <code>AssetWriter</code>, if it …\nThis field is only relevant if <code>path</code> is determined to be an …\nThe path of the removed asset or folder (undetermined). …\nA <code>Resource</code> that manages “rust source files” in a …\nReturns the argument unchanged.\nInserts a new asset. <code>full_path</code> is the full path (as <code>file</code> …\nInserts new asset metadata. <code>full_path</code> is the full path (as …\nCalls <code>U::from(self)</code>.\nRegisters a <code>embedded</code> <code>AssetSource</code> that uses this …\nI/O implementation for the local filesystem.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the base path of the assets directory, which is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FileAssetIo</code> at a path relative to the …\nCreates a new <code>FileAssetIo</code> at a path relative to the …\nReturns the root directory where assets are loaded from.\nOpens path “gates” for a <code>GatedReader</code>.\nA “gated” reader that will prevent asset reads from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GatedReader</code>, which wraps the given <code>reader</code>. …\nOpens the <code>path</code> “gate”, allowing a <em>single</em> <code>AssetReader</code> …\nAsset data stored in a <code>Dir</code>.\nA clone-able (internally Arc-ed) / thread-safe “in memory…\nIn-memory <code>AssetReader</code> implementation. This is primarily …\nStores either an allocated vec of bytes or a static array …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Dir</code> for the given <code>path</code>.\nAn <code>AssetReader</code> that will prevent asset (and asset …\nAn <code>AsyncRead</code> impl that will hold its asset’s transaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ProcessorGatedReader</code>.\nConfigures how an asset source file should be handled by …\nThis is a minimal counterpart to <code>AssetAction</code> that exists …\nAsset metadata that informs how an <code>Asset</code> should be handled …\nA dynamic type-erased counterpart to <code>AssetMeta</code> that …\nThis is a minimal counterpart to <code>AssetMeta</code> that exists to …\nDo nothing with the asset\nLoad the asset with the given loader and settings See …\nProcess the asset with the given processor and settings. …\nInformation about a dependency used to process an asset. …\nInfo produced by the <code>AssetProcessor</code> for a given processed …\nThis is a minimal counterpart to <code>ProcessedInfo</code> that exists …\nSettings used by the asset system, such as by <code>AssetLoader</code>, …\nHow to handle this asset in the asset system. See …\nDeserializes the given serialized byte representation of …\nReturns a boxed object from a boxed trait object if the …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nReturns a reference to the object within the trait object …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA hash of the asset bytes, the asset .meta data, and the …\nA hash of the asset bytes and the asset .meta data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns true if the trait object wraps an object of type …\nReturns a reference to the <code>AssetLoader</code> settings, if they …\nReturns a mutable reference to the <code>AssetLoader</code> settings, …\nThe version of the meta format being used. This will …\nInformation about the “process dependencies” used to …\nReturns a reference to the <code>ProcessedInfo</code> if it exists.\nInformation produced by the <code>AssetProcessor</code> <em>after</em> …\nReturns a mutable reference to the <code>ProcessedInfo</code> if it …\nSerializes the internal <code>AssetMeta</code>.\nA “background” asset processor that reads asset values …\nA type-erased variant of <code>Process</code> that enables interacting …\nThe processor has finished processing all valid assets and …\nAn error that occurs when initializing the <code>AssetProcessor</code>.\nThe processor is still initializing, which involves …\nA flexible <code>Process</code> implementation that loads the source …\nSettings for the <code>LoadAndSave</code> <code>Process::Settings</code> …\nA flexible <code>Process</code> implementation that loads the source …\nSettings for the <code>LoadTransformAndSave</code> <code>Process::Settings</code> …\nAn error that occurs when validating individual …\nThe <code>AssetLoader</code> that will be used to load the final …\nAsset “processor” logic that reads input asset bytes …\nProvides scoped data access to the <code>AssetProcessor</code>. This …\nAn error that is encountered during <code>Process::process</code>.\nThe (successful) result of processing an asset\nThe final status of processing an asset\nThe processor is currently processing assets.\nThe “current” in memory view of the asset space. This …\nThe current state of the <code>AssetProcessor</code>.\nA “write ahead” logger that helps ensure asset …\nAn error that occurs when reading from the …\nThe configuration / settings used to process the asset. …\nAn error that occurs when validating the …\nAn error that occurs when writing to the …\nThe source bytes of the asset being processed.\nReturns the default type-erased <code>AssetMeta</code> for the …\nDeserialized <code>meta</code> as type-erased <code>AssetMeta</code>, operating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the default processor for the given <code>extension</code>, if …\nReturns the processor with the given <code>processor_type_name</code>, …\nRetrieves the <code>AssetSource</code> for this processor\nRetrieves the current <code>ProcessorState</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens for changes to assets in the source <code>AssetSource</code> …\nLoad the source asset using the <code>L</code> <code>AssetLoader</code> and the …\nThe <code>AssetLoader::Settings</code> for <code>LoadTransformAndSave</code>.\nThe <code>AssetLoader::Settings</code> for <code>LoadAndSave</code>.\nCreates a new <code>AssetProcessor</code> instance.\nThe path of the asset being processed.\nProcesses the asset stored on <code>context</code> in some way using …\nType-erased variant of <code>Process::process</code>.\nRegister a new asset processor.\nThe <code>AssetSaver::Settings</code> for <code>LoadTransformAndSave</code>.\nThe <code>AssetSaver::Settings</code> for <code>LoadAndSave</code>.\nThe “internal” <code>AssetServer</code> used by the <code>AssetProcessor</code>. …\nSet the default processor for the given <code>extension</code>. Make …\nStarts the processor in a background thread.\nThe <code>AssetTransformer::Settings</code> for <code>LoadTransformAndSave</code>.\nReturns a future that will not finish until processing has …\nReturns a future that will not finish until the processor …\nReturns a future that will not finish until the path has …\nThe top level <code>Asset</code> saved by this <code>AssetSaver</code>.\nSaves an <code>Asset</code> of a given <code>AssetSaver::Asset</code> type. …\nA type-erased dynamic variant of <code>AssetSaver</code> that allows …\nThe type of error which could be encountered by this saver.\nThe type of <code>AssetLoader</code> used to load this <code>Asset</code>\nAn <code>Asset</code> (and any labeled “sub assets”) intended to be …\nThe settings type used by this <code>AssetSaver</code>.\nReturns the argument unchanged.\nCreates a new <code>SavedAsset</code> from <code>asset</code> if its internal value …\nCreates a new <code>SavedAsset</code> from the a <code>TransformedAsset</code>\nRetrieves the value of this asset.\nReturns the type-erased labeled asset, if it exists and …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the labeled asset, if it exists and matches this …\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nCalls <code>U::from(self)</code>.\nIterate over all labels for “labeled assets” in the …\nSaves the given runtime <code>Asset</code> by writing it to a byte …\nSaves the given runtime <code>ErasedLoadedAsset</code> by writing it to …\nThe type name of the <code>AssetSaver</code>.\nThe <code>Asset</code> type which this <code>AssetTransformer</code> takes as and …\nThe <code>Asset</code> type which this <code>AssetTransformer</code> outputs.\nTransforms an <code>Asset</code> of a given <code>AssetTransformer::AssetInput</code>…\nThe type of error which could be encountered by this …\nThe settings type used by this <code>AssetTransformer</code>.\nAn <code>Asset</code> (and any “sub assets”) intended to be …\nA labeled sub-asset of <code>TransformedAsset</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TransformedAsset</code> from <code>asset</code> if its internal …\nCreates a new <code>TransformedSubAsset</code> from <code>asset</code> if its …\nRetrieves the value of this asset.\nRetrieves the value of this asset.\nReturns the type-erased labeled asset, if it exists and …\nReturns the type-erased labeled asset, if it exists and …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the labeled asset, if it exists and matches this …\nReturns the labeled asset, if it exists and matches this …\nMutably retrieves the value of this asset.\nMutably retrieves the value of this asset.\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nAdds <code>asset</code> as a labeled sub asset using <code>label</code> and <code>handle</code>\nAdds <code>asset</code> as a labeled sub asset using <code>label</code> and <code>handle</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all labels for “labeled assets” in the …\nIterate over all labels for “labeled assets” in the …\nCreates a new <code>TransformedAsset</code> from <code>asset</code>, transferring …\nTakes the labeled assets from <code>labeled_source</code> and places …\nTransforms the given <code>TransformedAsset</code> to …")