searchState.loadedDescShard("mio", 0, "Mio is a fast, low-level I/O library for Rust focusing on …\nInterest used in registering.\nReturns a <code>Interest</code> set representing priority completion …\nPolls for readiness events on all registered values.\nReturns a <code>Interest</code> set representing readable interests.\nRegisters I/O resources.\nAssociates readiness events with <code>event::Source</code>s.\nReturns a <code>Interest</code> set representing writable interests.\nWaker allows cross-thread waking of <code>Poll</code>.\nAdd together two <code>Interest</code>.\nDeregister an <code>event::Source</code> with the <code>Poll</code> instance.\nReadiness event types and utilities.\nMio’s optional features.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetting started guide.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>Interest</code> contains AIO readiness.\nReturns true if <code>Interest</code> contains LIO readiness.\nReturns true if <code>Interest</code> contains priority readiness.\nReturns true if the value includes readable readiness.\nReturns true if the value includes writable readiness.\nReturn a new <code>Poll</code> handle.\nCreate a new <code>Waker</code>.\nWait for readiness events\nRegister an <code>event::Source</code> with the <code>Poll</code> instance.\nCreate a separate <code>Registry</code> which can be used to register …\nRemoves <code>other</code> <code>Interest</code> from <code>self</code>.\nRe-register an <code>event::Source</code> with the <code>Poll</code> instance.\nCreates a new independently owned <code>Registry</code>.\nUnix only extensions.\nWake up the <code>Poll</code> associated with this <code>Waker</code>.\nA readiness event.\nA collection of readiness events.\n<code>Events</code> iterator.\nAn event source that may be registered with <code>Registry</code>.\nReturns the number of <code>Event</code> values that <code>self</code> can hold.\nClearing all <code>Event</code> values from container explicitly.\nDeregister <code>self</code> from the given <code>Registry</code> instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the event contains AIO readiness.\nReturns <code>true</code> if <code>self</code> contains no <code>Event</code> values.\nReturns true if the event contains error readiness.\nReturns true if the event contains LIO readiness.\nReturns true if the event contains priority readiness.\nReturns true if the event contains read closed readiness.\nReturns true if the event contains readable readiness.\nReturns true if the event contains writable readiness.\nReturns true if the event contains write closed readiness.\nReturns an iterator over the <code>Event</code> values.\nRegister <code>self</code> with the given <code>Registry</code> instance.\nRe-register <code>self</code> with the given <code>Registry</code> instance.\nReturns the event’s token.\nReturn a new <code>Events</code> capable of holding up to <code>capacity</code> …\nAdapter for <code>RawFd</code> providing an <code>event::Source</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnix pipe.\nReceiving end of an Unix pipe.\nSending end of an Unix pipe.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new non-blocking Unix pipe.\nSet the <code>Sender</code> into or out of non-blocking mode.\nSet the <code>Receiver</code> into or out of non-blocking mode.\nExecute an I/O operation ensuring that the socket receives …\nExecute an I/O operation ensuring that the socket receives …")