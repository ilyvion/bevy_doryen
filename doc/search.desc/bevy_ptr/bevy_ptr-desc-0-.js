searchState.loadedDescShard("bevy_ptr", 0, "Bevy Pointer\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nA newtype around <code>NonNull</code> that only allows conversion to …\nTrait that is only implemented for <code>Aligned</code> and <code>Unaligned</code> …\nType-erased Box-like pointer to some unknown type chosen …\nType-erased borrow of some unknown type chosen when …\nType-erased mutable borrow of some unknown type chosen …\nConceptually equivalent to <code>&amp;&#39;a [T]</code> but with length …\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nExtension trait for helper methods on <code>UnsafeCell</code>\nGets a mutable pointer from this owned pointer.\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nReturns a shared reference to the value.\nGets an immutable reference from this mutable reference\nGets an immutable pointer from this owned pointer.\nTransforms this <code>Ptr</code> into an <code>PtrMut</code>\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCreates a dangling pointer with specified alignment. See …\nSafety\nTransforms this <code>Ptr&lt;T&gt;</code> into a <code>&amp;T</code> with the same lifetime\nSafety\nTransforms this <code>PtrMut&lt;T&gt;</code> into a <code>&amp;mut T</code> with the same …\nConsumes the <code>OwningPtr</code> to drop the underlying data of type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndexes the slice without doing bounds checks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes a value and creates an <code>OwningPtr</code> to it while …\nCreates a new <code>ConstNonNull</code> if <code>ptr</code> is non-null.\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nCreates a new <code>ConstNonNull</code>.\nTransforms this <code>PtrMut</code> into an <code>OwningPtr</code>\nReturns a copy of the contained value.\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nGets a <code>PtrMut</code> from this with a smaller lifetime.\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer")