searchState.loadedDescShard("freetype", 0, "Rust wrapper around freetype 2 library\nAn image with four 8-bit channels per pixel, representing …\nAn 8-bit bitmap, generally used to represent anti-aliased …\nA 2-bit per pixel bitmap, used to represent embedded …\nA 4-bit per pixel bitmap, representing embedded …\nAn 8-bit bitmap, representing RGB or BGR decimated glyph …\nAn 8-bit bitmap, representing RGB or BGR decimated glyph …\nA monochrome bitmap, using 1 bit per pixel. Note that …\nThis value is reserved.\nAn enumeration type used to describe the format of pixels …\nA typeless pointer to the bitmap buffer. This value should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe pitch’s absolute value is the number of bytes taken …\nThe pixel mode, i.e., how pixel bits are stored. See …\nThe number of bitmap rows.\nThe number of pixels in bitmap row.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nRepresents a retrieved glyph from the library\nAn enumeration type used to describe the format of a given …\nReturns the argument unchanged.\nCreate a freetype-rs glyph object from c constituent parts\nReturn a glyph’s ‘control box’. The control box …\nCalls <code>U::from(self)</code>.\nGet the underlying c glyph struct (The system actually …\nConvert a given glyph object to a bitmap glyph object.\nTransform a glyph image if its format is scalable.\nA struct encapsulating the space for a glyph within a …\nA description of a given subglyph returned by …\nThis shorthand is, depending on FT_LOAD_IGNORE_TRANSFORM, …\nThe subglyph’s first argument (if any).\nThe subglyph’s second argument (if any).\nThis field is used as a bitmap descriptor when the slot …\nThe bitmap’s left bearing expressed in integer pixels. …\nThe bitmap’s top bearing expressed in integer pixels. …\nThe subglyph flags, see FT_SUBGLYPH_FLAG_XXX.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>GlyphSlot</code> from its constituent C parts\nReturns a glyph object, that is similar to a <code>GlyphSlot</code> but …\nRetrieve a description of a given subglyph. Only use it if …\nThe glyph index of the subglyph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe advance width of the unhinted glyph. Its value is …\nThe advance height of the unhinted glyph. Its value is …\nThe metrics of the last loaded glyph in the slot. The …\nIn freetype, the <code>Outline</code> object is a scalable glyph. This …\nGet a pointer to the underlying c struct\nConvert a given glyph image to a bitmap. It does so by …\nThe subglyph transformation (if any).\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function is used to create a new FreeType library …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen a font file using its pathname. <code>face_index</code> should be …\nSimilar to <code>new_face</code>, but loads file data from a byte array …\nGet the underlying library object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")