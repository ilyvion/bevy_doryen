searchState.loadedDescShard("winit", 0, "Winit is a cross-platform window creation and event loop …\nUI scaling is important, so read the docs for this module …\nThe <code>Event</code> enum and assorted supporting types.\nThe <code>EventLoop</code> struct and assorted supporting types, …\nTypes useful for interacting with a user’s monitors.\nContains traits with platform-specific methods in them.\nThe <code>Window</code> struct and associated types.\nA position represented in logical pixels.\nA size represented in logical pixels.\nA position represented in physical pixels.\nA size represented in physical pixels.\nA position that’s either physical or logical.\nA size that’s either physical or logical.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the scale factor is a normal positive <code>f64</code>.\nAn error whose cause it outside Winit’s control.\nThe operation is not supported by the backend.\nThe error type for when the requested operation is not …\nThe OS cannot perform the operation.\nThe error type for when the OS cannot perform the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe “alt” key.\nIdentifier for a specific analog axis on some device.\nMotion on some analog axis. May report data redundant to …\nThe Backspace key, right over Enter.\nIdentifier for a specific button on some device.\nThe “control” key.\nOn iOS, the force is calibrated so that the same number …\nThe window has been requested to close.\nNotifies when text should be inserted into the editor …\nThe “Compose” key on Linux.\nThe cursor has entered the window.\nThe cursor has left the window.\nThe cursor has moved on the window.\nThe window has been destroyed.\nRepresents raw hardware events that are not associated …\nEmitted when the OS sends an event to a device.\nIdentifier of an input device.\nNotifies when the IME was disabled.\nA file has been dropped into the window.\nDescribes the input state of a key.\nNotifies when the IME was enabled.\nThe Escape key, next to F1.\nDescribes a generic event.\nThe window gained or lost focus.\nDescribes the force of a touch event\nA file is being hovered over the window.\nA file was hovered, but has exited the window.\nDescribes input method events.\nAn event from an input method.\nSent once, immediately after <code>run</code> is called. Indicates that …\n<code>Insert</code>, next to Backspace.\nThe ‘0’ key over the ‘O’ and ‘P’ keys.\nThe ‘1’ key over the letters.\nThe ‘2’ key over the letters.\nThe ‘3’ key over the letters.\nThe ‘4’ key over the letters.\nThe ‘5’ key over the letters.\nThe ‘6’ key over the letters.\nThe ‘7’ key over the letters.\nThe ‘8’ key over the letters.\nThe ‘9’ key over the letters.\nDescribes a keyboard input event.\nAn event from the keyboard has been received.\nThis is the “windows” key on PC and “command” key …\nAmount in lines or rows to scroll in the horizontal and …\nEmitted when the event loop is being shut down.\nEmitted when all of the event loop’s input events have …\nThe keyboard modifiers have changed.\nRepresents the current state of the keyboard modifiers\nMotion on some analog axis. This event will be reported …\nDescribes a button of a mouse controller.\nAn mouse button press has been received.\nChange in physical position of a pointing device.\nDescribes a difference in the mouse scroll wheel state.\nA mouse wheel movement or touchpad scroll occurred.\nPhysical scroll event\nThe position of the window has changed. Contains the window…\nEmitted when new events arrive from the OS to be processed.\nIf the platform reports the force as normalized, we have …\nThe window has been occluded (completely hidden from view).\nPause/Break key, next to Scroll lock.\nAmount in pixels to scroll in the horizontal and vertical …\nSent if the event loop is being resumed after the loop’s …\nNotifies when a new composing text should be set at the …\nThe window received a unicode character.\nEmitted after all <code>RedrawRequested</code> events have been …\nEmitted after <code>MainEventsCleared</code> when a window should be …\nThe size of the window has changed. Contains the client …\nSent if the time specified by <code>ControlFlow::WaitUntil</code> has …\nEmitted when the application has been resumed.\nThe Enter key.\nThe “shift” key.\nThe window’s scale factor has changed.\nHardware-dependent keyboard scan code.\nScroll Lock.\nPrint Screen/SysRq.\nThe space bar.\nDescribes the reason the event loop is resuming.\nEmitted when the application has been suspended.\nThe system window theme has changed.\nRepresents a touch event\nTouch event has been received\nDescribes touch-screen input state.\nTouchpad pressure event.\nEmitted when an event is sent from …\nSymbolic name for a keyboard key.\nSent if the OS has new events to send to the window, after …\nDescribes an event from a <code>Window</code>.\nEmitted when the OS sends an event to a winit window.\nReturns the set containing all flags.\nReturns <code>true</code> if the alt key is pressed.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if the control key is pressed.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns a dummy id, useful for unit testing.\nReturns an empty set of flags.\nDescribes how hard the screen was pressed. May be <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nUnique identifier of a finger.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if the logo key is pressed.\nModifier keys active at the time of this input.\nReturns the force normalized to the range between 0.0 and …\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nIdentifies the physical key pressed\nInserts or removes the specified flags depending on the …\nReturns <code>true</code> if the shift key is pressed.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nIf the event doesn’t contain a reference, turn it into …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nIdentifies the semantic meaning of the key\n(x, y) change in position in unspecified units.\nThe altitude (in radians) of the stylus.\nThe force of the touch, where a value of 1.0 represents …\nThe maximum possible force for a touch.\nIf <code>true</code>, the event was generated synthetically by winit in …\n(x,y) coords in pixels relative to the top-left corner of …\nAlways filter out device events.\nSet by the user callback given to the <code>EventLoop::run</code> …\nFilter controlling the propagation of device events.\nProvides a way to retrieve events from the system and from …\nObject that allows building the event loop.\nThe error that is returned when an <code>EventLoopProxy</code> attempts …\nUsed to send custom events to <code>EventLoop</code>.\nTarget that associates windows with an <code>EventLoop</code>.\nAlias for <code>ExitWithCode</code><code>(0)</code>.\nSend a <code>LoopDestroyed</code> event and stop the event loop. This …\nReport all device events regardless of window focus.\nWhen the current loop iteration finishes, immediately …\nFilter out device events while the window is not focused.\nWhen the current loop iteration finishes, suspend the …\nWhen the current loop iteration finishes, suspend the …\nReturns the list of all the monitors available on the …\nBuilds a new event loop.\nCreates an <code>EventLoopProxy</code> that can be used to dispatch …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlias for <code>EventLoopBuilder::new().build()</code>.\nStart building a new event loop.\nReturns the primary monitor of the system.\nReturns a <code>raw_window_handle::RawDisplayHandle</code> for the …\nHijacks the calling thread and initializes the winit event …\nSend an event to the <code>EventLoop</code> from which this proxy was …\nChange <code>DeviceEvent</code> filter mode.\nSets this to <code>Exit</code>.\nSets this to <code>ExitWithCode</code><code>(code)</code>.\nSets this to <code>Poll</code>.\nSets this to <code>Wait</code>.\nSets this to <code>WaitUntil</code><code>(instant)</code>.\nStart building a new event loop, with the given type as …\nHandle to a monitor.\nDescribes a fullscreen video mode of a monitor.\nReturns the bit depth of this video mode, as in how many …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the monitor that this video mode is valid for. …\nReturns a human-readable name of the monitor.\nReturns the top-left corner position of the monitor …\nReturns the refresh rate of this video mode in mHz.\nThe monitor refresh rate used by the system.\nReturns the scale factor that can be used to map logical …\nReturns the resolution of this video mode.\nReturns the monitor’s resolution.\nReturns all fullscreen video modes supported by this …\nAdditional methods on <code>EventLoop</code> to return control flow to …\nA type provided by the user that can be passed through …\nInitializes the <code>winit</code> event loop.\nThis should be used on the windows that are popped up by …\nA desktop feature. This can include a single window …\nThis is a dialog window.\nThis indicates the the window is being dragged. This …\nA dock or panel feature. Typically a Window Manager would …\nA dropdown menu that usually appears when the user clicks …\nAdditional methods on <code>EventLoopBuilder</code> that are specific …\nAdditional methods on <code>EventLoopWindowTarget</code> that are …\nFailed to load one or several shared libraries.\nPinnable menu windows. “Torn off” from the main …\nAdditional methods on <code>MonitorHandle</code> that are specific to …\nThis is a normal, top-level window.\nThe window is a notification. This property is typically …\nA popup menu that usually appears when the user right …\nThe window is a splash screen displayed as an application …\nToolbar windows. “Torn off” from the main application.\nA tooltip window. Usually used to show additional …\nA small persistent utility window, such as a palette or …\nAdditional methods on <code>WindowBuilder</code> that are specific to …\nAdditional methods on <code>Window</code> that are specific to Unix.\nError returned if this system doesn’t have XLib or can’…\nConnecting to the X server with <code>XOpenDisplay</code> failed.\nX window type. Maps directly to <code>_NET_WM_WINDOW_TYPE</code>.\nThe first argument in the provided hook will be the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the window is ready for drawing\nTrue if the <code>EventLoopWindowTarget</code> uses Wayland.\nTrue if the <code>EventLoopWindowTarget</code> uses X11.\nReturns the inner identifier of the monitor.\nHook to winit’s xlib error handling callback.\nReturns a pointer to the <code>wl_display</code> object of wayland that …\nReturns a pointer to the <code>wl_display</code> object of wayland that …\nUpdates <code>Theme</code> of window decorations.\nReturns a pointer to the <code>wl_surface</code> object of wayland that …\nWhether to allow the event loop to be created off of the …\nBuild window with base size hint. Only implemented on X11.\nBuild window with <code>_GTK_THEME_VARIANT</code> hint set to the …\nBuild window with the given <code>general</code> and <code>instance</code> names.\nBuild window with override-redirect flag; defaults to …\nBuild window with resize increment hint. Only implemented …\nForce using Wayland.\nBuild window with certain decoration <code>Theme</code>\nForce using X11.\nBuild window with <code>_NET_WM_WINDOW_TYPE</code> hints; defaults to …\nThis function returns the underlying <code>xcb_connection_t</code> of …\nReturns a pointer to the <code>Display</code> object of xlib that is …\nReturns the ID of the <code>Window</code> xlib object that is used by …\nSelf explanatory.\nAn error produced when using <code>Icon::from_rgba</code> with invalid …\nProviding <code>None</code> to <code>Borderless</code> will fullscreen on the …\nProduced when the length of the <code>rgba</code> argument isn’t …\nThe cursor is confined to the window area.\nPlatform-specific\nA simple crosshair.\nThe behavior of cursor grabbing.\nDescribes the appearance of the mouse cursor.\nThe platform-dependent default cursor.\nProduced when the number of pixels (<code>rgba.len() / 4</code>) isn’…\nIndicate that some edge is to be moved. For example, the …\nFullscreen modes.\nIndicates something can be grabbed.\nIndicates something is grabbed.\nA hand (often used to indicate links in web browsers).\nHelp indicator (often rendered as a “?”)\nAn icon used for the window titlebar, taskbar, etc.\nPlatform-specific\nThe cursor is locked inside the window area to the certain …\nIndicates something is to be moved.\nNo grabbing of the cursor is performed.\nCursor showing that something cannot be done.\nProduced when underlying OS functionality failed to create …\nProgress indicator. Shows that processing is being done. …\nIndicates text that may be selected or edited.\nPlatform-specific\nProgram busy indicator.\nRepresents a window.\nObject that allows building windows.\nIdentifier of a window. Unique for each window.\nReturns the list of all the monitors available on the …\nBuilds the window.\nReturns the monitor on which the window currently resides.\nMoves the window with the left mouse button until the …\nReturns a dummy id, useful for unit testing.\nBrings the window to the front and sets input focus. Has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an icon from 32bpp RGBA data.\nGets the window’s current fullscreen state.\nReturns an identifier unique to the window.\nReturns the position of the top-left hand corner of the …\nReturns the physical size of the window’s client area.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the window’s current decorations state.\nGets the window’s current maximized state.\nGets the window’s current resizable state.\nGets the window’s current visibility state.\nCreates a new Window for platforms where this is …\nInitializes a new builder with default values.\nReturns the position of the top-left hand corner of the …\nReturns the physical size of the entire window.\nReturns the primary monitor of the system.\nReturns a <code>raw_window_handle::RawDisplayHandle</code> used by the …\nReturns a <code>raw_window_handle_04::RawWindowHandle</code> for the …\nReturns a <code>raw_window_handle::RawWindowHandle</code> for the Window\nEmits a <code>Event::RedrawRequested</code> event in the associated …\nRequests user attention to the window, this has no effect …\nReturns the scale factor that can be used to map logical …\nChange whether or not the window will always be on top of …\nSet grabbing mode on the cursor preventing it from leaving …\nModifies whether the window catches cursor events.\nModifies the cursor icon of the window.\nChanges the position of the cursor in window coordinates.\nModifies the cursor’s visibility.\nTurn window decorations on or off.\nSets the window to fullscreen or back.\nSets whether the window should get IME events\nSets location of IME candidate box in client area …\nModifies the inner size of the window.\nSets a maximum dimension size for the window.\nSets the window to maximized or back.\nSets a minimum dimension size for the window.\nSets the window to minimized or back\nModifies the position of the window.\nSets whether the window is resizable or not.\nModifies the title of the window.\nModifies the window’s visibility.\nSets the window icon.\nGet whether the window will support transparency.\nSets whether or not the window will always be on top of …\nSets whether the window should have a border, a title bar, …\nSets whether the window should be put into fullscreen upon …\nRequests the window to be of specific dimensions.\nSets the maximum dimensions a window can have.\nRequest that the window is maximized upon creation.\nSets the minimum dimensions a window can have.\nSets a desired initial position for the window.\nSets whether the window is resizable or not.\nSets the initial title of the window in the title bar.\nSets whether the background of the window should be …\nSets whether the window will be initially visible or …\nSets the window icon.")